
HummingBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000800  00000800  00000800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003c40  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e0  20000074  00003cb4  00010074  2**2
                  ALLOC
  3 .stack        00000404  20000354  00003f94  00010074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005308d  00000000  00000000  000100f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006876  00000000  00000000  00063182  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a0c0  00000000  00000000  000699f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  00073ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d50  00000000  00000000  00074358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b18e  00000000  00000000  000750a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017429  00000000  00000000  00090236  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000734e5  00000000  00000000  000a765f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001518  00000000  00000000  0011ab44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000800 <exception_table>:
     800:	58 07 00 20 a5 34 00 00 a1 34 00 00 a1 34 00 00     X.. .4...4...4..
	...
     82c:	a1 34 00 00 00 00 00 00 00 00 00 00 a1 34 00 00     .4...........4..
     83c:	a1 34 00 00 a1 34 00 00 a1 34 00 00 a1 34 00 00     .4...4...4...4..
     84c:	a1 34 00 00 29 2b 00 00 a1 34 00 00 a1 34 00 00     .4..)+...4...4..
     85c:	00 00 00 00 a1 34 00 00 f9 2a 00 00 09 2b 00 00     .....4...*...+..
     86c:	19 2b 00 00 bd 24 00 00 79 2a 00 00 89 2a 00 00     .+...$..y*...*..
     87c:	25 16 00 00 a1 34 00 00 a1 34 00 00 a1 34 00 00     %....4...4...4..

0000088c <__do_global_dtors_aux>:
     88c:	b510      	push	{r4, lr}
     88e:	4c06      	ldr	r4, [pc, #24]	; (8a8 <__do_global_dtors_aux+0x1c>)
     890:	7823      	ldrb	r3, [r4, #0]
     892:	2b00      	cmp	r3, #0
     894:	d107      	bne.n	8a6 <__do_global_dtors_aux+0x1a>
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <__do_global_dtors_aux+0x20>)
     898:	2b00      	cmp	r3, #0
     89a:	d002      	beq.n	8a2 <__do_global_dtors_aux+0x16>
     89c:	4804      	ldr	r0, [pc, #16]	; (8b0 <__do_global_dtors_aux+0x24>)
     89e:	e000      	b.n	8a2 <__do_global_dtors_aux+0x16>
     8a0:	bf00      	nop
     8a2:	2301      	movs	r3, #1
     8a4:	7023      	strb	r3, [r4, #0]
     8a6:	bd10      	pop	{r4, pc}
     8a8:	20000074 	.word	0x20000074
     8ac:	00000000 	.word	0x00000000
     8b0:	00003c40 	.word	0x00003c40

000008b4 <frame_dummy>:
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <frame_dummy+0x24>)
     8b6:	b510      	push	{r4, lr}
     8b8:	2b00      	cmp	r3, #0
     8ba:	d003      	beq.n	8c4 <frame_dummy+0x10>
     8bc:	4907      	ldr	r1, [pc, #28]	; (8dc <frame_dummy+0x28>)
     8be:	4808      	ldr	r0, [pc, #32]	; (8e0 <frame_dummy+0x2c>)
     8c0:	e000      	b.n	8c4 <frame_dummy+0x10>
     8c2:	bf00      	nop
     8c4:	4807      	ldr	r0, [pc, #28]	; (8e4 <frame_dummy+0x30>)
     8c6:	6803      	ldr	r3, [r0, #0]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d100      	bne.n	8ce <frame_dummy+0x1a>
     8cc:	bd10      	pop	{r4, pc}
     8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <frame_dummy+0x34>)
     8d0:	2b00      	cmp	r3, #0
     8d2:	d0fb      	beq.n	8cc <frame_dummy+0x18>
     8d4:	4798      	blx	r3
     8d6:	e7f9      	b.n	8cc <frame_dummy+0x18>
     8d8:	00000000 	.word	0x00000000
     8dc:	20000078 	.word	0x20000078
     8e0:	00003c40 	.word	0x00003c40
     8e4:	00003c40 	.word	0x00003c40
     8e8:	00000000 	.word	0x00000000

000008ec <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f0:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     8f2:	0020      	movs	r0, r4
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <spi_reset+0x44>)
     8f6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8f8:	231f      	movs	r3, #31
     8fa:	4018      	ands	r0, r3
     8fc:	3b1e      	subs	r3, #30
     8fe:	4083      	lsls	r3, r0
     900:	2280      	movs	r2, #128	; 0x80
     902:	490c      	ldr	r1, [pc, #48]	; (934 <spi_reset+0x48>)
     904:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     906:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     908:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     90a:	2b00      	cmp	r3, #0
     90c:	d1fc      	bne.n	908 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     90e:	338f      	adds	r3, #143	; 0x8f
     910:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     912:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     914:	6823      	ldr	r3, [r4, #0]
     916:	2202      	movs	r2, #2
     918:	4393      	bics	r3, r2
     91a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     91c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     91e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
     920:	2b00      	cmp	r3, #0
     922:	d1fc      	bne.n	91e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     924:	6823      	ldr	r3, [r4, #0]
     926:	2201      	movs	r2, #1
     928:	4313      	orrs	r3, r2
     92a:	6023      	str	r3, [r4, #0]
}
     92c:	bd70      	pop	{r4, r5, r6, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	00002ad9 	.word	0x00002ad9
     934:	e000e100 	.word	0xe000e100

00000938 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	b08b      	sub	sp, #44	; 0x2c
     93c:	0005      	movs	r5, r0
     93e:	000c      	movs	r4, r1
     940:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     942:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     944:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     946:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     948:	079b      	lsls	r3, r3, #30
     94a:	d501      	bpl.n	950 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     94c:	b00b      	add	sp, #44	; 0x2c
     94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     950:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     952:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     954:	07db      	lsls	r3, r3, #31
     956:	d4f9      	bmi.n	94c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     958:	0008      	movs	r0, r1
     95a:	4b6f      	ldr	r3, [pc, #444]	; (b18 <spi_init+0x1e0>)
     95c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     95e:	4a6f      	ldr	r2, [pc, #444]	; (b1c <spi_init+0x1e4>)
     960:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     962:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     964:	2301      	movs	r3, #1
     966:	40bb      	lsls	r3, r7
     968:	430b      	orrs	r3, r1
     96a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     96c:	a909      	add	r1, sp, #36	; 0x24
     96e:	2724      	movs	r7, #36	; 0x24
     970:	5df3      	ldrb	r3, [r6, r7]
     972:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     974:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     976:	b2c3      	uxtb	r3, r0
     978:	9301      	str	r3, [sp, #4]
     97a:	0018      	movs	r0, r3
     97c:	4b68      	ldr	r3, [pc, #416]	; (b20 <spi_init+0x1e8>)
     97e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     980:	9801      	ldr	r0, [sp, #4]
     982:	4b68      	ldr	r3, [pc, #416]	; (b24 <spi_init+0x1ec>)
     984:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     986:	5df0      	ldrb	r0, [r6, r7]
     988:	2100      	movs	r1, #0
     98a:	4b67      	ldr	r3, [pc, #412]	; (b28 <spi_init+0x1f0>)
     98c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     98e:	7833      	ldrb	r3, [r6, #0]
     990:	2b01      	cmp	r3, #1
     992:	d03f      	beq.n	a14 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     994:	7833      	ldrb	r3, [r6, #0]
     996:	2b00      	cmp	r3, #0
     998:	d103      	bne.n	9a2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     99a:	6823      	ldr	r3, [r4, #0]
     99c:	2208      	movs	r2, #8
     99e:	4313      	orrs	r3, r2
     9a0:	6023      	str	r3, [r4, #0]
     9a2:	002b      	movs	r3, r5
     9a4:	330c      	adds	r3, #12
     9a6:	0029      	movs	r1, r5
     9a8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     9aa:	2200      	movs	r2, #0
     9ac:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     9ae:	428b      	cmp	r3, r1
     9b0:	d1fc      	bne.n	9ac <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     9b2:	2300      	movs	r3, #0
     9b4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     9b6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     9b8:	2400      	movs	r4, #0
     9ba:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     9bc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     9be:	3336      	adds	r3, #54	; 0x36
     9c0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     9c2:	3301      	adds	r3, #1
     9c4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     9c6:	3301      	adds	r3, #1
     9c8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     9ca:	3b35      	subs	r3, #53	; 0x35
     9cc:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     9ce:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     9d0:	6828      	ldr	r0, [r5, #0]
     9d2:	4b51      	ldr	r3, [pc, #324]	; (b18 <spi_init+0x1e0>)
     9d4:	4798      	blx	r3
     9d6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     9d8:	4954      	ldr	r1, [pc, #336]	; (b2c <spi_init+0x1f4>)
     9da:	4b55      	ldr	r3, [pc, #340]	; (b30 <spi_init+0x1f8>)
     9dc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9de:	00bf      	lsls	r7, r7, #2
     9e0:	4b54      	ldr	r3, [pc, #336]	; (b34 <spi_init+0x1fc>)
     9e2:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     9e4:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9e6:	ab04      	add	r3, sp, #16
     9e8:	2280      	movs	r2, #128	; 0x80
     9ea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9ec:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9ee:	3a7f      	subs	r2, #127	; 0x7f
     9f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     9f2:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     9f4:	7833      	ldrb	r3, [r6, #0]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d102      	bne.n	a00 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9fa:	2200      	movs	r2, #0
     9fc:	ab04      	add	r3, sp, #16
     9fe:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     a02:	9305      	str	r3, [sp, #20]
     a04:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     a06:	9306      	str	r3, [sp, #24]
     a08:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a0a:	9307      	str	r3, [sp, #28]
     a0c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a0e:	9308      	str	r3, [sp, #32]
     a10:	2400      	movs	r4, #0
     a12:	e00b      	b.n	a2c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     a14:	6823      	ldr	r3, [r4, #0]
     a16:	220c      	movs	r2, #12
     a18:	4313      	orrs	r3, r2
     a1a:	6023      	str	r3, [r4, #0]
     a1c:	e7ba      	b.n	994 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a1e:	0038      	movs	r0, r7
     a20:	4b45      	ldr	r3, [pc, #276]	; (b38 <spi_init+0x200>)
     a22:	4798      	blx	r3
     a24:	e00a      	b.n	a3c <spi_init+0x104>
     a26:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a28:	2c04      	cmp	r4, #4
     a2a:	d010      	beq.n	a4e <spi_init+0x116>
     a2c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a2e:	00a3      	lsls	r3, r4, #2
     a30:	aa02      	add	r2, sp, #8
     a32:	200c      	movs	r0, #12
     a34:	1812      	adds	r2, r2, r0
     a36:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     a38:	2800      	cmp	r0, #0
     a3a:	d0f0      	beq.n	a1e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     a3c:	1c43      	adds	r3, r0, #1
     a3e:	d0f2      	beq.n	a26 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a40:	a904      	add	r1, sp, #16
     a42:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a44:	0c00      	lsrs	r0, r0, #16
     a46:	b2c0      	uxtb	r0, r0
     a48:	4b3c      	ldr	r3, [pc, #240]	; (b3c <spi_init+0x204>)
     a4a:	4798      	blx	r3
     a4c:	e7eb      	b.n	a26 <spi_init+0xee>
	module->mode             = config->mode;
     a4e:	7833      	ldrb	r3, [r6, #0]
     a50:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     a52:	7c33      	ldrb	r3, [r6, #16]
     a54:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     a56:	7cb3      	ldrb	r3, [r6, #18]
     a58:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     a5a:	7d33      	ldrb	r3, [r6, #20]
     a5c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     a5e:	2200      	movs	r2, #0
     a60:	ab02      	add	r3, sp, #8
     a62:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     a64:	7833      	ldrb	r3, [r6, #0]
     a66:	2b01      	cmp	r3, #1
     a68:	d012      	beq.n	a90 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     a6a:	7833      	ldrb	r3, [r6, #0]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d126      	bne.n	abe <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     a70:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     a72:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a76:	7ff1      	ldrb	r1, [r6, #31]
     a78:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a7a:	7fb4      	ldrb	r4, [r6, #30]
     a7c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     a7e:	4319      	orrs	r1, r3
     a80:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     a82:	2320      	movs	r3, #32
     a84:	5cf3      	ldrb	r3, [r6, r3]
     a86:	2b00      	cmp	r3, #0
     a88:	d01b      	beq.n	ac2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a8a:	2340      	movs	r3, #64	; 0x40
     a8c:	431a      	orrs	r2, r3
     a8e:	e018      	b.n	ac2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a90:	6828      	ldr	r0, [r5, #0]
     a92:	4b21      	ldr	r3, [pc, #132]	; (b18 <spi_init+0x1e0>)
     a94:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a96:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     a98:	b2c0      	uxtb	r0, r0
     a9a:	4b29      	ldr	r3, [pc, #164]	; (b40 <spi_init+0x208>)
     a9c:	4798      	blx	r3
     a9e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     aa0:	ab02      	add	r3, sp, #8
     aa2:	1d9a      	adds	r2, r3, #6
     aa4:	69b0      	ldr	r0, [r6, #24]
     aa6:	4b27      	ldr	r3, [pc, #156]	; (b44 <spi_init+0x20c>)
     aa8:	4798      	blx	r3
     aaa:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     aac:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     aae:	2b00      	cmp	r3, #0
     ab0:	d000      	beq.n	ab4 <spi_init+0x17c>
     ab2:	e74b      	b.n	94c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     ab4:	ab02      	add	r3, sp, #8
     ab6:	3306      	adds	r3, #6
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	733b      	strb	r3, [r7, #12]
     abc:	e7d5      	b.n	a6a <spi_init+0x132>
	uint32_t ctrlb = 0;
     abe:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     ac0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     ac2:	6873      	ldr	r3, [r6, #4]
     ac4:	68b1      	ldr	r1, [r6, #8]
     ac6:	430b      	orrs	r3, r1
     ac8:	68f1      	ldr	r1, [r6, #12]
     aca:	430b      	orrs	r3, r1
     acc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     ace:	7c31      	ldrb	r1, [r6, #16]
     ad0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     ad2:	7c71      	ldrb	r1, [r6, #17]
     ad4:	2900      	cmp	r1, #0
     ad6:	d103      	bne.n	ae0 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ad8:	491b      	ldr	r1, [pc, #108]	; (b48 <spi_init+0x210>)
     ada:	7889      	ldrb	r1, [r1, #2]
     adc:	0789      	lsls	r1, r1, #30
     ade:	d501      	bpl.n	ae4 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ae0:	2180      	movs	r1, #128	; 0x80
     ae2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     ae4:	7cb1      	ldrb	r1, [r6, #18]
     ae6:	2900      	cmp	r1, #0
     ae8:	d002      	beq.n	af0 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     aea:	2180      	movs	r1, #128	; 0x80
     aec:	0289      	lsls	r1, r1, #10
     aee:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     af0:	7cf1      	ldrb	r1, [r6, #19]
     af2:	2900      	cmp	r1, #0
     af4:	d002      	beq.n	afc <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     af6:	2180      	movs	r1, #128	; 0x80
     af8:	0089      	lsls	r1, r1, #2
     afa:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     afc:	7d31      	ldrb	r1, [r6, #20]
     afe:	2900      	cmp	r1, #0
     b00:	d002      	beq.n	b08 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b02:	2180      	movs	r1, #128	; 0x80
     b04:	0189      	lsls	r1, r1, #6
     b06:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     b08:	6839      	ldr	r1, [r7, #0]
     b0a:	430b      	orrs	r3, r1
     b0c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	431a      	orrs	r2, r3
     b12:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     b14:	2000      	movs	r0, #0
     b16:	e719      	b.n	94c <spi_init+0x14>
     b18:	0000189d 	.word	0x0000189d
     b1c:	40000400 	.word	0x40000400
     b20:	00003305 	.word	0x00003305
     b24:	00003279 	.word	0x00003279
     b28:	00001791 	.word	0x00001791
     b2c:	00000bad 	.word	0x00000bad
     b30:	00002a9d 	.word	0x00002a9d
     b34:	200002b4 	.word	0x200002b4
     b38:	000017dd 	.word	0x000017dd
     b3c:	000033fd 	.word	0x000033fd
     b40:	00003321 	.word	0x00003321
     b44:	00001769 	.word	0x00001769
     b48:	41002000 	.word	0x41002000

00000b4c <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b4c:	1c93      	adds	r3, r2, #2
     b4e:	009b      	lsls	r3, r3, #2
     b50:	18c3      	adds	r3, r0, r3
     b52:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     b54:	2136      	movs	r1, #54	; 0x36
     b56:	2301      	movs	r3, #1
     b58:	4093      	lsls	r3, r2
     b5a:	001a      	movs	r2, r3
     b5c:	5c43      	ldrb	r3, [r0, r1]
     b5e:	4313      	orrs	r3, r2
     b60:	5443      	strb	r3, [r0, r1]
}
     b62:	4770      	bx	lr

00000b64 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     b64:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);
	
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b66:	2417      	movs	r4, #23
	if (length == 0) {
     b68:	2b00      	cmp	r3, #0
     b6a:	d101      	bne.n	b70 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
	
	return STATUS_OK;
}
     b6c:	0020      	movs	r0, r4
     b6e:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     b70:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     b72:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     b74:	2d00      	cmp	r5, #0
     b76:	d0f9      	beq.n	b6c <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     b78:	341c      	adds	r4, #28
     b7a:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     b7c:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     b7e:	2d05      	cmp	r5, #5
     b80:	d0f4      	beq.n	b6c <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
     b82:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
     b84:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
     b86:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
     b88:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
     b8a:	2205      	movs	r2, #5
     b8c:	2338      	movs	r3, #56	; 0x38
     b8e:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
     b90:	3b36      	subs	r3, #54	; 0x36
     b92:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     b94:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     b96:	759a      	strb	r2, [r3, #22]
	hw->INTFLAG.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     b98:	3280      	adds	r2, #128	; 0x80
     b9a:	761a      	strb	r2, [r3, #24]
	if (module->mode == SPI_MODE_SLAVE) {
     b9c:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
     b9e:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
     ba0:	2a00      	cmp	r2, #0
     ba2:	d1e3      	bne.n	b6c <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ba4:	3202      	adds	r2, #2
     ba6:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ba8:	759a      	strb	r2, [r3, #22]
     baa:	e7df      	b.n	b6c <spi_transceive_buffer_job+0x8>

00000bac <_spi_interrupt_handler>:

extern volatile bool spi_reset_1 ;


void _spi_interrupt_handler(uint8_t instance)
{
     bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	
	//*PORT_SET	=  G2_RGB;
	
	/* Get device instance from the look-up table */
	struct spi_module *module = (struct spi_module *)_sercom_instances[instance];
     bae:	0080      	lsls	r0, r0, #2
     bb0:	4b5c      	ldr	r3, [pc, #368]	; (d24 <_spi_interrupt_handler+0x178>)
     bb2:	58c5      	ldr	r5, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     bb4:	682e      	ldr	r6, [r5, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback & module->registered_callback;
     bb6:	2337      	movs	r3, #55	; 0x37
     bb8:	5cef      	ldrb	r7, [r5, r3]
     bba:	2236      	movs	r2, #54	; 0x36
     bbc:	5caa      	ldrb	r2, [r5, r2]
     bbe:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     bc0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     bc2:	7db4      	ldrb	r4, [r6, #22]
     bc4:	401c      	ands	r4, r3
	
	/* Data register empty interrupt */ 
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) 
     bc6:	07e3      	lsls	r3, r4, #31
     bc8:	d514      	bpl.n	bf4 <_spi_interrupt_handler+0x48>
	{
		if((module->mode == SPI_MODE_SLAVE) &&(module->dir != SPI_DIRECTION_READ))
     bca:	796b      	ldrb	r3, [r5, #5]
     bcc:	2b00      	cmp	r3, #0
     bce:	d111      	bne.n	bf4 <_spi_interrupt_handler+0x48>
     bd0:	7a6b      	ldrb	r3, [r5, #9]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d00e      	beq.n	bf4 <_spi_interrupt_handler+0x48>
		 {
			//_spi_write(module);
			//*PORT_SET	=  B2_RGB;
			data_to_send = *(module->tx_buffer_ptr);
     bd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bd8:	781a      	ldrb	r2, [r3, #0]
			(module->tx_buffer_ptr)++;
     bda:	3301      	adds	r3, #1
     bdc:	62eb      	str	r3, [r5, #44]	; 0x2c
			spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     bde:	62b2      	str	r2, [r6, #40]	; 0x28
			(module->remaining_tx_buffer_length)--;
     be0:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     be2:	3b01      	subs	r3, #1
     be4:	b29b      	uxth	r3, r3
     be6:	86ab      	strh	r3, [r5, #52]	; 0x34
		
			if (module->remaining_tx_buffer_length == 0) 
     be8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     bea:	b29b      	uxth	r3, r3
     bec:	2b00      	cmp	r3, #0
     bee:	d101      	bne.n	bf4 <_spi_interrupt_handler+0x48>
			{
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     bf0:	3301      	adds	r3, #1
     bf2:	7533      	strb	r3, [r6, #20]
			//*PORT_CLEAR	=  B2_RGB;
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     bf4:	0763      	lsls	r3, r4, #29
     bf6:	d505      	bpl.n	c04 <_spi_interrupt_handler+0x58>
		/* Check for overflow */
		//*PORT_SET	=  B2_RGB;
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) 
     bf8:	8b73      	ldrh	r3, [r6, #26]
     bfa:	075b      	lsls	r3, r3, #29
     bfc:	d520      	bpl.n	c40 <_spi_interrupt_handler+0x94>
		{
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     bfe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     c00:	2304      	movs	r3, #4
     c02:	8373      	strh	r3, [r6, #26]
			}
			//*PORT_CLEAR	=  B2_RGB;
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     c04:	07a3      	lsls	r3, r4, #30
     c06:	d50b      	bpl.n	c20 <_spi_interrupt_handler+0x74>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     c08:	796b      	ldrb	r3, [r5, #5]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d113      	bne.n	c36 <_spi_interrupt_handler+0x8a>
			
			spi_reset_1 = true;
     c0e:	2201      	movs	r2, #1
     c10:	4b45      	ldr	r3, [pc, #276]	; (d28 <_spi_interrupt_handler+0x17c>)
     c12:	701a      	strb	r2, [r3, #0]
			if(module->dir == SPI_DIRECTION_BOTH) {
     c14:	7a6b      	ldrb	r3, [r5, #9]
     c16:	2b02      	cmp	r3, #2
     c18:	d100      	bne.n	c1c <_spi_interrupt_handler+0x70>
     c1a:	e06d      	b.n	cf8 <_spi_interrupt_handler+0x14c>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					
				}
			}
			//*PORT_SET	=  B2_RGB;
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c1c:	2302      	movs	r3, #2
     c1e:	7633      	strb	r3, [r6, #24]

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
        
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     c20:	0723      	lsls	r3, r4, #28
     c22:	d508      	bpl.n	c36 <_spi_interrupt_handler+0x8a>
			if (module->mode == SPI_MODE_SLAVE) {
     c24:	796b      	ldrb	r3, [r5, #5]
     c26:	2b00      	cmp	r3, #0
     c28:	d105      	bne.n	c36 <_spi_interrupt_handler+0x8a>
				//*PORT_SET	=  B2_RGB;
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     c2a:	3308      	adds	r3, #8
     c2c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     c2e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     c30:	06bb      	lsls	r3, r7, #26
     c32:	d500      	bpl.n	c36 <_spi_interrupt_handler+0x8a>
     c34:	e067      	b.n	d06 <_spi_interrupt_handler+0x15a>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     c36:	b264      	sxtb	r4, r4
     c38:	2c00      	cmp	r4, #0
     c3a:	da00      	bge.n	c3e <_spi_interrupt_handler+0x92>
     c3c:	e067      	b.n	d0e <_spi_interrupt_handler+0x162>
	}
#  endif
	
	//*PORT_CLEAR	=  G2_RGB;
  
}
     c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     c40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     c42:	b2db      	uxtb	r3, r3
     c44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c46:	7013      	strb	r3, [r2, #0]
				module->rx_buffer_ptr += 1;
     c48:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     c4a:	1c4b      	adds	r3, r1, #1
     c4c:	62ab      	str	r3, [r5, #40]	; 0x28
				module->remaining_rx_buffer_length--;
     c4e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     c50:	3b01      	subs	r3, #1
     c52:	b29b      	uxth	r3, r3
     c54:	862b      	strh	r3, [r5, #48]	; 0x30
				buffer_length++;
     c56:	4a35      	ldr	r2, [pc, #212]	; (d2c <_spi_interrupt_handler+0x180>)
     c58:	7813      	ldrb	r3, [r2, #0]
     c5a:	3301      	adds	r3, #1
     c5c:	b2db      	uxtb	r3, r3
     c5e:	7013      	strb	r3, [r2, #0]
				if(buffer_length == 1)
     c60:	2b01      	cmp	r3, #1
     c62:	d01d      	beq.n	ca0 <_spi_interrupt_handler+0xf4>
				if (module->remaining_rx_buffer_length == 0) 
     c64:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     c66:	b29b      	uxth	r3, r3
     c68:	2b00      	cmp	r3, #0
     c6a:	d1cb      	bne.n	c04 <_spi_interrupt_handler+0x58>
					buffer_length = 0;
     c6c:	4a2f      	ldr	r2, [pc, #188]	; (d2c <_spi_interrupt_handler+0x180>)
     c6e:	7013      	strb	r3, [r2, #0]
					transcation_start = false;
     c70:	4a2f      	ldr	r2, [pc, #188]	; (d30 <_spi_interrupt_handler+0x184>)
     c72:	7013      	strb	r3, [r2, #0]
					firmware_check = false;
     c74:	4a2f      	ldr	r2, [pc, #188]	; (d34 <_spi_interrupt_handler+0x188>)
     c76:	7013      	strb	r3, [r2, #0]
					serial_timeout = false;
     c78:	4a2f      	ldr	r2, [pc, #188]	; (d38 <_spi_interrupt_handler+0x18c>)
     c7a:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ;
     c7c:	4a2f      	ldr	r2, [pc, #188]	; (d3c <_spi_interrupt_handler+0x190>)
     c7e:	7013      	strb	r3, [r2, #0]
					module->status = STATUS_OK;
     c80:	2238      	movs	r2, #56	; 0x38
     c82:	54ab      	strb	r3, [r5, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     c84:	3304      	adds	r3, #4
     c86:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     c88:	7a6b      	ldrb	r3, [r5, #9]
     c8a:	2b02      	cmp	r3, #2
     c8c:	d02d      	beq.n	cea <_spi_interrupt_handler+0x13e>
					} else if (module->dir == SPI_DIRECTION_READ) {
     c8e:	7a6b      	ldrb	r3, [r5, #9]
     c90:	2b00      	cmp	r3, #0
     c92:	d1b7      	bne.n	c04 <_spi_interrupt_handler+0x58>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     c94:	07bb      	lsls	r3, r7, #30
     c96:	d5b5      	bpl.n	c04 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     c98:	0028      	movs	r0, r5
     c9a:	692b      	ldr	r3, [r5, #16]
     c9c:	4798      	blx	r3
     c9e:	e7b1      	b.n	c04 <_spi_interrupt_handler+0x58>
					transcation_start = true;
     ca0:	2201      	movs	r2, #1
     ca2:	4b23      	ldr	r3, [pc, #140]	; (d30 <_spi_interrupt_handler+0x184>)
     ca4:	701a      	strb	r2, [r3, #0]
					serial_timeout = false;
     ca6:	2300      	movs	r3, #0
     ca8:	4a23      	ldr	r2, [pc, #140]	; (d38 <_spi_interrupt_handler+0x18c>)
     caa:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ; 
     cac:	4a23      	ldr	r2, [pc, #140]	; (d3c <_spi_interrupt_handler+0x190>)
     cae:	7013      	strb	r3, [r2, #0]
					if ((*(module->rx_buffer_ptr-1) == WR_SPI_INT_SET_ALL || *(module->rx_buffer_ptr-1) == WR_SPI_INT_RECEIVE_ALL)) 
     cb0:	780b      	ldrb	r3, [r1, #0]
     cb2:	b2db      	uxtb	r3, r3
     cb4:	2bca      	cmp	r3, #202	; 0xca
     cb6:	d00f      	beq.n	cd8 <_spi_interrupt_handler+0x12c>
     cb8:	780b      	ldrb	r3, [r1, #0]
     cba:	b2db      	uxtb	r3, r3
     cbc:	2bcc      	cmp	r3, #204	; 0xcc
     cbe:	d00b      	beq.n	cd8 <_spi_interrupt_handler+0x12c>
					else if(*(module->rx_buffer_ptr-1) == DEVICE_VERSION)
     cc0:	780b      	ldrb	r3, [r1, #0]
     cc2:	b2db      	uxtb	r3, r3
     cc4:	2b8c      	cmp	r3, #140	; 0x8c
     cc6:	d1cd      	bne.n	c64 <_spi_interrupt_handler+0xb8>
						*(module->tx_buffer_ptr)      =	DEVICE_ID_HARDWARE ;
     cc8:	3b8b      	subs	r3, #139	; 0x8b
     cca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     ccc:	7013      	strb	r3, [r2, #0]
						*(module->tx_buffer_ptr + 1)  = DEVICE_ID_FIRMWARE ;
     cce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     cd0:	7053      	strb	r3, [r2, #1]
						firmware_check				  = true;
     cd2:	4a18      	ldr	r2, [pc, #96]	; (d34 <_spi_interrupt_handler+0x188>)
     cd4:	7013      	strb	r3, [r2, #0]
     cd6:	e7c5      	b.n	c64 <_spi_interrupt_handler+0xb8>
						module->remaining_tx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
     cd8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     cda:	3309      	adds	r3, #9
     cdc:	b29b      	uxth	r3, r3
     cde:	86ab      	strh	r3, [r5, #52]	; 0x34
						module->remaining_rx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
     ce0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     ce2:	3309      	adds	r3, #9
     ce4:	b29b      	uxth	r3, r3
     ce6:	862b      	strh	r3, [r5, #48]	; 0x30
     ce8:	e7bc      	b.n	c64 <_spi_interrupt_handler+0xb8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     cea:	077b      	lsls	r3, r7, #29
     cec:	d400      	bmi.n	cf0 <_spi_interrupt_handler+0x144>
     cee:	e789      	b.n	c04 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     cf0:	0028      	movs	r0, r5
     cf2:	696b      	ldr	r3, [r5, #20]
     cf4:	4798      	blx	r3
     cf6:	e785      	b.n	c04 <_spi_interrupt_handler+0x58>
				if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     cf8:	077b      	lsls	r3, r7, #29
     cfa:	d400      	bmi.n	cfe <_spi_interrupt_handler+0x152>
     cfc:	e78e      	b.n	c1c <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     cfe:	0028      	movs	r0, r5
     d00:	696b      	ldr	r3, [r5, #20]
     d02:	4798      	blx	r3
     d04:	e78a      	b.n	c1c <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     d06:	0028      	movs	r0, r5
     d08:	6a2b      	ldr	r3, [r5, #32]
     d0a:	4798      	blx	r3
     d0c:	e793      	b.n	c36 <_spi_interrupt_handler+0x8a>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d12:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     d14:	067b      	lsls	r3, r7, #25
     d16:	d400      	bmi.n	d1a <_spi_interrupt_handler+0x16e>
     d18:	e791      	b.n	c3e <_spi_interrupt_handler+0x92>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d1c:	0028      	movs	r0, r5
     d1e:	4798      	blx	r3
}
     d20:	e78d      	b.n	c3e <_spi_interrupt_handler+0x92>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	200002b4 	.word	0x200002b4
     d28:	200000f1 	.word	0x200000f1
     d2c:	20000090 	.word	0x20000090
     d30:	200000f2 	.word	0x200000f2
     d34:	200000ed 	.word	0x200000ed
     d38:	200000ef 	.word	0x200000ef
     d3c:	200000f0 	.word	0x200000f0

00000d40 <check_timeout>:
#include "super_servo_control.h"

#define   APP

void check_timeout()
{
     d40:	b510      	push	{r4, lr}
	if(transcation_start == true)
     d42:	4b0e      	ldr	r3, [pc, #56]	; (d7c <check_timeout+0x3c>)
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d003      	beq.n	d52 <check_timeout+0x12>
	{
		if(serial_timeout == true)
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <check_timeout+0x40>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2b00      	cmp	r3, #0
     d50:	d100      	bne.n	d54 <check_timeout+0x14>
			spi_slave_init();
			spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
		}
	}
	
}
     d52:	bd10      	pop	{r4, pc}
			serial_timeout_count = 0;
     d54:	2300      	movs	r3, #0
     d56:	4a0b      	ldr	r2, [pc, #44]	; (d84 <check_timeout+0x44>)
     d58:	7013      	strb	r3, [r2, #0]
			serial_timeout = false;
     d5a:	4a09      	ldr	r2, [pc, #36]	; (d80 <check_timeout+0x40>)
     d5c:	7013      	strb	r3, [r2, #0]
			transcation_start = false;
     d5e:	4a07      	ldr	r2, [pc, #28]	; (d7c <check_timeout+0x3c>)
     d60:	7013      	strb	r3, [r2, #0]
			spi_reset(&spi_slave_instance);
     d62:	4c09      	ldr	r4, [pc, #36]	; (d88 <check_timeout+0x48>)
     d64:	0020      	movs	r0, r4
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <check_timeout+0x4c>)
     d68:	4798      	blx	r3
			spi_slave_init();
     d6a:	4b09      	ldr	r3, [pc, #36]	; (d90 <check_timeout+0x50>)
     d6c:	4798      	blx	r3
			spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     d6e:	2304      	movs	r3, #4
     d70:	4a08      	ldr	r2, [pc, #32]	; (d94 <check_timeout+0x54>)
     d72:	4909      	ldr	r1, [pc, #36]	; (d98 <check_timeout+0x58>)
     d74:	0020      	movs	r0, r4
     d76:	4c09      	ldr	r4, [pc, #36]	; (d9c <check_timeout+0x5c>)
     d78:	47a0      	blx	r4
}
     d7a:	e7ea      	b.n	d52 <check_timeout+0x12>
     d7c:	200000f2 	.word	0x200000f2
     d80:	200000ef 	.word	0x200000ef
     d84:	200000f0 	.word	0x200000f0
     d88:	20000100 	.word	0x20000100
     d8c:	000008ed 	.word	0x000008ed
     d90:	00001051 	.word	0x00001051
     d94:	200002e0 	.word	0x200002e0
     d98:	200002f4 	.word	0x200002f4
     d9c:	00000b65 	.word	0x00000b65

00000da0 <spi_main_loop>:




void spi_main_loop()
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46c6      	mov	lr, r8
     da4:	b500      	push	{lr}
     da6:	b086      	sub	sp, #24
	
	volatile enum status_code error_code = 0x10;
     da8:	2210      	movs	r2, #16
     daa:	2317      	movs	r3, #23
     dac:	446b      	add	r3, sp
     dae:	701a      	strb	r2, [r3, #0]

	uint8_t i    = 0;
	uint8_t rw   = 0;
	uint8_t mode = 0;
	static bool test = true;
	transmit_value[0] = 0x88;
     db0:	4b45      	ldr	r3, [pc, #276]	; (ec8 <spi_main_loop+0x128>)
     db2:	3278      	adds	r2, #120	; 0x78
     db4:	701a      	strb	r2, [r3, #0]
	transmit_value[1] = 0xAA;
     db6:	3222      	adds	r2, #34	; 0x22
     db8:	705a      	strb	r2, [r3, #1]
	transmit_value[2] = 0xBB;
     dba:	3211      	adds	r2, #17
     dbc:	709a      	strb	r2, [r3, #2]
	transmit_value[3] = 0xCC;
     dbe:	3211      	adds	r2, #17
     dc0:	70da      	strb	r2, [r3, #3]
	check_timeout();
     dc2:	4b42      	ldr	r3, [pc, #264]	; (ecc <spi_main_loop+0x12c>)
     dc4:	4798      	blx	r3
	if(transfer_complete_spi_slave == true)
     dc6:	4b42      	ldr	r3, [pc, #264]	; (ed0 <spi_main_loop+0x130>)
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	2b00      	cmp	r3, #0
     dcc:	d009      	beq.n	de2 <spi_main_loop+0x42>
	{
		rw   = temp_receive[0] & MASK_RW ;
     dce:	4a41      	ldr	r2, [pc, #260]	; (ed4 <spi_main_loop+0x134>)
     dd0:	7813      	ldrb	r3, [r2, #0]
		mode = temp_receive[0] & MASK_MODE;
     dd2:	7812      	ldrb	r2, [r2, #0]
     dd4:	b2d2      	uxtb	r2, r2
		if(rw == WRITE_SPI)
     dd6:	213f      	movs	r1, #63	; 0x3f
     dd8:	438b      	bics	r3, r1
     dda:	2bc0      	cmp	r3, #192	; 0xc0
     ddc:	d005      	beq.n	dea <spi_main_loop+0x4a>
		}
		else if(rw == READ_SPI)
		{
			
		}
		check_buffer();		
     dde:	4b3e      	ldr	r3, [pc, #248]	; (ed8 <spi_main_loop+0x138>)
     de0:	4798      	blx	r3
	}
	
}		
     de2:	b006      	add	sp, #24
     de4:	bc04      	pop	{r2}
     de6:	4690      	mov	r8, r2
     de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mode = temp_receive[0] & MASK_MODE;
     dea:	3b81      	subs	r3, #129	; 0x81
     dec:	401a      	ands	r2, r3
			switch(mode)
     dee:	b2d3      	uxtb	r3, r2
     df0:	2b0b      	cmp	r3, #11
     df2:	d8f4      	bhi.n	dde <spi_main_loop+0x3e>
     df4:	0092      	lsls	r2, r2, #2
     df6:	4b39      	ldr	r3, [pc, #228]	; (edc <spi_main_loop+0x13c>)
     df8:	589b      	ldr	r3, [r3, r2]
     dfa:	469f      	mov	pc, r3
					update_LEDS_single(LED1_NO,temp_receive[1]);
     dfc:	4b35      	ldr	r3, [pc, #212]	; (ed4 <spi_main_loop+0x134>)
     dfe:	7859      	ldrb	r1, [r3, #1]
     e00:	b2c9      	uxtb	r1, r1
     e02:	2031      	movs	r0, #49	; 0x31
     e04:	4b36      	ldr	r3, [pc, #216]	; (ee0 <spi_main_loop+0x140>)
     e06:	4798      	blx	r3
					break;
     e08:	e7e9      	b.n	dde <spi_main_loop+0x3e>
					update_LEDS_single(LED2_NO,temp_receive[1]);
     e0a:	4b32      	ldr	r3, [pc, #200]	; (ed4 <spi_main_loop+0x134>)
     e0c:	7859      	ldrb	r1, [r3, #1]
     e0e:	b2c9      	uxtb	r1, r1
     e10:	2032      	movs	r0, #50	; 0x32
     e12:	4b33      	ldr	r3, [pc, #204]	; (ee0 <spi_main_loop+0x140>)
     e14:	4798      	blx	r3
					break;
     e16:	e7e2      	b.n	dde <spi_main_loop+0x3e>
				    update_ORB_single(RGB1_NO , temp_receive[1] , temp_receive[2] , temp_receive[3]);
     e18:	4b2e      	ldr	r3, [pc, #184]	; (ed4 <spi_main_loop+0x134>)
     e1a:	7859      	ldrb	r1, [r3, #1]
     e1c:	b2c9      	uxtb	r1, r1
     e1e:	789a      	ldrb	r2, [r3, #2]
     e20:	b2d2      	uxtb	r2, r2
     e22:	78db      	ldrb	r3, [r3, #3]
     e24:	b2db      	uxtb	r3, r3
     e26:	2031      	movs	r0, #49	; 0x31
     e28:	4c2e      	ldr	r4, [pc, #184]	; (ee4 <spi_main_loop+0x144>)
     e2a:	47a0      	blx	r4
					break;
     e2c:	e7d7      	b.n	dde <spi_main_loop+0x3e>
					update_ORB_single(RGB2_NO , temp_receive[1] , temp_receive[2] , temp_receive[3]);
     e2e:	4b29      	ldr	r3, [pc, #164]	; (ed4 <spi_main_loop+0x134>)
     e30:	7859      	ldrb	r1, [r3, #1]
     e32:	b2c9      	uxtb	r1, r1
     e34:	789a      	ldrb	r2, [r3, #2]
     e36:	b2d2      	uxtb	r2, r2
     e38:	78db      	ldrb	r3, [r3, #3]
     e3a:	b2db      	uxtb	r3, r3
     e3c:	2032      	movs	r0, #50	; 0x32
     e3e:	4c29      	ldr	r4, [pc, #164]	; (ee4 <spi_main_loop+0x144>)
     e40:	47a0      	blx	r4
					break;
     e42:	e7cc      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO1_NO,temp_receive[1]);
     e44:	4b23      	ldr	r3, [pc, #140]	; (ed4 <spi_main_loop+0x134>)
     e46:	7859      	ldrb	r1, [r3, #1]
     e48:	b2c9      	uxtb	r1, r1
     e4a:	2031      	movs	r0, #49	; 0x31
     e4c:	4b26      	ldr	r3, [pc, #152]	; (ee8 <spi_main_loop+0x148>)
     e4e:	4798      	blx	r3
					break;
     e50:	e7c5      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO2_NO,temp_receive[1]);
     e52:	4b20      	ldr	r3, [pc, #128]	; (ed4 <spi_main_loop+0x134>)
     e54:	7859      	ldrb	r1, [r3, #1]
     e56:	b2c9      	uxtb	r1, r1
     e58:	2032      	movs	r0, #50	; 0x32
     e5a:	4b23      	ldr	r3, [pc, #140]	; (ee8 <spi_main_loop+0x148>)
     e5c:	4798      	blx	r3
					break;
     e5e:	e7be      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO3_NO,temp_receive[1]);
     e60:	4b1c      	ldr	r3, [pc, #112]	; (ed4 <spi_main_loop+0x134>)
     e62:	7859      	ldrb	r1, [r3, #1]
     e64:	b2c9      	uxtb	r1, r1
     e66:	2033      	movs	r0, #51	; 0x33
     e68:	4b1f      	ldr	r3, [pc, #124]	; (ee8 <spi_main_loop+0x148>)
     e6a:	4798      	blx	r3
					break;
     e6c:	e7b7      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO4_NO,temp_receive[1]);
     e6e:	4b19      	ldr	r3, [pc, #100]	; (ed4 <spi_main_loop+0x134>)
     e70:	7859      	ldrb	r1, [r3, #1]
     e72:	b2c9      	uxtb	r1, r1
     e74:	2034      	movs	r0, #52	; 0x34
     e76:	4b1c      	ldr	r3, [pc, #112]	; (ee8 <spi_main_loop+0x148>)
     e78:	4798      	blx	r3
					break;
     e7a:	e7b0      	b.n	dde <spi_main_loop+0x3e>
					update_ORB_LED(temp_receive[3],temp_receive[4] ,temp_receive[5] ,temp_receive[6] ,temp_receive[7] ,temp_receive[8],temp_receive[1],temp_receive[2]);
     e7c:	4c15      	ldr	r4, [pc, #84]	; (ed4 <spi_main_loop+0x134>)
     e7e:	78e0      	ldrb	r0, [r4, #3]
     e80:	b2c0      	uxtb	r0, r0
     e82:	7921      	ldrb	r1, [r4, #4]
     e84:	b2c9      	uxtb	r1, r1
     e86:	7962      	ldrb	r2, [r4, #5]
     e88:	b2d2      	uxtb	r2, r2
     e8a:	79a3      	ldrb	r3, [r4, #6]
     e8c:	b2db      	uxtb	r3, r3
     e8e:	4698      	mov	r8, r3
     e90:	79e5      	ldrb	r5, [r4, #7]
     e92:	7a26      	ldrb	r6, [r4, #8]
     e94:	7867      	ldrb	r7, [r4, #1]
     e96:	78a3      	ldrb	r3, [r4, #2]
     e98:	9303      	str	r3, [sp, #12]
     e9a:	9702      	str	r7, [sp, #8]
     e9c:	9601      	str	r6, [sp, #4]
     e9e:	9500      	str	r5, [sp, #0]
     ea0:	4643      	mov	r3, r8
     ea2:	4d12      	ldr	r5, [pc, #72]	; (eec <spi_main_loop+0x14c>)
     ea4:	47a8      	blx	r5
					update_super_servo(temp_receive[9] , temp_receive[10] , temp_receive[11], temp_receive[12]);
     ea6:	7a60      	ldrb	r0, [r4, #9]
     ea8:	b2c0      	uxtb	r0, r0
     eaa:	7aa1      	ldrb	r1, [r4, #10]
     eac:	b2c9      	uxtb	r1, r1
     eae:	7ae2      	ldrb	r2, [r4, #11]
     eb0:	b2d2      	uxtb	r2, r2
     eb2:	7b23      	ldrb	r3, [r4, #12]
     eb4:	b2db      	uxtb	r3, r3
     eb6:	4c0e      	ldr	r4, [pc, #56]	; (ef0 <spi_main_loop+0x150>)
     eb8:	47a0      	blx	r4
					break;
     eba:	e790      	b.n	dde <spi_main_loop+0x3e>
					switch_off_ORB_LED();
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <spi_main_loop+0x154>)
     ebe:	4798      	blx	r3
					switch_off_servos();
     ec0:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <spi_main_loop+0x158>)
     ec2:	4798      	blx	r3
					break;
     ec4:	e78b      	b.n	dde <spi_main_loop+0x3e>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	20000334 	.word	0x20000334
     ecc:	00000d41 	.word	0x00000d41
     ed0:	200000f3 	.word	0x200000f3
     ed4:	20000310 	.word	0x20000310
     ed8:	00000fa1 	.word	0x00000fa1
     edc:	00003a3c 	.word	0x00003a3c
     ee0:	000019a1 	.word	0x000019a1
     ee4:	00001949 	.word	0x00001949
     ee8:	00001e6d 	.word	0x00001e6d
     eec:	000018d5 	.word	0x000018d5
     ef0:	00001d8d 	.word	0x00001d8d
     ef4:	000019f5 	.word	0x000019f5
     ef8:	00001e59 	.word	0x00001e59

00000efc <configure_spi_slave>:
#define DEVICE_ID_HARDWARE      0x01
#define DEVICE_ID_FIRMWARE      0x01


void configure_spi_slave(void)
{
     efc:	b570      	push	{r4, r5, r6, lr}
     efe:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
	config->data_order       = SPI_DATA_ORDER_MSB;
     f00:	2400      	movs	r4, #0
     f02:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     f04:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     f06:	23c0      	movs	r3, #192	; 0xc0
     f08:	039b      	lsls	r3, r3, #14
     f0a:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     f0c:	466b      	mov	r3, sp
     f0e:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     f10:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     f12:	2501      	movs	r5, #1
     f14:	749d      	strb	r5, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     f16:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     f18:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     f1a:	2324      	movs	r3, #36	; 0x24
     f1c:	466a      	mov	r2, sp
     f1e:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     f20:	220c      	movs	r2, #12
     f22:	2100      	movs	r1, #0
     f24:	a806      	add	r0, sp, #24
     f26:	4b14      	ldr	r3, [pc, #80]	; (f78 <configure_spi_slave+0x7c>)
     f28:	4798      	blx	r3
	struct spi_config config_spi_slave;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_slave);
	config_spi_slave.transfer_mode = SPI_TRANSFER_MODE_0;
	config_spi_slave.mode = SPI_MODE_SLAVE;
     f2a:	466b      	mov	r3, sp
     f2c:	701c      	strb	r4, [r3, #0]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     f2e:	2320      	movs	r3, #32
     f30:	466a      	mov	r2, sp
     f32:	54d5      	strb	r5, [r2, r3]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     f34:	9406      	str	r4, [sp, #24]
	//config_spi_slave.data_order =  SPI_DATA_ORDER_LSB;
	config_spi_slave.mux_setting = SPI_SLAVE_MUX_SETTING;
	config_spi_slave.pinmux_pad0 = SPI_SLAVE_PINMUX_PAD0;
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <configure_spi_slave+0x80>)
     f38:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.pinmux_pad1 = SPI_SLAVE_PINMUX_PAD1;
     f3a:	4b11      	ldr	r3, [pc, #68]	; (f80 <configure_spi_slave+0x84>)
     f3c:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad2 = SPI_SLAVE_PINMUX_PAD2;
     f3e:	4b11      	ldr	r3, [pc, #68]	; (f84 <configure_spi_slave+0x88>)
     f40:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad3 = SPI_SLAVE_PINMUX_PAD3;
     f42:	4b11      	ldr	r3, [pc, #68]	; (f88 <configure_spi_slave+0x8c>)
     f44:	930d      	str	r3, [sp, #52]	; 0x34
	spi_init(&spi_slave_instance,  SLAVE_SPI_MODULE, &config_spi_slave);
     f46:	4e11      	ldr	r6, [pc, #68]	; (f8c <configure_spi_slave+0x90>)
     f48:	4911      	ldr	r1, [pc, #68]	; (f90 <configure_spi_slave+0x94>)
     f4a:	0030      	movs	r0, r6
     f4c:	4b11      	ldr	r3, [pc, #68]	; (f94 <configure_spi_slave+0x98>)
     f4e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f50:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     f52:	0020      	movs	r0, r4
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <configure_spi_slave+0x9c>)
     f56:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f58:	231f      	movs	r3, #31
     f5a:	4018      	ands	r0, r3
     f5c:	4085      	lsls	r5, r0
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <configure_spi_slave+0xa0>)
     f60:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f62:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     f64:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     f66:	2b00      	cmp	r3, #0
     f68:	d1fc      	bne.n	f64 <configure_spi_slave+0x68>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     f6a:	6823      	ldr	r3, [r4, #0]
     f6c:	2202      	movs	r2, #2
     f6e:	4313      	orrs	r3, r2
     f70:	6023      	str	r3, [r4, #0]
	spi_enable(&spi_slave_instance);
	
}
     f72:	b00e      	add	sp, #56	; 0x38
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	00003947 	.word	0x00003947
     f7c:	00160002 	.word	0x00160002
     f80:	00170002 	.word	0x00170002
     f84:	00180002 	.word	0x00180002
     f88:	00190002 	.word	0x00190002
     f8c:	20000100 	.word	0x20000100
     f90:	42000c00 	.word	0x42000c00
     f94:	00000939 	.word	0x00000939
     f98:	00002ad9 	.word	0x00002ad9
     f9c:	e000e100 	.word	0xe000e100

00000fa0 <check_buffer>:



void check_buffer()
{
     fa0:	b510      	push	{r4, lr}
	uint8_t i =0;
	if(tail_pointer == head_pointer)
     fa2:	4b1c      	ldr	r3, [pc, #112]	; (1014 <check_buffer+0x74>)
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	4a1c      	ldr	r2, [pc, #112]	; (1018 <check_buffer+0x78>)
     fa8:	7812      	ldrb	r2, [r2, #0]
     faa:	b2db      	uxtb	r3, r3
     fac:	4293      	cmp	r3, r2
     fae:	d018      	beq.n	fe2 <check_buffer+0x42>
		head_pointer = 0;
	}
	else
	{
		//Transfer receive
		if(ring_buffer[tail_pointer] == 0xCA )
     fb0:	4b18      	ldr	r3, [pc, #96]	; (1014 <check_buffer+0x74>)
     fb2:	781b      	ldrb	r3, [r3, #0]
     fb4:	b2db      	uxtb	r3, r3
     fb6:	4a19      	ldr	r2, [pc, #100]	; (101c <check_buffer+0x7c>)
     fb8:	5cd3      	ldrb	r3, [r2, r3]
     fba:	b2db      	uxtb	r3, r3
     fbc:	2200      	movs	r2, #0
     fbe:	2bca      	cmp	r3, #202	; 0xca
     fc0:	d017      	beq.n	ff2 <check_buffer+0x52>
		}
		else
		{
			for(i=0; i<LENGTH_SINGLE;i++)
			{
				temp_receive[i] = ring_buffer[tail_pointer];
     fc2:	4914      	ldr	r1, [pc, #80]	; (1014 <check_buffer+0x74>)
     fc4:	4c15      	ldr	r4, [pc, #84]	; (101c <check_buffer+0x7c>)
     fc6:	4816      	ldr	r0, [pc, #88]	; (1020 <check_buffer+0x80>)
     fc8:	780b      	ldrb	r3, [r1, #0]
     fca:	b2db      	uxtb	r3, r3
     fcc:	5ce3      	ldrb	r3, [r4, r3]
     fce:	b2db      	uxtb	r3, r3
     fd0:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
     fd2:	780b      	ldrb	r3, [r1, #0]
     fd4:	3301      	adds	r3, #1
     fd6:	b2db      	uxtb	r3, r3
     fd8:	700b      	strb	r3, [r1, #0]
     fda:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SINGLE;i++)
     fdc:	2a04      	cmp	r2, #4
     fde:	d1f3      	bne.n	fc8 <check_buffer+0x28>
			}
		}
	}

}
     fe0:	bd10      	pop	{r4, pc}
		transfer_complete_spi_slave = false;
     fe2:	2300      	movs	r3, #0
     fe4:	4a0f      	ldr	r2, [pc, #60]	; (1024 <check_buffer+0x84>)
     fe6:	7013      	strb	r3, [r2, #0]
		tail_pointer = 0;
     fe8:	4a0a      	ldr	r2, [pc, #40]	; (1014 <check_buffer+0x74>)
     fea:	7013      	strb	r3, [r2, #0]
		head_pointer = 0;
     fec:	4a0a      	ldr	r2, [pc, #40]	; (1018 <check_buffer+0x78>)
     fee:	7013      	strb	r3, [r2, #0]
     ff0:	e7f6      	b.n	fe0 <check_buffer+0x40>
				temp_receive[i] = ring_buffer[tail_pointer];
     ff2:	4908      	ldr	r1, [pc, #32]	; (1014 <check_buffer+0x74>)
     ff4:	4c09      	ldr	r4, [pc, #36]	; (101c <check_buffer+0x7c>)
     ff6:	480a      	ldr	r0, [pc, #40]	; (1020 <check_buffer+0x80>)
     ff8:	780b      	ldrb	r3, [r1, #0]
     ffa:	b2db      	uxtb	r3, r3
     ffc:	5ce3      	ldrb	r3, [r4, r3]
     ffe:	b2db      	uxtb	r3, r3
    1000:	5483      	strb	r3, [r0, r2]
				tail_pointer++;
    1002:	780b      	ldrb	r3, [r1, #0]
    1004:	3301      	adds	r3, #1
    1006:	b2db      	uxtb	r3, r3
    1008:	700b      	strb	r3, [r1, #0]
    100a:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
    100c:	2a0d      	cmp	r2, #13
    100e:	d1f3      	bne.n	ff8 <check_buffer+0x58>
    1010:	e7e6      	b.n	fe0 <check_buffer+0x40>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	20000093 	.word	0x20000093
    1018:	20000091 	.word	0x20000091
    101c:	2000013c 	.word	0x2000013c
    1020:	20000310 	.word	0x20000310
    1024:	200000f3 	.word	0x200000f3

00001028 <configure_spi_slave_callbacks>:
}



void configure_spi_slave_callbacks(void)
{
    1028:	b510      	push	{r4, lr}
	spi_register_callback(&spi_slave_instance, spi_slave_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    102a:	4c06      	ldr	r4, [pc, #24]	; (1044 <configure_spi_slave_callbacks+0x1c>)
    102c:	2202      	movs	r2, #2
    102e:	4906      	ldr	r1, [pc, #24]	; (1048 <configure_spi_slave_callbacks+0x20>)
    1030:	0020      	movs	r0, r4
    1032:	4b06      	ldr	r3, [pc, #24]	; (104c <configure_spi_slave_callbacks+0x24>)
    1034:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    1036:	2237      	movs	r2, #55	; 0x37
    1038:	5ca3      	ldrb	r3, [r4, r2]
    103a:	2104      	movs	r1, #4
    103c:	430b      	orrs	r3, r1
    103e:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
    1040:	bd10      	pop	{r4, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	20000100 	.word	0x20000100
    1048:	000010b1 	.word	0x000010b1
    104c:	00000b4d 	.word	0x00000b4d

00001050 <spi_slave_init>:



void spi_slave_init()
{
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	b083      	sub	sp, #12
	volatile enum status_code error_code = 0x10;
    1054:	2210      	movs	r2, #16
    1056:	466b      	mov	r3, sp
    1058:	71da      	strb	r2, [r3, #7]
	static bool init = false;
	const uint8_t firmware_version[4] = {0x00,0x00,DEVICE_ID_HARDWARE,DEVICE_ID_FIRMWARE};
	//Inital values are the firmware version
	configure_spi_slave();
    105a:	4b0e      	ldr	r3, [pc, #56]	; (1094 <spi_slave_init+0x44>)
    105c:	4798      	blx	r3
	configure_spi_slave_callbacks();
    105e:	4b0e      	ldr	r3, [pc, #56]	; (1098 <spi_slave_init+0x48>)
    1060:	4798      	blx	r3
	if(init == false)
    1062:	4b0e      	ldr	r3, [pc, #56]	; (109c <spi_slave_init+0x4c>)
    1064:	781b      	ldrb	r3, [r3, #0]
    1066:	2b00      	cmp	r3, #0
    1068:	d111      	bne.n	108e <spi_slave_init+0x3e>
	{
		init = true;
    106a:	2201      	movs	r2, #1
    106c:	4b0b      	ldr	r3, [pc, #44]	; (109c <spi_slave_init+0x4c>)
    106e:	701a      	strb	r2, [r3, #0]
		do
		{
			error_code = spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
    1070:	4e0b      	ldr	r6, [pc, #44]	; (10a0 <spi_slave_init+0x50>)
    1072:	4d0c      	ldr	r5, [pc, #48]	; (10a4 <spi_slave_init+0x54>)
    1074:	4c0c      	ldr	r4, [pc, #48]	; (10a8 <spi_slave_init+0x58>)
    1076:	2304      	movs	r3, #4
    1078:	0032      	movs	r2, r6
    107a:	0029      	movs	r1, r5
    107c:	0020      	movs	r0, r4
    107e:	4f0b      	ldr	r7, [pc, #44]	; (10ac <spi_slave_init+0x5c>)
    1080:	47b8      	blx	r7
    1082:	466b      	mov	r3, sp
    1084:	71d8      	strb	r0, [r3, #7]
    1086:	3307      	adds	r3, #7
		} while (error_code != STATUS_OK );
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	2b00      	cmp	r3, #0
    108c:	d1f3      	bne.n	1076 <spi_slave_init+0x26>
		
	}
	
}
    108e:	b003      	add	sp, #12
    1090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	00000efd 	.word	0x00000efd
    1098:	00001029 	.word	0x00001029
    109c:	20000092 	.word	0x20000092
    10a0:	200002e0 	.word	0x200002e0
    10a4:	200002f4 	.word	0x200002f4
    10a8:	20000100 	.word	0x20000100
    10ac:	00000b65 	.word	0x00000b65

000010b0 <spi_slave_callback>:
{
    10b0:	b570      	push	{r4, r5, r6, lr}
	transfer_complete_spi_slave = true;
    10b2:	2201      	movs	r2, #1
    10b4:	4b23      	ldr	r3, [pc, #140]	; (1144 <spi_slave_callback+0x94>)
    10b6:	701a      	strb	r2, [r3, #0]
	serial_timeout_count = 0;
    10b8:	2200      	movs	r2, #0
    10ba:	4b23      	ldr	r3, [pc, #140]	; (1148 <spi_slave_callback+0x98>)
    10bc:	701a      	strb	r2, [r3, #0]
	if(spi_reset_1 == true )
    10be:	4b23      	ldr	r3, [pc, #140]	; (114c <spi_slave_callback+0x9c>)
    10c0:	781b      	ldrb	r3, [r3, #0]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d11e      	bne.n	1104 <spi_slave_callback+0x54>
		if(received_value[0] == 0xCA)
    10c6:	4b22      	ldr	r3, [pc, #136]	; (1150 <spi_slave_callback+0xa0>)
    10c8:	781b      	ldrb	r3, [r3, #0]
    10ca:	b2db      	uxtb	r3, r3
    10cc:	2200      	movs	r2, #0
    10ce:	2bca      	cmp	r3, #202	; 0xca
    10d0:	d027      	beq.n	1122 <spi_slave_callback+0x72>
				ring_buffer[head_pointer] = received_value[i];
    10d2:	4820      	ldr	r0, [pc, #128]	; (1154 <spi_slave_callback+0xa4>)
    10d4:	4d1e      	ldr	r5, [pc, #120]	; (1150 <spi_slave_callback+0xa0>)
    10d6:	4c20      	ldr	r4, [pc, #128]	; (1158 <spi_slave_callback+0xa8>)
    10d8:	7803      	ldrb	r3, [r0, #0]
    10da:	b2db      	uxtb	r3, r3
    10dc:	5ca9      	ldrb	r1, [r5, r2]
    10de:	b2c9      	uxtb	r1, r1
    10e0:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
    10e2:	7803      	ldrb	r3, [r0, #0]
    10e4:	3301      	adds	r3, #1
    10e6:	b2db      	uxtb	r3, r3
    10e8:	7003      	strb	r3, [r0, #0]
    10ea:	3201      	adds	r2, #1
			for(i=0 ; i<LENGTH_SINGLE;i++)
    10ec:	2a04      	cmp	r2, #4
    10ee:	d1f3      	bne.n	10d8 <spi_slave_callback+0x28>
		flash_status_LED = false;
    10f0:	2200      	movs	r2, #0
    10f2:	4b1a      	ldr	r3, [pc, #104]	; (115c <spi_slave_callback+0xac>)
    10f4:	701a      	strb	r2, [r3, #0]
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
    10f6:	2304      	movs	r3, #4
    10f8:	4a15      	ldr	r2, [pc, #84]	; (1150 <spi_slave_callback+0xa0>)
    10fa:	4919      	ldr	r1, [pc, #100]	; (1160 <spi_slave_callback+0xb0>)
    10fc:	4819      	ldr	r0, [pc, #100]	; (1164 <spi_slave_callback+0xb4>)
    10fe:	4c1a      	ldr	r4, [pc, #104]	; (1168 <spi_slave_callback+0xb8>)
    1100:	47a0      	blx	r4
}
    1102:	bd70      	pop	{r4, r5, r6, pc}
		spi_reset_1 = false;
    1104:	4b11      	ldr	r3, [pc, #68]	; (114c <spi_slave_callback+0x9c>)
    1106:	701a      	strb	r2, [r3, #0]
		spi_reset(&spi_slave_instance);
    1108:	4c16      	ldr	r4, [pc, #88]	; (1164 <spi_slave_callback+0xb4>)
    110a:	0020      	movs	r0, r4
    110c:	4b17      	ldr	r3, [pc, #92]	; (116c <spi_slave_callback+0xbc>)
    110e:	4798      	blx	r3
		spi_slave_init();
    1110:	4b17      	ldr	r3, [pc, #92]	; (1170 <spi_slave_callback+0xc0>)
    1112:	4798      	blx	r3
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
    1114:	2304      	movs	r3, #4
    1116:	4a0e      	ldr	r2, [pc, #56]	; (1150 <spi_slave_callback+0xa0>)
    1118:	4911      	ldr	r1, [pc, #68]	; (1160 <spi_slave_callback+0xb0>)
    111a:	0020      	movs	r0, r4
    111c:	4c12      	ldr	r4, [pc, #72]	; (1168 <spi_slave_callback+0xb8>)
    111e:	47a0      	blx	r4
    1120:	e7ef      	b.n	1102 <spi_slave_callback+0x52>
				ring_buffer[head_pointer] = received_value[i];
    1122:	480c      	ldr	r0, [pc, #48]	; (1154 <spi_slave_callback+0xa4>)
    1124:	4d0a      	ldr	r5, [pc, #40]	; (1150 <spi_slave_callback+0xa0>)
    1126:	4c0c      	ldr	r4, [pc, #48]	; (1158 <spi_slave_callback+0xa8>)
    1128:	7803      	ldrb	r3, [r0, #0]
    112a:	b2db      	uxtb	r3, r3
    112c:	5ca9      	ldrb	r1, [r5, r2]
    112e:	b2c9      	uxtb	r1, r1
    1130:	54e1      	strb	r1, [r4, r3]
				head_pointer++;
    1132:	7803      	ldrb	r3, [r0, #0]
    1134:	3301      	adds	r3, #1
    1136:	b2db      	uxtb	r3, r3
    1138:	7003      	strb	r3, [r0, #0]
    113a:	3201      	adds	r2, #1
			for(i=0; i<LENGTH_SET_ALL;i++)
    113c:	2a0d      	cmp	r2, #13
    113e:	d1f3      	bne.n	1128 <spi_slave_callback+0x78>
    1140:	e7d6      	b.n	10f0 <spi_slave_callback+0x40>
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	200000f3 	.word	0x200000f3
    1148:	200000f0 	.word	0x200000f0
    114c:	200000f1 	.word	0x200000f1
    1150:	200002e0 	.word	0x200002e0
    1154:	20000091 	.word	0x20000091
    1158:	2000013c 	.word	0x2000013c
    115c:	2000000d 	.word	0x2000000d
    1160:	200002f4 	.word	0x200002f4
    1164:	20000100 	.word	0x20000100
    1168:	00000b65 	.word	0x00000b65
    116c:	000008ed 	.word	0x000008ed
    1170:	00001051 	.word	0x00001051

00001174 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1174:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1176:	2000      	movs	r0, #0
    1178:	4b08      	ldr	r3, [pc, #32]	; (119c <delay_init+0x28>)
    117a:	4798      	blx	r3
    117c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    117e:	4c08      	ldr	r4, [pc, #32]	; (11a0 <delay_init+0x2c>)
    1180:	21fa      	movs	r1, #250	; 0xfa
    1182:	0089      	lsls	r1, r1, #2
    1184:	47a0      	blx	r4
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <delay_init+0x30>)
    1188:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    118a:	4907      	ldr	r1, [pc, #28]	; (11a8 <delay_init+0x34>)
    118c:	0028      	movs	r0, r5
    118e:	47a0      	blx	r4
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <delay_init+0x38>)
    1192:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1194:	2205      	movs	r2, #5
    1196:	4b06      	ldr	r3, [pc, #24]	; (11b0 <delay_init+0x3c>)
    1198:	601a      	str	r2, [r3, #0]
}
    119a:	bd70      	pop	{r4, r5, r6, pc}
    119c:	000031ed 	.word	0x000031ed
    11a0:	000035ed 	.word	0x000035ed
    11a4:	20000000 	.word	0x20000000
    11a8:	000f4240 	.word	0x000f4240
    11ac:	20000004 	.word	0x20000004
    11b0:	e000e010 	.word	0xe000e010

000011b4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    11b4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    11b6:	2200      	movs	r2, #0
    11b8:	2300      	movs	r3, #0
    11ba:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    11bc:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    11be:	2100      	movs	r1, #0
    11c0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    11c2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    11c4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    11c6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    11c8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    11ca:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    11cc:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    11ce:	24c0      	movs	r4, #192	; 0xc0
    11d0:	0164      	lsls	r4, r4, #5
    11d2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    11d4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    11d6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    11d8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    11da:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    11dc:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    11de:	242a      	movs	r4, #42	; 0x2a
    11e0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    11e2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    11e4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    11e6:	3c06      	subs	r4, #6
    11e8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    11ea:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    11ec:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    11ee:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    11f0:	232b      	movs	r3, #43	; 0x2b
    11f2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    11f4:	3301      	adds	r3, #1
    11f6:	54c1      	strb	r1, [r0, r3]
}
    11f8:	bd10      	pop	{r4, pc}
	...

000011fc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    11fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fe:	46d6      	mov	lr, sl
    1200:	464f      	mov	r7, r9
    1202:	4646      	mov	r6, r8
    1204:	b5c0      	push	{r6, r7, lr}
    1206:	b096      	sub	sp, #88	; 0x58
    1208:	0007      	movs	r7, r0
    120a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    120c:	6001      	str	r1, [r0, #0]
    120e:	4ac6      	ldr	r2, [pc, #792]	; (1528 <adc_init+0x32c>)
    1210:	6a10      	ldr	r0, [r2, #32]
    1212:	2380      	movs	r3, #128	; 0x80
    1214:	005b      	lsls	r3, r3, #1
    1216:	4303      	orrs	r3, r0
    1218:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    121a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    121c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    121e:	07db      	lsls	r3, r3, #31
    1220:	d505      	bpl.n	122e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1222:	b016      	add	sp, #88	; 0x58
    1224:	bc1c      	pop	{r2, r3, r4}
    1226:	4690      	mov	r8, r2
    1228:	4699      	mov	r9, r3
    122a:	46a2      	mov	sl, r4
    122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    122e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1230:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1232:	079b      	lsls	r3, r3, #30
    1234:	d4f5      	bmi.n	1222 <adc_init+0x26>
	module_inst->reference = config->reference;
    1236:	7873      	ldrb	r3, [r6, #1]
    1238:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    123a:	2b00      	cmp	r3, #0
    123c:	d104      	bne.n	1248 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    123e:	4abb      	ldr	r2, [pc, #748]	; (152c <adc_init+0x330>)
    1240:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1242:	2104      	movs	r1, #4
    1244:	430b      	orrs	r3, r1
    1246:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1248:	2300      	movs	r3, #0
    124a:	60bb      	str	r3, [r7, #8]
    124c:	60fb      	str	r3, [r7, #12]
    124e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1250:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1252:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1254:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1256:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1258:	4bb5      	ldr	r3, [pc, #724]	; (1530 <adc_init+0x334>)
    125a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    125c:	232a      	movs	r3, #42	; 0x2a
    125e:	5cf3      	ldrb	r3, [r6, r3]
    1260:	2b00      	cmp	r3, #0
    1262:	d105      	bne.n	1270 <adc_init+0x74>
    1264:	7d33      	ldrb	r3, [r6, #20]
    1266:	2b00      	cmp	r3, #0
    1268:	d102      	bne.n	1270 <adc_init+0x74>
		module_inst->software_trigger = true;
    126a:	3301      	adds	r3, #1
    126c:	777b      	strb	r3, [r7, #29]
    126e:	e001      	b.n	1274 <adc_init+0x78>
		module_inst->software_trigger = false;
    1270:	2300      	movs	r3, #0
    1272:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1274:	683b      	ldr	r3, [r7, #0]
    1276:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1278:	7833      	ldrb	r3, [r6, #0]
    127a:	466a      	mov	r2, sp
    127c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    127e:	4669      	mov	r1, sp
    1280:	2013      	movs	r0, #19
    1282:	4bac      	ldr	r3, [pc, #688]	; (1534 <adc_init+0x338>)
    1284:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1286:	2013      	movs	r0, #19
    1288:	4bab      	ldr	r3, [pc, #684]	; (1538 <adc_init+0x33c>)
    128a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    128c:	232c      	movs	r3, #44	; 0x2c
    128e:	5cf2      	ldrb	r2, [r6, r3]
    1290:	2a00      	cmp	r2, #0
    1292:	d054      	beq.n	133e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1294:	3b01      	subs	r3, #1
    1296:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1298:	7b33      	ldrb	r3, [r6, #12]
    129a:	18eb      	adds	r3, r5, r3
    129c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    129e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    12a0:	b2c9      	uxtb	r1, r1
    12a2:	428b      	cmp	r3, r1
    12a4:	d221      	bcs.n	12ea <adc_init+0xee>
    12a6:	1952      	adds	r2, r2, r5
    12a8:	b2d3      	uxtb	r3, r2
    12aa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    12ac:	4ba3      	ldr	r3, [pc, #652]	; (153c <adc_init+0x340>)
    12ae:	469a      	mov	sl, r3
    12b0:	e003      	b.n	12ba <adc_init+0xbe>
			offset++;
    12b2:	3501      	adds	r5, #1
    12b4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    12b6:	454d      	cmp	r5, r9
    12b8:	d017      	beq.n	12ea <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    12ba:	240f      	movs	r4, #15
    12bc:	402c      	ands	r4, r5
    12be:	7b33      	ldrb	r3, [r6, #12]
    12c0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    12c2:	2250      	movs	r2, #80	; 0x50
    12c4:	499e      	ldr	r1, [pc, #632]	; (1540 <adc_init+0x344>)
    12c6:	a802      	add	r0, sp, #8
    12c8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    12ca:	2c09      	cmp	r4, #9
    12cc:	d8f1      	bhi.n	12b2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    12ce:	00a4      	lsls	r4, r4, #2
    12d0:	ab02      	add	r3, sp, #8
    12d2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12d4:	a901      	add	r1, sp, #4
    12d6:	2300      	movs	r3, #0
    12d8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    12da:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    12dc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    12de:	3301      	adds	r3, #1
    12e0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    12e2:	b2c0      	uxtb	r0, r0
    12e4:	4b97      	ldr	r3, [pc, #604]	; (1544 <adc_init+0x348>)
    12e6:	4798      	blx	r3
    12e8:	e7e3      	b.n	12b2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    12ea:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    12ec:	2250      	movs	r2, #80	; 0x50
    12ee:	4994      	ldr	r1, [pc, #592]	; (1540 <adc_init+0x344>)
    12f0:	a802      	add	r0, sp, #8
    12f2:	4b92      	ldr	r3, [pc, #584]	; (153c <adc_init+0x340>)
    12f4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    12f6:	2c09      	cmp	r4, #9
    12f8:	d913      	bls.n	1322 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    12fa:	7d73      	ldrb	r3, [r6, #21]
    12fc:	009b      	lsls	r3, r3, #2
    12fe:	b2db      	uxtb	r3, r3
    1300:	4642      	mov	r2, r8
    1302:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1304:	7db3      	ldrb	r3, [r6, #22]
    1306:	01db      	lsls	r3, r3, #7
    1308:	7872      	ldrb	r2, [r6, #1]
    130a:	4313      	orrs	r3, r2
    130c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    130e:	4642      	mov	r2, r8
    1310:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1312:	7933      	ldrb	r3, [r6, #4]
    1314:	2b34      	cmp	r3, #52	; 0x34
    1316:	d900      	bls.n	131a <adc_init+0x11e>
    1318:	e17b      	b.n	1612 <adc_init+0x416>
    131a:	009b      	lsls	r3, r3, #2
    131c:	4a8a      	ldr	r2, [pc, #552]	; (1548 <adc_init+0x34c>)
    131e:	58d3      	ldr	r3, [r2, r3]
    1320:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1322:	00a4      	lsls	r4, r4, #2
    1324:	ab02      	add	r3, sp, #8
    1326:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1328:	a901      	add	r1, sp, #4
    132a:	2300      	movs	r3, #0
    132c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    132e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1330:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1332:	3301      	adds	r3, #1
    1334:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1336:	b2c0      	uxtb	r0, r0
    1338:	4b82      	ldr	r3, [pc, #520]	; (1544 <adc_init+0x348>)
    133a:	4798      	blx	r3
    133c:	e7dd      	b.n	12fa <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    133e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1340:	2250      	movs	r2, #80	; 0x50
    1342:	497f      	ldr	r1, [pc, #508]	; (1540 <adc_init+0x344>)
    1344:	a802      	add	r0, sp, #8
    1346:	4b7d      	ldr	r3, [pc, #500]	; (153c <adc_init+0x340>)
    1348:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    134a:	2c09      	cmp	r4, #9
    134c:	d915      	bls.n	137a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    134e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1350:	2250      	movs	r2, #80	; 0x50
    1352:	497b      	ldr	r1, [pc, #492]	; (1540 <adc_init+0x344>)
    1354:	a802      	add	r0, sp, #8
    1356:	4b79      	ldr	r3, [pc, #484]	; (153c <adc_init+0x340>)
    1358:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    135a:	2c09      	cmp	r4, #9
    135c:	d8cd      	bhi.n	12fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    135e:	00a4      	lsls	r4, r4, #2
    1360:	ab02      	add	r3, sp, #8
    1362:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1364:	a901      	add	r1, sp, #4
    1366:	2300      	movs	r3, #0
    1368:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    136a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    136c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    136e:	3301      	adds	r3, #1
    1370:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1372:	b2c0      	uxtb	r0, r0
    1374:	4b73      	ldr	r3, [pc, #460]	; (1544 <adc_init+0x348>)
    1376:	4798      	blx	r3
    1378:	e7bf      	b.n	12fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    137a:	00a4      	lsls	r4, r4, #2
    137c:	ab02      	add	r3, sp, #8
    137e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1380:	a901      	add	r1, sp, #4
    1382:	2300      	movs	r3, #0
    1384:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1386:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1388:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    138a:	3301      	adds	r3, #1
    138c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    138e:	b2c0      	uxtb	r0, r0
    1390:	4b6c      	ldr	r3, [pc, #432]	; (1544 <adc_init+0x348>)
    1392:	4798      	blx	r3
    1394:	e7db      	b.n	134e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1396:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1398:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    139a:	2102      	movs	r1, #2
    139c:	e01a      	b.n	13d4 <adc_init+0x1d8>
		adjres = config->divide_result;
    139e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    13a0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    13a2:	2410      	movs	r4, #16
    13a4:	e016      	b.n	13d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    13a6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    13a8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    13aa:	2101      	movs	r1, #1
    13ac:	e012      	b.n	13d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    13ae:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    13b0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    13b2:	2100      	movs	r1, #0
    13b4:	e00e      	b.n	13d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13b6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    13b8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    13ba:	2100      	movs	r1, #0
    13bc:	e00a      	b.n	13d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13be:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    13c0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    13c2:	2100      	movs	r1, #0
    13c4:	e006      	b.n	13d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13c6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    13c8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    13ca:	2100      	movs	r1, #0
    13cc:	e002      	b.n	13d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    13ce:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    13d0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    13d2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    13d4:	0109      	lsls	r1, r1, #4
    13d6:	2270      	movs	r2, #112	; 0x70
    13d8:	400a      	ands	r2, r1
    13da:	4313      	orrs	r3, r2
    13dc:	4642      	mov	r2, r8
    13de:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    13e0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    13e2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    13e4:	2b3f      	cmp	r3, #63	; 0x3f
    13e6:	d900      	bls.n	13ea <adc_init+0x1ee>
    13e8:	e71b      	b.n	1222 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    13ea:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    13ec:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    13ee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    13f0:	b25b      	sxtb	r3, r3
    13f2:	2b00      	cmp	r3, #0
    13f4:	dbfb      	blt.n	13ee <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    13f6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13f8:	8872      	ldrh	r2, [r6, #2]
    13fa:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    13fc:	2224      	movs	r2, #36	; 0x24
    13fe:	5cb2      	ldrb	r2, [r6, r2]
    1400:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1402:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1404:	7d32      	ldrb	r2, [r6, #20]
    1406:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1408:	4313      	orrs	r3, r2
    140a:	7cb2      	ldrb	r2, [r6, #18]
    140c:	0052      	lsls	r2, r2, #1
    140e:	4313      	orrs	r3, r2
    1410:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1412:	4642      	mov	r2, r8
    1414:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1416:	7e33      	ldrb	r3, [r6, #24]
    1418:	2b00      	cmp	r3, #0
    141a:	d020      	beq.n	145e <adc_init+0x262>
		switch (resolution) {
    141c:	2c10      	cmp	r4, #16
    141e:	d100      	bne.n	1422 <adc_init+0x226>
    1420:	e0d9      	b.n	15d6 <adc_init+0x3da>
    1422:	d800      	bhi.n	1426 <adc_init+0x22a>
    1424:	e098      	b.n	1558 <adc_init+0x35c>
    1426:	2c20      	cmp	r4, #32
    1428:	d100      	bne.n	142c <adc_init+0x230>
    142a:	e0b6      	b.n	159a <adc_init+0x39e>
    142c:	2c30      	cmp	r4, #48	; 0x30
    142e:	d116      	bne.n	145e <adc_init+0x262>
			if (config->differential_mode &&
    1430:	7cf2      	ldrb	r2, [r6, #19]
    1432:	2a00      	cmp	r2, #0
    1434:	d00a      	beq.n	144c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1436:	69f2      	ldr	r2, [r6, #28]
    1438:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    143a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    143c:	2aff      	cmp	r2, #255	; 0xff
    143e:	d900      	bls.n	1442 <adc_init+0x246>
    1440:	e6ef      	b.n	1222 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1442:	6a32      	ldr	r2, [r6, #32]
    1444:	3280      	adds	r2, #128	; 0x80
    1446:	2aff      	cmp	r2, #255	; 0xff
    1448:	d900      	bls.n	144c <adc_init+0x250>
    144a:	e6ea      	b.n	1222 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    144c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    144e:	69f2      	ldr	r2, [r6, #28]
    1450:	2aff      	cmp	r2, #255	; 0xff
    1452:	dd00      	ble.n	1456 <adc_init+0x25a>
    1454:	e6e5      	b.n	1222 <adc_init+0x26>
    1456:	6a32      	ldr	r2, [r6, #32]
    1458:	2aff      	cmp	r2, #255	; 0xff
    145a:	dd00      	ble.n	145e <adc_init+0x262>
    145c:	e6e1      	b.n	1222 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    145e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1460:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1462:	b252      	sxtb	r2, r2
    1464:	2a00      	cmp	r2, #0
    1466:	dbfb      	blt.n	1460 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1468:	4642      	mov	r2, r8
    146a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    146c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    146e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1470:	b25b      	sxtb	r3, r3
    1472:	2b00      	cmp	r3, #0
    1474:	dbfb      	blt.n	146e <adc_init+0x272>
	adc_module->WINLT.reg =
    1476:	8bb3      	ldrh	r3, [r6, #28]
    1478:	4642      	mov	r2, r8
    147a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    147c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    147e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1480:	b25b      	sxtb	r3, r3
    1482:	2b00      	cmp	r3, #0
    1484:	dbfb      	blt.n	147e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1486:	8c33      	ldrh	r3, [r6, #32]
    1488:	4642      	mov	r2, r8
    148a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    148c:	232c      	movs	r3, #44	; 0x2c
    148e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1490:	2b00      	cmp	r3, #0
    1492:	d005      	beq.n	14a0 <adc_init+0x2a4>
		inputs_to_scan--;
    1494:	3b01      	subs	r3, #1
    1496:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1498:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    149a:	2b0f      	cmp	r3, #15
    149c:	d900      	bls.n	14a0 <adc_init+0x2a4>
    149e:	e6c0      	b.n	1222 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    14a0:	222b      	movs	r2, #43	; 0x2b
    14a2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    14a4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    14a6:	290f      	cmp	r1, #15
    14a8:	d900      	bls.n	14ac <adc_init+0x2b0>
    14aa:	e6ba      	b.n	1222 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    14ac:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    14ae:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    14b0:	b252      	sxtb	r2, r2
    14b2:	2a00      	cmp	r2, #0
    14b4:	dbfb      	blt.n	14ae <adc_init+0x2b2>
			config->negative_input |
    14b6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    14b8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    14ba:	4302      	orrs	r2, r0
    14bc:	68b0      	ldr	r0, [r6, #8]
    14be:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    14c0:	0509      	lsls	r1, r1, #20
			config->negative_input |
    14c2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    14c4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    14c6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    14c8:	4642      	mov	r2, r8
    14ca:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    14cc:	232a      	movs	r3, #42	; 0x2a
    14ce:	5cf3      	ldrb	r3, [r6, r3]
    14d0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    14d2:	230f      	movs	r3, #15
    14d4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    14d6:	3315      	adds	r3, #21
    14d8:	5cf3      	ldrb	r3, [r6, r3]
    14da:	2b00      	cmp	r3, #0
    14dc:	d012      	beq.n	1504 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14de:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    14e0:	4a1a      	ldr	r2, [pc, #104]	; (154c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    14e2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14e4:	4293      	cmp	r3, r2
    14e6:	d900      	bls.n	14ea <adc_init+0x2ee>
    14e8:	e69b      	b.n	1222 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    14ea:	4642      	mov	r2, r8
    14ec:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    14ee:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	011b      	lsls	r3, r3, #4
    14f4:	18d3      	adds	r3, r2, r3
    14f6:	4915      	ldr	r1, [pc, #84]	; (154c <adc_init+0x350>)
    14f8:	b29b      	uxth	r3, r3
    14fa:	428b      	cmp	r3, r1
    14fc:	d900      	bls.n	1500 <adc_init+0x304>
    14fe:	e690      	b.n	1222 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1500:	4643      	mov	r3, r8
    1502:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1504:	4b12      	ldr	r3, [pc, #72]	; (1550 <adc_init+0x354>)
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	015b      	lsls	r3, r3, #5
    150a:	22e0      	movs	r2, #224	; 0xe0
    150c:	00d2      	lsls	r2, r2, #3
    150e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1510:	4a10      	ldr	r2, [pc, #64]	; (1554 <adc_init+0x358>)
    1512:	6851      	ldr	r1, [r2, #4]
    1514:	0149      	lsls	r1, r1, #5
    1516:	6812      	ldr	r2, [r2, #0]
    1518:	0ed2      	lsrs	r2, r2, #27
    151a:	430a      	orrs	r2, r1
    151c:	b2d2      	uxtb	r2, r2
			) |
    151e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1520:	4642      	mov	r2, r8
    1522:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1524:	2000      	movs	r0, #0
    1526:	e67c      	b.n	1222 <adc_init+0x26>
    1528:	40000400 	.word	0x40000400
    152c:	40000800 	.word	0x40000800
    1530:	20000204 	.word	0x20000204
    1534:	00003305 	.word	0x00003305
    1538:	00003279 	.word	0x00003279
    153c:	00003935 	.word	0x00003935
    1540:	00003b40 	.word	0x00003b40
    1544:	000033fd 	.word	0x000033fd
    1548:	00003a6c 	.word	0x00003a6c
    154c:	00000fff 	.word	0x00000fff
    1550:	00806024 	.word	0x00806024
    1554:	00806020 	.word	0x00806020
		switch (resolution) {
    1558:	2c00      	cmp	r4, #0
    155a:	d000      	beq.n	155e <adc_init+0x362>
    155c:	e77f      	b.n	145e <adc_init+0x262>
			if (config->differential_mode &&
    155e:	7cf2      	ldrb	r2, [r6, #19]
    1560:	2a00      	cmp	r2, #0
    1562:	d00f      	beq.n	1584 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1564:	69f2      	ldr	r2, [r6, #28]
    1566:	2180      	movs	r1, #128	; 0x80
    1568:	0109      	lsls	r1, r1, #4
    156a:	468c      	mov	ip, r1
    156c:	4462      	add	r2, ip
			if (config->differential_mode &&
    156e:	492a      	ldr	r1, [pc, #168]	; (1618 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1570:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1572:	428a      	cmp	r2, r1
    1574:	d900      	bls.n	1578 <adc_init+0x37c>
    1576:	e654      	b.n	1222 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1578:	6a32      	ldr	r2, [r6, #32]
    157a:	4462      	add	r2, ip
    157c:	4926      	ldr	r1, [pc, #152]	; (1618 <adc_init+0x41c>)
    157e:	428a      	cmp	r2, r1
    1580:	d900      	bls.n	1584 <adc_init+0x388>
    1582:	e64e      	b.n	1222 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1584:	4a24      	ldr	r2, [pc, #144]	; (1618 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1586:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1588:	69f1      	ldr	r1, [r6, #28]
    158a:	4291      	cmp	r1, r2
    158c:	dd00      	ble.n	1590 <adc_init+0x394>
    158e:	e648      	b.n	1222 <adc_init+0x26>
    1590:	6a31      	ldr	r1, [r6, #32]
    1592:	4291      	cmp	r1, r2
    1594:	dd00      	ble.n	1598 <adc_init+0x39c>
    1596:	e644      	b.n	1222 <adc_init+0x26>
    1598:	e761      	b.n	145e <adc_init+0x262>
			if (config->differential_mode &&
    159a:	7cf2      	ldrb	r2, [r6, #19]
    159c:	2a00      	cmp	r2, #0
    159e:	d00f      	beq.n	15c0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    15a0:	69f2      	ldr	r2, [r6, #28]
    15a2:	2180      	movs	r1, #128	; 0x80
    15a4:	0089      	lsls	r1, r1, #2
    15a6:	468c      	mov	ip, r1
    15a8:	4462      	add	r2, ip
			if (config->differential_mode &&
    15aa:	491c      	ldr	r1, [pc, #112]	; (161c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    15ac:	2017      	movs	r0, #23
			if (config->differential_mode &&
    15ae:	428a      	cmp	r2, r1
    15b0:	d900      	bls.n	15b4 <adc_init+0x3b8>
    15b2:	e636      	b.n	1222 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    15b4:	6a32      	ldr	r2, [r6, #32]
    15b6:	4462      	add	r2, ip
    15b8:	4918      	ldr	r1, [pc, #96]	; (161c <adc_init+0x420>)
    15ba:	428a      	cmp	r2, r1
    15bc:	d900      	bls.n	15c0 <adc_init+0x3c4>
    15be:	e630      	b.n	1222 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    15c0:	4a16      	ldr	r2, [pc, #88]	; (161c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    15c2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    15c4:	69f1      	ldr	r1, [r6, #28]
    15c6:	4291      	cmp	r1, r2
    15c8:	dd00      	ble.n	15cc <adc_init+0x3d0>
    15ca:	e62a      	b.n	1222 <adc_init+0x26>
    15cc:	6a31      	ldr	r1, [r6, #32]
    15ce:	4291      	cmp	r1, r2
    15d0:	dd00      	ble.n	15d4 <adc_init+0x3d8>
    15d2:	e626      	b.n	1222 <adc_init+0x26>
    15d4:	e743      	b.n	145e <adc_init+0x262>
			if (config->differential_mode &&
    15d6:	7cf2      	ldrb	r2, [r6, #19]
    15d8:	2a00      	cmp	r2, #0
    15da:	d00f      	beq.n	15fc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    15dc:	69f2      	ldr	r2, [r6, #28]
    15de:	2180      	movs	r1, #128	; 0x80
    15e0:	0209      	lsls	r1, r1, #8
    15e2:	468c      	mov	ip, r1
    15e4:	4462      	add	r2, ip
			if (config->differential_mode &&
    15e6:	490e      	ldr	r1, [pc, #56]	; (1620 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15e8:	2017      	movs	r0, #23
			if (config->differential_mode &&
    15ea:	428a      	cmp	r2, r1
    15ec:	d900      	bls.n	15f0 <adc_init+0x3f4>
    15ee:	e618      	b.n	1222 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    15f0:	6a32      	ldr	r2, [r6, #32]
    15f2:	4462      	add	r2, ip
    15f4:	490a      	ldr	r1, [pc, #40]	; (1620 <adc_init+0x424>)
    15f6:	428a      	cmp	r2, r1
    15f8:	d900      	bls.n	15fc <adc_init+0x400>
    15fa:	e612      	b.n	1222 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    15fc:	4a08      	ldr	r2, [pc, #32]	; (1620 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15fe:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1600:	69f1      	ldr	r1, [r6, #28]
    1602:	4291      	cmp	r1, r2
    1604:	dd00      	ble.n	1608 <adc_init+0x40c>
    1606:	e60c      	b.n	1222 <adc_init+0x26>
    1608:	6a31      	ldr	r1, [r6, #32]
    160a:	4291      	cmp	r1, r2
    160c:	dd00      	ble.n	1610 <adc_init+0x414>
    160e:	e608      	b.n	1222 <adc_init+0x26>
    1610:	e725      	b.n	145e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1612:	2017      	movs	r0, #23
    1614:	e605      	b.n	1222 <adc_init+0x26>
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00000fff 	.word	0x00000fff
    161c:	000003ff 	.word	0x000003ff
    1620:	0000ffff 	.word	0x0000ffff

00001624 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1624:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1626:	4b2e      	ldr	r3, [pc, #184]	; (16e0 <ADC_Handler+0xbc>)
    1628:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    162a:	6823      	ldr	r3, [r4, #0]
    162c:	7e1d      	ldrb	r5, [r3, #24]
    162e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    1630:	07ea      	lsls	r2, r5, #31
    1632:	d505      	bpl.n	1640 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1634:	7ee2      	ldrb	r2, [r4, #27]
    1636:	07d2      	lsls	r2, r2, #31
    1638:	d502      	bpl.n	1640 <ADC_Handler+0x1c>
    163a:	7ea2      	ldrb	r2, [r4, #26]
    163c:	07d2      	lsls	r2, r2, #31
    163e:	d416      	bmi.n	166e <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    1640:	076b      	lsls	r3, r5, #29
    1642:	d508      	bpl.n	1656 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1644:	2304      	movs	r3, #4
    1646:	6822      	ldr	r2, [r4, #0]
    1648:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    164a:	7ee3      	ldrb	r3, [r4, #27]
    164c:	079b      	lsls	r3, r3, #30
    164e:	d502      	bpl.n	1656 <ADC_Handler+0x32>
    1650:	7ea3      	ldrb	r3, [r4, #26]
    1652:	079b      	lsls	r3, r3, #30
    1654:	d43c      	bmi.n	16d0 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1656:	07ab      	lsls	r3, r5, #30
    1658:	d508      	bpl.n	166c <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    165a:	2302      	movs	r3, #2
    165c:	6822      	ldr	r2, [r4, #0]
    165e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1660:	7ee3      	ldrb	r3, [r4, #27]
    1662:	075b      	lsls	r3, r3, #29
    1664:	d502      	bpl.n	166c <ADC_Handler+0x48>
    1666:	7ea3      	ldrb	r3, [r4, #26]
    1668:	075b      	lsls	r3, r3, #29
    166a:	d435      	bmi.n	16d8 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    166c:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    166e:	2201      	movs	r2, #1
    1670:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1672:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1674:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1676:	b25b      	sxtb	r3, r3
    1678:	2b00      	cmp	r3, #0
    167a:	dbfb      	blt.n	1674 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    167c:	6961      	ldr	r1, [r4, #20]
    167e:	1c8b      	adds	r3, r1, #2
    1680:	6163      	str	r3, [r4, #20]
    1682:	8b53      	ldrh	r3, [r2, #26]
    1684:	b29b      	uxth	r3, r3
    1686:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1688:	8b23      	ldrh	r3, [r4, #24]
    168a:	3b01      	subs	r3, #1
    168c:	b29b      	uxth	r3, r3
    168e:	8323      	strh	r3, [r4, #24]
    1690:	2b00      	cmp	r3, #0
    1692:	d011      	beq.n	16b8 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1694:	7f63      	ldrb	r3, [r4, #29]
    1696:	2b00      	cmp	r3, #0
    1698:	d0d2      	beq.n	1640 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    169a:	6822      	ldr	r2, [r4, #0]
    169c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    169e:	b25b      	sxtb	r3, r3
    16a0:	2b00      	cmp	r3, #0
    16a2:	dbfb      	blt.n	169c <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    16a4:	7b13      	ldrb	r3, [r2, #12]
    16a6:	2102      	movs	r1, #2
    16a8:	430b      	orrs	r3, r1
    16aa:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    16ac:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    16ae:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    16b0:	b25b      	sxtb	r3, r3
    16b2:	2b00      	cmp	r3, #0
    16b4:	dbfb      	blt.n	16ae <ADC_Handler+0x8a>
    16b6:	e7c3      	b.n	1640 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    16b8:	7f23      	ldrb	r3, [r4, #28]
    16ba:	2b05      	cmp	r3, #5
    16bc:	d1c0      	bne.n	1640 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    16be:	2300      	movs	r3, #0
    16c0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    16c2:	3301      	adds	r3, #1
    16c4:	6822      	ldr	r2, [r4, #0]
    16c6:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    16c8:	0020      	movs	r0, r4
    16ca:	68a3      	ldr	r3, [r4, #8]
    16cc:	4798      	blx	r3
    16ce:	e7b7      	b.n	1640 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    16d0:	0020      	movs	r0, r4
    16d2:	68e3      	ldr	r3, [r4, #12]
    16d4:	4798      	blx	r3
    16d6:	e7be      	b.n	1656 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    16d8:	6923      	ldr	r3, [r4, #16]
    16da:	0020      	movs	r0, r4
    16dc:	4798      	blx	r3
}
    16de:	e7c5      	b.n	166c <ADC_Handler+0x48>
    16e0:	20000204 	.word	0x20000204

000016e4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    16e4:	4a04      	ldr	r2, [pc, #16]	; (16f8 <_extint_enable+0x14>)
    16e6:	7813      	ldrb	r3, [r2, #0]
    16e8:	2102      	movs	r1, #2
    16ea:	430b      	orrs	r3, r1
    16ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    16ee:	7853      	ldrb	r3, [r2, #1]
    16f0:	b25b      	sxtb	r3, r3
    16f2:	2b00      	cmp	r3, #0
    16f4:	dbfb      	blt.n	16ee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    16f6:	4770      	bx	lr
    16f8:	40001800 	.word	0x40001800

000016fc <_system_extint_init>:
{
    16fc:	b500      	push	{lr}
    16fe:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1700:	4a12      	ldr	r2, [pc, #72]	; (174c <_system_extint_init+0x50>)
    1702:	6993      	ldr	r3, [r2, #24]
    1704:	2140      	movs	r1, #64	; 0x40
    1706:	430b      	orrs	r3, r1
    1708:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    170a:	a901      	add	r1, sp, #4
    170c:	2300      	movs	r3, #0
    170e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1710:	2005      	movs	r0, #5
    1712:	4b0f      	ldr	r3, [pc, #60]	; (1750 <_system_extint_init+0x54>)
    1714:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1716:	2005      	movs	r0, #5
    1718:	4b0e      	ldr	r3, [pc, #56]	; (1754 <_system_extint_init+0x58>)
    171a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    171c:	4a0e      	ldr	r2, [pc, #56]	; (1758 <_system_extint_init+0x5c>)
    171e:	7813      	ldrb	r3, [r2, #0]
    1720:	2101      	movs	r1, #1
    1722:	430b      	orrs	r3, r1
    1724:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1726:	7853      	ldrb	r3, [r2, #1]
    1728:	b25b      	sxtb	r3, r3
    172a:	2b00      	cmp	r3, #0
    172c:	dbfb      	blt.n	1726 <_system_extint_init+0x2a>
    172e:	4b0b      	ldr	r3, [pc, #44]	; (175c <_system_extint_init+0x60>)
    1730:	0019      	movs	r1, r3
    1732:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1734:	2200      	movs	r2, #0
    1736:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1738:	4299      	cmp	r1, r3
    173a:	d1fc      	bne.n	1736 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    173c:	2210      	movs	r2, #16
    173e:	4b08      	ldr	r3, [pc, #32]	; (1760 <_system_extint_init+0x64>)
    1740:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1742:	4b08      	ldr	r3, [pc, #32]	; (1764 <_system_extint_init+0x68>)
    1744:	4798      	blx	r3
}
    1746:	b003      	add	sp, #12
    1748:	bd00      	pop	{pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	40000400 	.word	0x40000400
    1750:	00003305 	.word	0x00003305
    1754:	00003279 	.word	0x00003279
    1758:	40001800 	.word	0x40001800
    175c:	20000208 	.word	0x20000208
    1760:	e000e100 	.word	0xe000e100
    1764:	000016e5 	.word	0x000016e5

00001768 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1768:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    176a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    176c:	2340      	movs	r3, #64	; 0x40
    176e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1770:	4281      	cmp	r1, r0
    1772:	d202      	bcs.n	177a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1774:	0018      	movs	r0, r3
    1776:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1778:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    177a:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    177c:	1c63      	adds	r3, r4, #1
    177e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1780:	4288      	cmp	r0, r1
    1782:	d9f9      	bls.n	1778 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1784:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1786:	2cff      	cmp	r4, #255	; 0xff
    1788:	d8f4      	bhi.n	1774 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    178a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    178c:	2300      	movs	r3, #0
    178e:	e7f1      	b.n	1774 <_sercom_get_sync_baud_val+0xc>

00001790 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1790:	b510      	push	{r4, lr}
    1792:	b082      	sub	sp, #8
    1794:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1796:	4b0e      	ldr	r3, [pc, #56]	; (17d0 <sercom_set_gclk_generator+0x40>)
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	2b00      	cmp	r3, #0
    179c:	d007      	beq.n	17ae <sercom_set_gclk_generator+0x1e>
    179e:	2900      	cmp	r1, #0
    17a0:	d105      	bne.n	17ae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    17a2:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <sercom_set_gclk_generator+0x40>)
    17a4:	785b      	ldrb	r3, [r3, #1]
    17a6:	4283      	cmp	r3, r0
    17a8:	d010      	beq.n	17cc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    17aa:	201d      	movs	r0, #29
    17ac:	e00c      	b.n	17c8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    17ae:	a901      	add	r1, sp, #4
    17b0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    17b2:	200d      	movs	r0, #13
    17b4:	4b07      	ldr	r3, [pc, #28]	; (17d4 <sercom_set_gclk_generator+0x44>)
    17b6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    17b8:	200d      	movs	r0, #13
    17ba:	4b07      	ldr	r3, [pc, #28]	; (17d8 <sercom_set_gclk_generator+0x48>)
    17bc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    17be:	4b04      	ldr	r3, [pc, #16]	; (17d0 <sercom_set_gclk_generator+0x40>)
    17c0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    17c2:	2201      	movs	r2, #1
    17c4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    17c6:	2000      	movs	r0, #0
}
    17c8:	b002      	add	sp, #8
    17ca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    17cc:	2000      	movs	r0, #0
    17ce:	e7fb      	b.n	17c8 <sercom_set_gclk_generator+0x38>
    17d0:	20000094 	.word	0x20000094
    17d4:	00003305 	.word	0x00003305
    17d8:	00003279 	.word	0x00003279

000017dc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    17dc:	4b20      	ldr	r3, [pc, #128]	; (1860 <_sercom_get_default_pad+0x84>)
    17de:	4298      	cmp	r0, r3
    17e0:	d017      	beq.n	1812 <_sercom_get_default_pad+0x36>
    17e2:	4b20      	ldr	r3, [pc, #128]	; (1864 <_sercom_get_default_pad+0x88>)
    17e4:	4298      	cmp	r0, r3
    17e6:	d024      	beq.n	1832 <_sercom_get_default_pad+0x56>
    17e8:	4b1f      	ldr	r3, [pc, #124]	; (1868 <_sercom_get_default_pad+0x8c>)
    17ea:	4298      	cmp	r0, r3
    17ec:	d001      	beq.n	17f2 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    17ee:	2000      	movs	r0, #0
}
    17f0:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17f2:	2901      	cmp	r1, #1
    17f4:	d007      	beq.n	1806 <_sercom_get_default_pad+0x2a>
    17f6:	2900      	cmp	r1, #0
    17f8:	d02b      	beq.n	1852 <_sercom_get_default_pad+0x76>
    17fa:	2902      	cmp	r1, #2
    17fc:	d005      	beq.n	180a <_sercom_get_default_pad+0x2e>
    17fe:	2903      	cmp	r1, #3
    1800:	d005      	beq.n	180e <_sercom_get_default_pad+0x32>
	return 0;
    1802:	2000      	movs	r0, #0
    1804:	e7f4      	b.n	17f0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1806:	4819      	ldr	r0, [pc, #100]	; (186c <_sercom_get_default_pad+0x90>)
    1808:	e7f2      	b.n	17f0 <_sercom_get_default_pad+0x14>
    180a:	4819      	ldr	r0, [pc, #100]	; (1870 <_sercom_get_default_pad+0x94>)
    180c:	e7f0      	b.n	17f0 <_sercom_get_default_pad+0x14>
    180e:	4819      	ldr	r0, [pc, #100]	; (1874 <_sercom_get_default_pad+0x98>)
    1810:	e7ee      	b.n	17f0 <_sercom_get_default_pad+0x14>
    1812:	2901      	cmp	r1, #1
    1814:	d007      	beq.n	1826 <_sercom_get_default_pad+0x4a>
    1816:	2900      	cmp	r1, #0
    1818:	d01d      	beq.n	1856 <_sercom_get_default_pad+0x7a>
    181a:	2902      	cmp	r1, #2
    181c:	d005      	beq.n	182a <_sercom_get_default_pad+0x4e>
    181e:	2903      	cmp	r1, #3
    1820:	d005      	beq.n	182e <_sercom_get_default_pad+0x52>
	return 0;
    1822:	2000      	movs	r0, #0
    1824:	e7e4      	b.n	17f0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1826:	4814      	ldr	r0, [pc, #80]	; (1878 <_sercom_get_default_pad+0x9c>)
    1828:	e7e2      	b.n	17f0 <_sercom_get_default_pad+0x14>
    182a:	4814      	ldr	r0, [pc, #80]	; (187c <_sercom_get_default_pad+0xa0>)
    182c:	e7e0      	b.n	17f0 <_sercom_get_default_pad+0x14>
    182e:	4814      	ldr	r0, [pc, #80]	; (1880 <_sercom_get_default_pad+0xa4>)
    1830:	e7de      	b.n	17f0 <_sercom_get_default_pad+0x14>
    1832:	2901      	cmp	r1, #1
    1834:	d007      	beq.n	1846 <_sercom_get_default_pad+0x6a>
    1836:	2900      	cmp	r1, #0
    1838:	d00f      	beq.n	185a <_sercom_get_default_pad+0x7e>
    183a:	2902      	cmp	r1, #2
    183c:	d005      	beq.n	184a <_sercom_get_default_pad+0x6e>
    183e:	2903      	cmp	r1, #3
    1840:	d005      	beq.n	184e <_sercom_get_default_pad+0x72>
	return 0;
    1842:	2000      	movs	r0, #0
    1844:	e7d4      	b.n	17f0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1846:	480f      	ldr	r0, [pc, #60]	; (1884 <_sercom_get_default_pad+0xa8>)
    1848:	e7d2      	b.n	17f0 <_sercom_get_default_pad+0x14>
    184a:	480f      	ldr	r0, [pc, #60]	; (1888 <_sercom_get_default_pad+0xac>)
    184c:	e7d0      	b.n	17f0 <_sercom_get_default_pad+0x14>
    184e:	480f      	ldr	r0, [pc, #60]	; (188c <_sercom_get_default_pad+0xb0>)
    1850:	e7ce      	b.n	17f0 <_sercom_get_default_pad+0x14>
    1852:	480f      	ldr	r0, [pc, #60]	; (1890 <_sercom_get_default_pad+0xb4>)
    1854:	e7cc      	b.n	17f0 <_sercom_get_default_pad+0x14>
    1856:	480f      	ldr	r0, [pc, #60]	; (1894 <_sercom_get_default_pad+0xb8>)
    1858:	e7ca      	b.n	17f0 <_sercom_get_default_pad+0x14>
    185a:	480f      	ldr	r0, [pc, #60]	; (1898 <_sercom_get_default_pad+0xbc>)
    185c:	e7c8      	b.n	17f0 <_sercom_get_default_pad+0x14>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	42000c00 	.word	0x42000c00
    1864:	42001000 	.word	0x42001000
    1868:	42000800 	.word	0x42000800
    186c:	00050003 	.word	0x00050003
    1870:	00060003 	.word	0x00060003
    1874:	00070003 	.word	0x00070003
    1878:	00170002 	.word	0x00170002
    187c:	001e0003 	.word	0x001e0003
    1880:	001f0003 	.word	0x001f0003
    1884:	00170003 	.word	0x00170003
    1888:	00100003 	.word	0x00100003
    188c:	00190003 	.word	0x00190003
    1890:	00040003 	.word	0x00040003
    1894:	00160002 	.word	0x00160002
    1898:	00160003 	.word	0x00160003

0000189c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    189c:	b530      	push	{r4, r5, lr}
    189e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18a0:	aa01      	add	r2, sp, #4
    18a2:	4b0b      	ldr	r3, [pc, #44]	; (18d0 <_sercom_get_sercom_inst_index+0x34>)
    18a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    18a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18a8:	0003      	movs	r3, r0
    18aa:	9a01      	ldr	r2, [sp, #4]
    18ac:	4282      	cmp	r2, r0
    18ae:	d00c      	beq.n	18ca <_sercom_get_sercom_inst_index+0x2e>
    18b0:	9a02      	ldr	r2, [sp, #8]
    18b2:	4282      	cmp	r2, r0
    18b4:	d007      	beq.n	18c6 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18b6:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18b8:	9a03      	ldr	r2, [sp, #12]
    18ba:	429a      	cmp	r2, r3
    18bc:	d001      	beq.n	18c2 <_sercom_get_sercom_inst_index+0x26>
}
    18be:	b005      	add	sp, #20
    18c0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18c2:	3002      	adds	r0, #2
    18c4:	e002      	b.n	18cc <_sercom_get_sercom_inst_index+0x30>
    18c6:	2001      	movs	r0, #1
    18c8:	e000      	b.n	18cc <_sercom_get_sercom_inst_index+0x30>
    18ca:	2000      	movs	r0, #0
			return i;
    18cc:	b2c0      	uxtb	r0, r0
    18ce:	e7f6      	b.n	18be <_sercom_get_sercom_inst_index+0x22>
    18d0:	00003b90 	.word	0x00003b90

000018d4 <update_ORB_LED>:
#include "ORB.h"
#define PORT_CLEAR_REGISTER_ADD     0x41004414UL
#define PORT_SET_REGISTER_ADD		0x41004418UL

void update_ORB_LED(uint8_t r1 ,uint8_t g1 ,uint8_t b1 ,uint8_t r2 ,uint8_t g2 ,uint8_t b2 ,uint8_t l1 , uint8_t l4 )
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d6:	ac06      	add	r4, sp, #24
    18d8:	7827      	ldrb	r7, [r4, #0]
    18da:	ac07      	add	r4, sp, #28
    18dc:	7826      	ldrb	r6, [r4, #0]
    18de:	ac08      	add	r4, sp, #32
    18e0:	7825      	ldrb	r5, [r4, #0]
    18e2:	ac09      	add	r4, sp, #36	; 0x24
    18e4:	7824      	ldrb	r4, [r4, #0]
    18e6:	46a4      	mov	ip, r4
	
 	temp_compare_array_2[0] = 255-r1;//Left -- R
    18e8:	43c0      	mvns	r0, r0
    18ea:	b2c0      	uxtb	r0, r0
    18ec:	4c11      	ldr	r4, [pc, #68]	; (1934 <update_ORB_LED+0x60>)
    18ee:	7020      	strb	r0, [r4, #0]
 	temp_compare_array_2[1] = 255-g1;//Left  -- G
    18f0:	43c9      	mvns	r1, r1
    18f2:	b2c9      	uxtb	r1, r1
    18f4:	7061      	strb	r1, [r4, #1]
 	temp_compare_array_2[2] = 255-b1;//Left  -- B
    18f6:	43d2      	mvns	r2, r2
    18f8:	b2d2      	uxtb	r2, r2
    18fa:	70a2      	strb	r2, [r4, #2]
 	temp_compare_array_2[3] = 255-r2;//Right -- R
    18fc:	43db      	mvns	r3, r3
    18fe:	b2db      	uxtb	r3, r3
    1900:	70e3      	strb	r3, [r4, #3]
 	temp_compare_array_2[4] = 255-g2;//Right  -- G
    1902:	43fb      	mvns	r3, r7
    1904:	b2db      	uxtb	r3, r3
    1906:	7123      	strb	r3, [r4, #4]
 	temp_compare_array_2[5] = 255-b2;//Right -- B
    1908:	43f3      	mvns	r3, r6
    190a:	b2db      	uxtb	r3, r3
    190c:	7163      	strb	r3, [r4, #5]
	temp_compare_array_2[6] = 255-l1;//led1
    190e:	43eb      	mvns	r3, r5
    1910:	b2db      	uxtb	r3, r3
    1912:	71a3      	strb	r3, [r4, #6]
	if(status_battery == false)
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <update_ORB_LED+0x64>)
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b00      	cmp	r3, #0
    191a:	d103      	bne.n	1924 <update_ORB_LED+0x50>
	{
		temp_compare_array_2[7] = 255-l4;//led4 
    191c:	4663      	mov	r3, ip
    191e:	43db      	mvns	r3, r3
    1920:	b2db      	uxtb	r3, r3
    1922:	71e3      	strb	r3, [r4, #7]
	}  
	 
	
	initializing_pin_array();
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <update_ORB_LED+0x68>)
    1926:	4798      	blx	r3
	increasing_sort_tag();
    1928:	4b05      	ldr	r3, [pc, #20]	; (1940 <update_ORB_LED+0x6c>)
    192a:	4798      	blx	r3
	
	update_compare_array = true;
    192c:	2201      	movs	r2, #1
    192e:	4b05      	ldr	r3, [pc, #20]	; (1944 <update_ORB_LED+0x70>)
    1930:	701a      	strb	r2, [r3, #0]

}
    1932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1934:	20000348 	.word	0x20000348
    1938:	2000000e 	.word	0x2000000e
    193c:	00002dc9 	.word	0x00002dc9
    1940:	00002ba5 	.word	0x00002ba5
    1944:	200000f4 	.word	0x200000f4

00001948 <update_ORB_single>:


void update_ORB_single(uint8_t port_no , uint8_t r , uint8_t g , uint8_t b)
{
    1948:	b510      	push	{r4, lr}
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR			  = PORT_CLEAR_REGISTER_ADD;
	uint32_t B2_RGB = 0x08000000;
	
	if(port_no == '1') //ASCII 1
    194a:	2831      	cmp	r0, #49	; 0x31
    194c:	d009      	beq.n	1962 <update_ORB_single+0x1a>
	{
		temp_compare_array_2[0] = 255-r;//Left -- R
		temp_compare_array_2[1] = 255-g;//Left  -- G
		temp_compare_array_2[2] = 255-b;//Left  -- B
	}
	else if(port_no == '2')//ASCII 2
    194e:	2832      	cmp	r0, #50	; 0x32
    1950:	d012      	beq.n	1978 <update_ORB_single+0x30>
	{
		temp_compare_array_2[3] = 255-r;//Right -- R
		temp_compare_array_2[4] = 255-g;//Right  -- G
		temp_compare_array_2[5] = 255-b;//Right -- B
	}
	initializing_pin_array();
    1952:	4b0f      	ldr	r3, [pc, #60]	; (1990 <update_ORB_single+0x48>)
    1954:	4798      	blx	r3
	increasing_sort_tag();
    1956:	4b0f      	ldr	r3, [pc, #60]	; (1994 <update_ORB_single+0x4c>)
    1958:	4798      	blx	r3

	update_compare_array = true;
    195a:	2201      	movs	r2, #1
    195c:	4b0e      	ldr	r3, [pc, #56]	; (1998 <update_ORB_single+0x50>)
    195e:	701a      	strb	r2, [r3, #0]
}
    1960:	bd10      	pop	{r4, pc}
		temp_compare_array_2[0] = 255-r;//Left -- R
    1962:	43c9      	mvns	r1, r1
    1964:	b2c9      	uxtb	r1, r1
    1966:	480d      	ldr	r0, [pc, #52]	; (199c <update_ORB_single+0x54>)
    1968:	7001      	strb	r1, [r0, #0]
		temp_compare_array_2[1] = 255-g;//Left  -- G
    196a:	43d2      	mvns	r2, r2
    196c:	b2d2      	uxtb	r2, r2
    196e:	7042      	strb	r2, [r0, #1]
		temp_compare_array_2[2] = 255-b;//Left  -- B
    1970:	43db      	mvns	r3, r3
    1972:	b2db      	uxtb	r3, r3
    1974:	7083      	strb	r3, [r0, #2]
    1976:	e7ec      	b.n	1952 <update_ORB_single+0xa>
		temp_compare_array_2[3] = 255-r;//Right -- R
    1978:	43c9      	mvns	r1, r1
    197a:	b2c9      	uxtb	r1, r1
    197c:	4807      	ldr	r0, [pc, #28]	; (199c <update_ORB_single+0x54>)
    197e:	70c1      	strb	r1, [r0, #3]
		temp_compare_array_2[4] = 255-g;//Right  -- G
    1980:	43d2      	mvns	r2, r2
    1982:	b2d2      	uxtb	r2, r2
    1984:	7102      	strb	r2, [r0, #4]
		temp_compare_array_2[5] = 255-b;//Right -- B
    1986:	43db      	mvns	r3, r3
    1988:	b2db      	uxtb	r3, r3
    198a:	7143      	strb	r3, [r0, #5]
    198c:	e7e1      	b.n	1952 <update_ORB_single+0xa>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	00002dc9 	.word	0x00002dc9
    1994:	00002ba5 	.word	0x00002ba5
    1998:	200000f4 	.word	0x200000f4
    199c:	20000348 	.word	0x20000348

000019a0 <update_LEDS_single>:

void update_LEDS_single(uint8_t port_no, uint8_t led)
{
    19a0:	b510      	push	{r4, lr}
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR           = PORT_CLEAR_REGISTER_ADD;
	uint32_t B2_RGB = 0x08000000;
	if(led == 0xff)
    19a2:	29ff      	cmp	r1, #255	; 0xff
    19a4:	d00b      	beq.n	19be <update_LEDS_single+0x1e>
	{
		led = 0xfe;
	}
	switch (port_no)
    19a6:	2831      	cmp	r0, #49	; 0x31
    19a8:	d00b      	beq.n	19c2 <update_LEDS_single+0x22>
    19aa:	2832      	cmp	r0, #50	; 0x32
    19ac:	d00e      	beq.n	19cc <update_LEDS_single+0x2c>
			}
			break;
		default:
			break;
	}
	initializing_pin_array();
    19ae:	4b0c      	ldr	r3, [pc, #48]	; (19e0 <update_LEDS_single+0x40>)
    19b0:	4798      	blx	r3
	increasing_sort_tag();
    19b2:	4b0c      	ldr	r3, [pc, #48]	; (19e4 <update_LEDS_single+0x44>)
    19b4:	4798      	blx	r3
	update_compare_array = true;
    19b6:	2201      	movs	r2, #1
    19b8:	4b0b      	ldr	r3, [pc, #44]	; (19e8 <update_LEDS_single+0x48>)
    19ba:	701a      	strb	r2, [r3, #0]

}
    19bc:	bd10      	pop	{r4, pc}
		led = 0xfe;
    19be:	3901      	subs	r1, #1
    19c0:	e7f1      	b.n	19a6 <update_LEDS_single+0x6>
			temp_compare_array_2[6] = 255 - led;//Led1
    19c2:	43c9      	mvns	r1, r1
    19c4:	b2c9      	uxtb	r1, r1
    19c6:	4b09      	ldr	r3, [pc, #36]	; (19ec <update_LEDS_single+0x4c>)
    19c8:	7199      	strb	r1, [r3, #6]
			break;
    19ca:	e7f0      	b.n	19ae <update_LEDS_single+0xe>
		    if(status_battery == false)
    19cc:	4b08      	ldr	r3, [pc, #32]	; (19f0 <update_LEDS_single+0x50>)
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d1ec      	bne.n	19ae <update_LEDS_single+0xe>
				temp_compare_array_2[7] = 255  -led;//Led2
    19d4:	43c9      	mvns	r1, r1
    19d6:	b2c9      	uxtb	r1, r1
    19d8:	4b04      	ldr	r3, [pc, #16]	; (19ec <update_LEDS_single+0x4c>)
    19da:	71d9      	strb	r1, [r3, #7]
    19dc:	e7e7      	b.n	19ae <update_LEDS_single+0xe>
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	00002dc9 	.word	0x00002dc9
    19e4:	00002ba5 	.word	0x00002ba5
    19e8:	200000f4 	.word	0x200000f4
    19ec:	20000348 	.word	0x20000348
    19f0:	2000000e 	.word	0x2000000e

000019f4 <switch_off_ORB_LED>:


void switch_off_ORB_LED()
{
    19f4:	b510      	push	{r4, lr}
	temp_compare_array_2[0] = 255;//Left  -- R
    19f6:	4b09      	ldr	r3, [pc, #36]	; (1a1c <switch_off_ORB_LED+0x28>)
    19f8:	22ff      	movs	r2, #255	; 0xff
    19fa:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    19fc:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    19fe:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 255;//Right -- R
    1a00:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right -- G
    1a02:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    1a04:	715a      	strb	r2, [r3, #5]
	temp_compare_array_2[6] = 255;//Led1
    1a06:	719a      	strb	r2, [r3, #6]
	temp_compare_array_2[7] = 255;//Led4
    1a08:	71da      	strb	r2, [r3, #7]
	initializing_pin_array();
    1a0a:	4b05      	ldr	r3, [pc, #20]	; (1a20 <switch_off_ORB_LED+0x2c>)
    1a0c:	4798      	blx	r3
	increasing_sort_tag();
    1a0e:	4b05      	ldr	r3, [pc, #20]	; (1a24 <switch_off_ORB_LED+0x30>)
    1a10:	4798      	blx	r3
	update_compare_array = true;
    1a12:	2201      	movs	r2, #1
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <switch_off_ORB_LED+0x34>)
    1a16:	701a      	strb	r2, [r3, #0]
    1a18:	bd10      	pop	{r4, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	20000348 	.word	0x20000348
    1a20:	00002dc9 	.word	0x00002dc9
    1a24:	00002ba5 	.word	0x00002ba5
    1a28:	200000f4 	.word	0x200000f4

00001a2c <filter_volatge_monitor>:
	output_single_adc = adc_start_read_result(sensor_analog_inputs[sensor_no]);
	return output_single_adc;
}

uint8_t filter_volatge_monitor(uint8_t sensor_input)
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
    1a2e:	0004      	movs	r4, r0
	uint8_t sensor_output = 0;
	static uint8_t sensor_output_inf_filter = 0;
	static uint8_t init = false; 
	static uint8_t out_range = 0;
	if(init == false)
    1a30:	4b1b      	ldr	r3, [pc, #108]	; (1aa0 <filter_volatge_monitor+0x74>)
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	2b00      	cmp	r3, #0
    1a36:	d104      	bne.n	1a42 <filter_volatge_monitor+0x16>
	{
		init = true;
    1a38:	2201      	movs	r2, #1
    1a3a:	4b19      	ldr	r3, [pc, #100]	; (1aa0 <filter_volatge_monitor+0x74>)
    1a3c:	701a      	strb	r2, [r3, #0]
		sensor_output_inf_filter = sensor_input;
    1a3e:	4b19      	ldr	r3, [pc, #100]	; (1aa4 <filter_volatge_monitor+0x78>)
    1a40:	7018      	strb	r0, [r3, #0]
	}
	sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a42:	4e18      	ldr	r6, [pc, #96]	; (1aa4 <filter_volatge_monitor+0x78>)
    1a44:	7833      	ldrb	r3, [r6, #0]
    1a46:	00d8      	lsls	r0, r3, #3
    1a48:	18c0      	adds	r0, r0, r3
    1a4a:	1900      	adds	r0, r0, r4
    1a4c:	210a      	movs	r1, #10
    1a4e:	4b16      	ldr	r3, [pc, #88]	; (1aa8 <filter_volatge_monitor+0x7c>)
    1a50:	4798      	blx	r3
    1a52:	7030      	strb	r0, [r6, #0]
    1a54:	23ff      	movs	r3, #255	; 0xff
    1a56:	4018      	ands	r0, r3
	
	if((sensor_input < (sensor_output_inf_filter + THRESHOLD_NOISE)) && (sensor_input > (sensor_output_inf_filter - THRESHOLD_NOISE)))
    1a58:	1d43      	adds	r3, r0, #5
    1a5a:	429c      	cmp	r4, r3
    1a5c:	da02      	bge.n	1a64 <filter_volatge_monitor+0x38>
    1a5e:	1f43      	subs	r3, r0, #5
    1a60:	429c      	cmp	r4, r3
    1a62:	dc09      	bgt.n	1a78 <filter_volatge_monitor+0x4c>
		sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
		out_range = 0;
	}
	else
	{
		out_range++;
    1a64:	4a11      	ldr	r2, [pc, #68]	; (1aac <filter_volatge_monitor+0x80>)
    1a66:	7813      	ldrb	r3, [r2, #0]
    1a68:	3301      	adds	r3, #1
    1a6a:	b2db      	uxtb	r3, r3
    1a6c:	7013      	strb	r3, [r2, #0]
		if(out_range == THRESHOLD_OUT_RANGE)
    1a6e:	2b03      	cmp	r3, #3
    1a70:	d00d      	beq.n	1a8e <filter_volatge_monitor+0x62>
			sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
		}
	}
	
	sensor_output   = sensor_output_inf_filter;
	return sensor_output;
    1a72:	4b0c      	ldr	r3, [pc, #48]	; (1aa4 <filter_volatge_monitor+0x78>)
    1a74:	7818      	ldrb	r0, [r3, #0]
}
    1a76:	bd70      	pop	{r4, r5, r6, pc}
		sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a78:	00c3      	lsls	r3, r0, #3
    1a7a:	1818      	adds	r0, r3, r0
    1a7c:	1900      	adds	r0, r0, r4
    1a7e:	210a      	movs	r1, #10
    1a80:	4b09      	ldr	r3, [pc, #36]	; (1aa8 <filter_volatge_monitor+0x7c>)
    1a82:	4798      	blx	r3
    1a84:	7030      	strb	r0, [r6, #0]
		out_range = 0;
    1a86:	2200      	movs	r2, #0
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <filter_volatge_monitor+0x80>)
    1a8a:	701a      	strb	r2, [r3, #0]
    1a8c:	e7f1      	b.n	1a72 <filter_volatge_monitor+0x46>
			sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a8e:	00c3      	lsls	r3, r0, #3
    1a90:	1818      	adds	r0, r3, r0
    1a92:	1900      	adds	r0, r0, r4
    1a94:	210a      	movs	r1, #10
    1a96:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <filter_volatge_monitor+0x7c>)
    1a98:	4798      	blx	r3
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <filter_volatge_monitor+0x78>)
    1a9c:	7018      	strb	r0, [r3, #0]
    1a9e:	e7e8      	b.n	1a72 <filter_volatge_monitor+0x46>
    1aa0:	20000097 	.word	0x20000097
    1aa4:	2000009b 	.word	0x2000009b
    1aa8:	00003701 	.word	0x00003701
    1aac:	20000099 	.word	0x20000099

00001ab0 <read_all_sensors>:

void read_all_sensors()
{
    1ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab2:	b083      	sub	sp, #12
    1ab4:	2400      	movs	r4, #0
	
	uint8_t i = 0;
	
	for(i= 0; i< NO_SENSORS; i++)
	{
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    1ab6:	4e26      	ldr	r6, [pc, #152]	; (1b50 <read_all_sensors+0xa0>)
    1ab8:	4f26      	ldr	r7, [pc, #152]	; (1b54 <read_all_sensors+0xa4>)
    1aba:	e02a      	b.n	1b12 <read_all_sensors+0x62>
		if(i==BATTERY_MONITOR_SENSOR_VALUE)
		{
			//total_sum += filter_volatge_monitor(temp_sensor_outputs[i]);
			max_value = filter_volatge_monitor(temp_sensor_outputs[i]);
    1abc:	4b26      	ldr	r3, [pc, #152]	; (1b58 <read_all_sensors+0xa8>)
    1abe:	4798      	blx	r3
			if(overall_max_value <= max_value)
    1ac0:	4b26      	ldr	r3, [pc, #152]	; (1b5c <read_all_sensors+0xac>)
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	4298      	cmp	r0, r3
    1ac6:	d304      	bcc.n	1ad2 <read_all_sensors+0x22>
			{
				if(overall_max_value == max_value)
    1ac8:	d11a      	bne.n	1b00 <read_all_sensors+0x50>
				{
					count_max_value++;
    1aca:	4a25      	ldr	r2, [pc, #148]	; (1b60 <read_all_sensors+0xb0>)
    1acc:	7813      	ldrb	r3, [r2, #0]
    1ace:	3301      	adds	r3, #1
    1ad0:	7013      	strb	r3, [r2, #0]
					count_max_value = 0;
					overall_max_value = max_value;
				}
			}
			
			if(init == false)
    1ad2:	4b24      	ldr	r3, [pc, #144]	; (1b64 <read_all_sensors+0xb4>)
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d003      	beq.n	1ae2 <read_all_sensors+0x32>
			{
				temp_sensor_outputs[i] = temp_sensor_outputs[i] ;
			}
			else
			{
				temp_sensor_outputs[i] = battery_voltage ;
    1ada:	4b23      	ldr	r3, [pc, #140]	; (1b68 <read_all_sensors+0xb8>)
    1adc:	781a      	ldrb	r2, [r3, #0]
    1ade:	ab01      	add	r3, sp, #4
    1ae0:	70da      	strb	r2, [r3, #3]
			}				
		}
		if(firmware_check == false)
    1ae2:	4b22      	ldr	r3, [pc, #136]	; (1b6c <read_all_sensors+0xbc>)
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d020      	beq.n	1b2c <read_all_sensors+0x7c>
		{
			sensor_outputs[i]      = temp_sensor_outputs[i] ;
		}
		
	}
	test_count++;
    1aea:	4a21      	ldr	r2, [pc, #132]	; (1b70 <read_all_sensors+0xc0>)
    1aec:	8813      	ldrh	r3, [r2, #0]
    1aee:	3301      	adds	r3, #1
    1af0:	b29b      	uxth	r3, r3
    1af2:	8013      	strh	r3, [r2, #0]
	if(test_count == 1000)
    1af4:	22fa      	movs	r2, #250	; 0xfa
    1af6:	0092      	lsls	r2, r2, #2
    1af8:	4293      	cmp	r3, r2
    1afa:	d01c      	beq.n	1b36 <read_all_sensors+0x86>
		}
		*/
		
	}
	
}
    1afc:	b003      	add	sp, #12
    1afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					count_max_value = 0;
    1b00:	2200      	movs	r2, #0
    1b02:	4b17      	ldr	r3, [pc, #92]	; (1b60 <read_all_sensors+0xb0>)
    1b04:	701a      	strb	r2, [r3, #0]
					overall_max_value = max_value;
    1b06:	4b15      	ldr	r3, [pc, #84]	; (1b5c <read_all_sensors+0xac>)
    1b08:	7018      	strb	r0, [r3, #0]
    1b0a:	e7e2      	b.n	1ad2 <read_all_sensors+0x22>
    1b0c:	3401      	adds	r4, #1
	for(i= 0; i< NO_SENSORS; i++)
    1b0e:	2c04      	cmp	r4, #4
    1b10:	d0eb      	beq.n	1aea <read_all_sensors+0x3a>
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    1b12:	0025      	movs	r5, r4
    1b14:	5da0      	ldrb	r0, [r4, r6]
    1b16:	47b8      	blx	r7
    1b18:	b2c0      	uxtb	r0, r0
    1b1a:	ab01      	add	r3, sp, #4
    1b1c:	54e0      	strb	r0, [r4, r3]
		if(i==BATTERY_MONITOR_SENSOR_VALUE)
    1b1e:	b2e3      	uxtb	r3, r4
    1b20:	2b03      	cmp	r3, #3
    1b22:	d0cb      	beq.n	1abc <read_all_sensors+0xc>
		if(firmware_check == false)
    1b24:	4b11      	ldr	r3, [pc, #68]	; (1b6c <read_all_sensors+0xbc>)
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d1ef      	bne.n	1b0c <read_all_sensors+0x5c>
			sensor_outputs[i]      = temp_sensor_outputs[i] ;
    1b2c:	ab01      	add	r3, sp, #4
    1b2e:	5ce3      	ldrb	r3, [r4, r3]
    1b30:	4a10      	ldr	r2, [pc, #64]	; (1b74 <read_all_sensors+0xc4>)
    1b32:	5553      	strb	r3, [r2, r5]
    1b34:	e7ea      	b.n	1b0c <read_all_sensors+0x5c>
		init			=	true ;
    1b36:	2201      	movs	r2, #1
    1b38:	4b0a      	ldr	r3, [pc, #40]	; (1b64 <read_all_sensors+0xb4>)
    1b3a:	701a      	strb	r2, [r3, #0]
		battery_voltage = overall_max_value;
    1b3c:	4b07      	ldr	r3, [pc, #28]	; (1b5c <read_all_sensors+0xac>)
    1b3e:	7819      	ldrb	r1, [r3, #0]
    1b40:	4a09      	ldr	r2, [pc, #36]	; (1b68 <read_all_sensors+0xb8>)
    1b42:	7011      	strb	r1, [r2, #0]
		test_count		=	0;
    1b44:	2100      	movs	r1, #0
    1b46:	4a0a      	ldr	r2, [pc, #40]	; (1b70 <read_all_sensors+0xc0>)
    1b48:	8011      	strh	r1, [r2, #0]
		overall_max_value = 0;
    1b4a:	2200      	movs	r2, #0
    1b4c:	701a      	strb	r2, [r3, #0]
}
    1b4e:	e7d5      	b.n	1afc <read_all_sensors+0x4c>
    1b50:	00003b9c 	.word	0x00003b9c
    1b54:	00001c05 	.word	0x00001c05
    1b58:	00001a2d 	.word	0x00001a2d
    1b5c:	2000009a 	.word	0x2000009a
    1b60:	20000096 	.word	0x20000096
    1b64:	20000098 	.word	0x20000098
    1b68:	200000ec 	.word	0x200000ec
    1b6c:	200000ed 	.word	0x200000ed
    1b70:	2000009c 	.word	0x2000009c
    1b74:	200002f4 	.word	0x200002f4

00001b78 <configure_adc>:
struct adc_module adc_instance;
uint16_t* adc_result = NULL;


void configure_adc()
{
    1b78:	b510      	push	{r4, lr}
    1b7a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1b7c:	4668      	mov	r0, sp
    1b7e:	4b1a      	ldr	r3, [pc, #104]	; (1be8 <configure_adc+0x70>)
    1b80:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    1b82:	2002      	movs	r0, #2
    1b84:	4b19      	ldr	r3, [pc, #100]	; (1bec <configure_adc+0x74>)
    1b86:	4798      	blx	r3
    1b88:	4b19      	ldr	r3, [pc, #100]	; (1bf0 <configure_adc+0x78>)
    1b8a:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1b8c:	2301      	movs	r3, #1
    1b8e:	466a      	mov	r2, sp
    1b90:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV16;
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	0092      	lsls	r2, r2, #2
    1b96:	4669      	mov	r1, sp
    1b98:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1b9a:	3afb      	subs	r2, #251	; 0xfb
    1b9c:	3aff      	subs	r2, #255	; 0xff
    1b9e:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1ba0:	22c0      	movs	r2, #192	; 0xc0
    1ba2:	0152      	lsls	r2, r2, #5
    1ba4:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    1ba6:	2230      	movs	r2, #48	; 0x30
    1ba8:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    1baa:	466a      	mov	r2, sp
    1bac:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    1bae:	4c11      	ldr	r4, [pc, #68]	; (1bf4 <configure_adc+0x7c>)
    1bb0:	4911      	ldr	r1, [pc, #68]	; (1bf8 <configure_adc+0x80>)
    1bb2:	0020      	movs	r0, r4
    1bb4:	4b11      	ldr	r3, [pc, #68]	; (1bfc <configure_adc+0x84>)
    1bb6:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1bb8:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bba:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1bbc:	b25b      	sxtb	r3, r3
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	dbfb      	blt.n	1bba <configure_adc+0x42>
    1bc2:	2180      	movs	r1, #128	; 0x80
    1bc4:	0209      	lsls	r1, r1, #8
    1bc6:	4b0e      	ldr	r3, [pc, #56]	; (1c00 <configure_adc+0x88>)
    1bc8:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1bca:	230f      	movs	r3, #15
    1bcc:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1bce:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1bd0:	7813      	ldrb	r3, [r2, #0]
    1bd2:	2102      	movs	r1, #2
    1bd4:	430b      	orrs	r3, r1
    1bd6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1bd8:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <configure_adc+0x7c>)
    1bda:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bdc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1bde:	b25b      	sxtb	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	dbfb      	blt.n	1bdc <configure_adc+0x64>
	adc_enable(&adc_instance);
}
    1be4:	b00c      	add	sp, #48	; 0x30
    1be6:	bd10      	pop	{r4, pc}
    1be8:	000011b5 	.word	0x000011b5
    1bec:	00003921 	.word	0x00003921
    1bf0:	200000a0 	.word	0x200000a0
    1bf4:	20000248 	.word	0x20000248
    1bf8:	42002000 	.word	0x42002000
    1bfc:	000011fd 	.word	0x000011fd
    1c00:	e000e100 	.word	0xe000e100

00001c04 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    1c04:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1c06:	4b2d      	ldr	r3, [pc, #180]	; (1cbc <adc_start_read_result+0xb8>)
    1c08:	6819      	ldr	r1, [r3, #0]
    1c0a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    1c0c:	b25b      	sxtb	r3, r3
    1c0e:	2b00      	cmp	r3, #0
    1c10:	dbfb      	blt.n	1c0a <adc_start_read_result+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1c12:	690b      	ldr	r3, [r1, #16]
    1c14:	221f      	movs	r2, #31
    1c16:	4393      	bics	r3, r2
    1c18:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1c1a:	6108      	str	r0, [r1, #16]
    1c1c:	7e4b      	ldrb	r3, [r1, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    1c1e:	b25b      	sxtb	r3, r3
    1c20:	2b00      	cmp	r3, #0
    1c22:	dbfb      	blt.n	1c1c <adc_start_read_result+0x18>
    1c24:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c26:	b25b      	sxtb	r3, r3
    1c28:	2b00      	cmp	r3, #0
    1c2a:	dbfb      	blt.n	1c24 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1c2c:	7b0b      	ldrb	r3, [r1, #12]
    1c2e:	2202      	movs	r2, #2
    1c30:	4313      	orrs	r3, r2
    1c32:	730b      	strb	r3, [r1, #12]
    1c34:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c36:	b25b      	sxtb	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	dbfb      	blt.n	1c34 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c3c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c3e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1c40:	2402      	movs	r4, #2
    1c42:	e001      	b.n	1c48 <adc_start_read_result+0x44>
	
	uint16_t temp = 0;
	
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1c44:	4210      	tst	r0, r2
    1c46:	d10a      	bne.n	1c5e <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1c48:	7e0b      	ldrb	r3, [r1, #24]
    1c4a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c4c:	0002      	movs	r2, r0
    1c4e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c50:	421d      	tst	r5, r3
    1c52:	d000      	beq.n	1c56 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1c54:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1c56:	421c      	tst	r4, r3
    1c58:	d0f4      	beq.n	1c44 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    1c5a:	432a      	orrs	r2, r5
    1c5c:	e7f2      	b.n	1c44 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1c5e:	7e0a      	ldrb	r2, [r1, #24]
    1c60:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c62:	2301      	movs	r3, #1
    1c64:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c66:	0750      	lsls	r0, r2, #29
    1c68:	d501      	bpl.n	1c6e <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    1c6a:	2002      	movs	r0, #2
    1c6c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1c6e:	0792      	lsls	r2, r2, #30
    1c70:	d501      	bpl.n	1c76 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    1c72:	2204      	movs	r2, #4
    1c74:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1c76:	07db      	lsls	r3, r3, #31
    1c78:	d403      	bmi.n	1c82 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1c7a:	4b11      	ldr	r3, [pc, #68]	; (1cc0 <adc_start_read_result+0xbc>)
    1c7c:	681b      	ldr	r3, [r3, #0]

 	return temp;
    1c7e:	8818      	ldrh	r0, [r3, #0]
}
    1c80:	bd30      	pop	{r4, r5, pc}
    1c82:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c84:	b25b      	sxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	dbfb      	blt.n	1c82 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    1c8a:	4b0d      	ldr	r3, [pc, #52]	; (1cc0 <adc_start_read_result+0xbc>)
    1c8c:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1c8e:	8b4a      	ldrh	r2, [r1, #26]
    1c90:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1c92:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <adc_start_read_result+0xb8>)
    1c94:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1c96:	2301      	movs	r3, #1
    1c98:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1c9a:	7e0a      	ldrb	r2, [r1, #24]
    1c9c:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c9e:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1ca0:	0750      	lsls	r0, r2, #29
    1ca2:	d501      	bpl.n	1ca8 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    1ca4:	2002      	movs	r0, #2
    1ca6:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1ca8:	0792      	lsls	r2, r2, #30
    1caa:	d501      	bpl.n	1cb0 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    1cac:	2204      	movs	r2, #4
    1cae:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1cb0:	075b      	lsls	r3, r3, #29
    1cb2:	d5e2      	bpl.n	1c7a <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    1cb4:	2302      	movs	r3, #2
    1cb6:	760b      	strb	r3, [r1, #24]
    1cb8:	e7df      	b.n	1c7a <adc_start_read_result+0x76>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	20000248 	.word	0x20000248
    1cc0:	200000a0 	.word	0x200000a0

00001cc4 <sensor_init>:
	port_pin_set_config(SENSOR3, &config_port_pin);
	
}

void sensor_init()
{
    1cc4:	b510      	push	{r4, lr}
	//Enable Analog input 
	//Pull ADC inputs low
	configure_adc();
    1cc6:	4b01      	ldr	r3, [pc, #4]	; (1ccc <sensor_init+0x8>)
    1cc8:	4798      	blx	r3
    1cca:	bd10      	pop	{r4, pc}
    1ccc:	00001b79 	.word	0x00001b79

00001cd0 <enable_super_servo>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1cd0:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <enable_super_servo+0x18>)
    1cd2:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1cd4:	2102      	movs	r1, #2
    1cd6:	6893      	ldr	r3, [r2, #8]
    1cd8:	4219      	tst	r1, r3
    1cda:	d1fc      	bne.n	1cd6 <enable_super_servo+0x6>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1cdc:	6813      	ldr	r3, [r2, #0]
    1cde:	2102      	movs	r1, #2
    1ce0:	430b      	orrs	r3, r1
    1ce2:	6013      	str	r3, [r2, #0]
struct tcc_module tcc_ss_instance0;

void enable_super_servo()
{
	tcc_enable(&tcc_ss_instance0);
}
    1ce4:	4770      	bx	lr
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	20000268 	.word	0x20000268

00001cec <super_servo_tcc_init>:
{
	tcc_disable(&tcc_ss_instance0);
}

void super_servo_tcc_init()
{
    1cec:	b530      	push	{r4, r5, lr}
    1cee:	b0ab      	sub	sp, #172	; 0xac
	struct tcc_config config_tcc_ss;
	tcc_get_config_defaults(&config_tcc_ss, TCC0);
    1cf0:	4d1a      	ldr	r5, [pc, #104]	; (1d5c <super_servo_tcc_init+0x70>)
    1cf2:	ac01      	add	r4, sp, #4
    1cf4:	0029      	movs	r1, r5
    1cf6:	0020      	movs	r0, r4
    1cf8:	4b19      	ldr	r3, [pc, #100]	; (1d60 <super_servo_tcc_init+0x74>)
    1cfa:	4798      	blx	r3
	
	
	config_tcc_ss.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
    1cfc:	2302      	movs	r3, #2
    1cfe:	72e3      	strb	r3, [r4, #11]
	config_tcc_ss.counter.period = 0x9C40;
    1d00:	4a18      	ldr	r2, [pc, #96]	; (1d64 <super_servo_tcc_init+0x78>)
    1d02:	6062      	str	r2, [r4, #4]
	config_tcc_ss.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1d04:	7623      	strb	r3, [r4, #24]
	
	config_tcc_ss.compare.wave_polarity[SERVO_1_CH] = TCC_WAVE_POLARITY_0;
    1d06:	2300      	movs	r3, #0
    1d08:	7523      	strb	r3, [r4, #20]
	config_tcc_ss.compare.wave_polarity[SERVO_2_CH] = TCC_WAVE_POLARITY_0;
    1d0a:	7563      	strb	r3, [r4, #21]
	config_tcc_ss.compare.wave_polarity[SERVO_3_CH] = TCC_WAVE_POLARITY_0;
    1d0c:	75a3      	strb	r3, [r4, #22]
	config_tcc_ss.compare.wave_polarity[SERVO_4_CH] = TCC_WAVE_POLARITY_0;
    1d0e:	75e3      	strb	r3, [r4, #23]
	
	
	config_tcc_ss.compare.match[SERVO_1_CH] = 0;
    1d10:	61e3      	str	r3, [r4, #28]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_1_WO] = true;
    1d12:	2201      	movs	r2, #1
    1d14:	2198      	movs	r1, #152	; 0x98
    1d16:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_1_WO]        = PIN_PA04F_TCC0_WO0; //this is no longer correct--- should be now
    1d18:	3994      	subs	r1, #148	; 0x94
    1d1a:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_1_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    1d1c:	4912      	ldr	r1, [pc, #72]	; (1d68 <super_servo_tcc_init+0x7c>)
    1d1e:	67a1      	str	r1, [r4, #120]	; 0x78
	
	
	config_tcc_ss.compare.match[SERVO_2_CH] = 0;
    1d20:	6223      	str	r3, [r4, #32]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_2_WO] = true;
    1d22:	2199      	movs	r1, #153	; 0x99
    1d24:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_2_WO]        = PIN_PA05F_TCC0_WO1; //this is no longer correct--- should be now
    1d26:	3994      	subs	r1, #148	; 0x94
    1d28:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_2_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    1d2a:	4910      	ldr	r1, [pc, #64]	; (1d6c <super_servo_tcc_init+0x80>)
    1d2c:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	
	config_tcc_ss.compare.match[SERVO_3_CH] = 0;
    1d2e:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_3_WO] = true;
    1d30:	219a      	movs	r1, #154	; 0x9a
    1d32:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_3_WO]        = PIN_PA06F_TCC0_WO2; //this is no longer correct--- should be now
    1d34:	3994      	subs	r1, #148	; 0x94
    1d36:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_3_WO]    = PINMUX_PA06F_TCC0_WO2; // this is no longer correct --- should be now
    1d38:	480d      	ldr	r0, [pc, #52]	; (1d70 <super_servo_tcc_init+0x84>)
    1d3a:	317a      	adds	r1, #122	; 0x7a
    1d3c:	5060      	str	r0, [r4, r1]
	
	
	config_tcc_ss.compare.match[SERVO_4_CH] = 0;
    1d3e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_4_WO] = true;
    1d40:	339b      	adds	r3, #155	; 0x9b
    1d42:	54e2      	strb	r2, [r4, r3]
	config_tcc_ss.pins.wave_out_pin[SERVO_4_WO]        = PIN_PA07F_TCC0_WO3; //this is no longer correct--- should be now
    1d44:	3b94      	subs	r3, #148	; 0x94
    1d46:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_4_WO]    = PINMUX_PA07F_TCC0_WO3; // this is no longer correct --- should be now
    1d48:	4a0a      	ldr	r2, [pc, #40]	; (1d74 <super_servo_tcc_init+0x88>)
    1d4a:	337d      	adds	r3, #125	; 0x7d
    1d4c:	50e2      	str	r2, [r4, r3]
	
	
	tcc_init(&tcc_ss_instance0, TCC0, &config_tcc_ss);
    1d4e:	0022      	movs	r2, r4
    1d50:	0029      	movs	r1, r5
    1d52:	4809      	ldr	r0, [pc, #36]	; (1d78 <super_servo_tcc_init+0x8c>)
    1d54:	4b09      	ldr	r3, [pc, #36]	; (1d7c <super_servo_tcc_init+0x90>)
    1d56:	4798      	blx	r3
	
}
    1d58:	b02b      	add	sp, #172	; 0xac
    1d5a:	bd30      	pop	{r4, r5, pc}
    1d5c:	42001400 	.word	0x42001400
    1d60:	00001f9d 	.word	0x00001f9d
    1d64:	00009c40 	.word	0x00009c40
    1d68:	00040005 	.word	0x00040005
    1d6c:	00050005 	.word	0x00050005
    1d70:	00060005 	.word	0x00060005
    1d74:	00070005 	.word	0x00070005
    1d78:	20000268 	.word	0x20000268
    1d7c:	000020d9 	.word	0x000020d9

00001d80 <super_servo_init>:

void super_servo_init()
{
    1d80:	b510      	push	{r4, lr}
	super_servo_tcc_init();
    1d82:	4b01      	ldr	r3, [pc, #4]	; (1d88 <super_servo_init+0x8>)
    1d84:	4798      	blx	r3
}
    1d86:	bd10      	pop	{r4, pc}
    1d88:	00001ced 	.word	0x00001ced

00001d8c <update_super_servo>:
{
	update_super_servo(SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE);
}

void update_super_servo(uint8_t servo1 , uint8_t servo2 , uint8_t servo3, uint8_t servo4)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	000d      	movs	r5, r1
    1d90:	0014      	movs	r4, r2
    1d92:	001e      	movs	r6, r3
	if(battery_voltage > SERVO_THRESHOLD)
    1d94:	4b2c      	ldr	r3, [pc, #176]	; (1e48 <update_super_servo+0xbc>)
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	b2db      	uxtb	r3, r3
    1d9a:	2b55      	cmp	r3, #85	; 0x55
    1d9c:	d93b      	bls.n	1e16 <update_super_servo+0x8a>
	{
		//Servo--1
		if(servo1 != 255)
    1d9e:	28ff      	cmp	r0, #255	; 0xff
    1da0:	d03a      	beq.n	1e18 <update_super_servo+0x8c>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*servo1)/254) + 1280));
    1da2:	23dc      	movs	r3, #220	; 0xdc
    1da4:	011b      	lsls	r3, r3, #4
    1da6:	4358      	muls	r0, r3
    1da8:	21fe      	movs	r1, #254	; 0xfe
    1daa:	4b28      	ldr	r3, [pc, #160]	; (1e4c <update_super_servo+0xc0>)
    1dac:	4798      	blx	r3
    1dae:	23a0      	movs	r3, #160	; 0xa0
    1db0:	00db      	lsls	r3, r3, #3
    1db2:	18c2      	adds	r2, r0, r3
    1db4:	2100      	movs	r1, #0
    1db6:	4826      	ldr	r0, [pc, #152]	; (1e50 <update_super_servo+0xc4>)
    1db8:	4b26      	ldr	r3, [pc, #152]	; (1e54 <update_super_servo+0xc8>)
    1dba:	4798      	blx	r3
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
		}
		
	
		//Servo--2
		if(servo2 != 255)
    1dbc:	2dff      	cmp	r5, #255	; 0xff
    1dbe:	d031      	beq.n	1e24 <update_super_servo+0x98>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*servo2)/254) + 1280));
    1dc0:	20dc      	movs	r0, #220	; 0xdc
    1dc2:	0100      	lsls	r0, r0, #4
    1dc4:	4368      	muls	r0, r5
    1dc6:	21fe      	movs	r1, #254	; 0xfe
    1dc8:	4b20      	ldr	r3, [pc, #128]	; (1e4c <update_super_servo+0xc0>)
    1dca:	4798      	blx	r3
    1dcc:	23a0      	movs	r3, #160	; 0xa0
    1dce:	00db      	lsls	r3, r3, #3
    1dd0:	18c2      	adds	r2, r0, r3
    1dd2:	2101      	movs	r1, #1
    1dd4:	481e      	ldr	r0, [pc, #120]	; (1e50 <update_super_servo+0xc4>)
    1dd6:	4b1f      	ldr	r3, [pc, #124]	; (1e54 <update_super_servo+0xc8>)
    1dd8:	4798      	blx	r3
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
		}
	
		//Servo--3
		if(servo3 != 255)
    1dda:	2cff      	cmp	r4, #255	; 0xff
    1ddc:	d028      	beq.n	1e30 <update_super_servo+0xa4>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*servo3)/254) + 1280));
    1dde:	20dc      	movs	r0, #220	; 0xdc
    1de0:	0100      	lsls	r0, r0, #4
    1de2:	4360      	muls	r0, r4
    1de4:	21fe      	movs	r1, #254	; 0xfe
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <update_super_servo+0xc0>)
    1de8:	4798      	blx	r3
    1dea:	23a0      	movs	r3, #160	; 0xa0
    1dec:	00db      	lsls	r3, r3, #3
    1dee:	18c2      	adds	r2, r0, r3
    1df0:	2102      	movs	r1, #2
    1df2:	4817      	ldr	r0, [pc, #92]	; (1e50 <update_super_servo+0xc4>)
    1df4:	4b17      	ldr	r3, [pc, #92]	; (1e54 <update_super_servo+0xc8>)
    1df6:	4798      	blx	r3
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
		}
	
		//Servo--4
		if(servo4 != 255)
    1df8:	2eff      	cmp	r6, #255	; 0xff
    1dfa:	d01f      	beq.n	1e3c <update_super_servo+0xb0>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*servo4)/254) + 1280));
    1dfc:	20dc      	movs	r0, #220	; 0xdc
    1dfe:	0100      	lsls	r0, r0, #4
    1e00:	4370      	muls	r0, r6
    1e02:	21fe      	movs	r1, #254	; 0xfe
    1e04:	4b11      	ldr	r3, [pc, #68]	; (1e4c <update_super_servo+0xc0>)
    1e06:	4798      	blx	r3
    1e08:	23a0      	movs	r3, #160	; 0xa0
    1e0a:	00db      	lsls	r3, r3, #3
    1e0c:	18c2      	adds	r2, r0, r3
    1e0e:	2103      	movs	r1, #3
    1e10:	480f      	ldr	r0, [pc, #60]	; (1e50 <update_super_servo+0xc4>)
    1e12:	4b10      	ldr	r3, [pc, #64]	; (1e54 <update_super_servo+0xc8>)
    1e14:	4798      	blx	r3
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
		}
	}
	
}
    1e16:	bd70      	pop	{r4, r5, r6, pc}
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    1e18:	2200      	movs	r2, #0
    1e1a:	2100      	movs	r1, #0
    1e1c:	480c      	ldr	r0, [pc, #48]	; (1e50 <update_super_servo+0xc4>)
    1e1e:	4b0d      	ldr	r3, [pc, #52]	; (1e54 <update_super_servo+0xc8>)
    1e20:	4798      	blx	r3
    1e22:	e7cb      	b.n	1dbc <update_super_servo+0x30>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1e24:	2200      	movs	r2, #0
    1e26:	2101      	movs	r1, #1
    1e28:	4809      	ldr	r0, [pc, #36]	; (1e50 <update_super_servo+0xc4>)
    1e2a:	4b0a      	ldr	r3, [pc, #40]	; (1e54 <update_super_servo+0xc8>)
    1e2c:	4798      	blx	r3
    1e2e:	e7d4      	b.n	1dda <update_super_servo+0x4e>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    1e30:	2200      	movs	r2, #0
    1e32:	2102      	movs	r1, #2
    1e34:	4806      	ldr	r0, [pc, #24]	; (1e50 <update_super_servo+0xc4>)
    1e36:	4b07      	ldr	r3, [pc, #28]	; (1e54 <update_super_servo+0xc8>)
    1e38:	4798      	blx	r3
    1e3a:	e7dd      	b.n	1df8 <update_super_servo+0x6c>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    1e3c:	2200      	movs	r2, #0
    1e3e:	2103      	movs	r1, #3
    1e40:	4803      	ldr	r0, [pc, #12]	; (1e50 <update_super_servo+0xc4>)
    1e42:	4b04      	ldr	r3, [pc, #16]	; (1e54 <update_super_servo+0xc8>)
    1e44:	4798      	blx	r3
}
    1e46:	e7e6      	b.n	1e16 <update_super_servo+0x8a>
    1e48:	200000ec 	.word	0x200000ec
    1e4c:	00003701 	.word	0x00003701
    1e50:	20000268 	.word	0x20000268
    1e54:	00002461 	.word	0x00002461

00001e58 <switch_off_servos>:
{
    1e58:	b510      	push	{r4, lr}
	update_super_servo(SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE);
    1e5a:	23ff      	movs	r3, #255	; 0xff
    1e5c:	22ff      	movs	r2, #255	; 0xff
    1e5e:	21ff      	movs	r1, #255	; 0xff
    1e60:	20ff      	movs	r0, #255	; 0xff
    1e62:	4c01      	ldr	r4, [pc, #4]	; (1e68 <switch_off_servos+0x10>)
    1e64:	47a0      	blx	r4
}
    1e66:	bd10      	pop	{r4, pc}
    1e68:	00001d8d 	.word	0x00001d8d

00001e6c <update_super_servo_single>:

void update_super_servo_single(uint8_t port_no ,uint8_t super_servo)
{
    1e6c:	b510      	push	{r4, lr}
	if(battery_voltage > SERVO_THRESHOLD)
    1e6e:	4b33      	ldr	r3, [pc, #204]	; (1f3c <update_super_servo_single+0xd0>)
    1e70:	781b      	ldrb	r3, [r3, #0]
    1e72:	b2db      	uxtb	r3, r3
    1e74:	2b55      	cmp	r3, #85	; 0x55
    1e76:	d927      	bls.n	1ec8 <update_super_servo_single+0x5c>
	{
		switch (port_no)
    1e78:	2832      	cmp	r0, #50	; 0x32
    1e7a:	d02c      	beq.n	1ed6 <update_super_servo_single+0x6a>
    1e7c:	d913      	bls.n	1ea6 <update_super_servo_single+0x3a>
    1e7e:	2833      	cmp	r0, #51	; 0x33
    1e80:	d03f      	beq.n	1f02 <update_super_servo_single+0x96>
    1e82:	2834      	cmp	r0, #52	; 0x34
    1e84:	d120      	bne.n	1ec8 <update_super_servo_single+0x5c>
					{
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
					}
					break;
			case '4':
					if(super_servo != 255)
    1e86:	29ff      	cmp	r1, #255	; 0xff
    1e88:	d051      	beq.n	1f2e <update_super_servo_single+0xc2>
					{
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*super_servo)/254) + 1280));
    1e8a:	20dc      	movs	r0, #220	; 0xdc
    1e8c:	0100      	lsls	r0, r0, #4
    1e8e:	4348      	muls	r0, r1
    1e90:	21fe      	movs	r1, #254	; 0xfe
    1e92:	4b2b      	ldr	r3, [pc, #172]	; (1f40 <update_super_servo_single+0xd4>)
    1e94:	4798      	blx	r3
    1e96:	23a0      	movs	r3, #160	; 0xa0
    1e98:	00db      	lsls	r3, r3, #3
    1e9a:	18c2      	adds	r2, r0, r3
    1e9c:	2103      	movs	r1, #3
    1e9e:	4829      	ldr	r0, [pc, #164]	; (1f44 <update_super_servo_single+0xd8>)
    1ea0:	4b29      	ldr	r3, [pc, #164]	; (1f48 <update_super_servo_single+0xdc>)
    1ea2:	4798      	blx	r3
    1ea4:	e010      	b.n	1ec8 <update_super_servo_single+0x5c>
		switch (port_no)
    1ea6:	2831      	cmp	r0, #49	; 0x31
    1ea8:	d10e      	bne.n	1ec8 <update_super_servo_single+0x5c>
					if(super_servo != 255)
    1eaa:	29ff      	cmp	r1, #255	; 0xff
    1eac:	d00d      	beq.n	1eca <update_super_servo_single+0x5e>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*super_servo)/254) + 1280));
    1eae:	20dc      	movs	r0, #220	; 0xdc
    1eb0:	0100      	lsls	r0, r0, #4
    1eb2:	4348      	muls	r0, r1
    1eb4:	21fe      	movs	r1, #254	; 0xfe
    1eb6:	4b22      	ldr	r3, [pc, #136]	; (1f40 <update_super_servo_single+0xd4>)
    1eb8:	4798      	blx	r3
    1eba:	23a0      	movs	r3, #160	; 0xa0
    1ebc:	00db      	lsls	r3, r3, #3
    1ebe:	18c2      	adds	r2, r0, r3
    1ec0:	2100      	movs	r1, #0
    1ec2:	4820      	ldr	r0, [pc, #128]	; (1f44 <update_super_servo_single+0xd8>)
    1ec4:	4b20      	ldr	r3, [pc, #128]	; (1f48 <update_super_servo_single+0xdc>)
    1ec6:	4798      	blx	r3
			default:
					break;
		}
	}
	
    1ec8:	bd10      	pop	{r4, pc}
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    1eca:	2200      	movs	r2, #0
    1ecc:	2100      	movs	r1, #0
    1ece:	481d      	ldr	r0, [pc, #116]	; (1f44 <update_super_servo_single+0xd8>)
    1ed0:	4b1d      	ldr	r3, [pc, #116]	; (1f48 <update_super_servo_single+0xdc>)
    1ed2:	4798      	blx	r3
    1ed4:	e7f8      	b.n	1ec8 <update_super_servo_single+0x5c>
					if(super_servo != 255)
    1ed6:	29ff      	cmp	r1, #255	; 0xff
    1ed8:	d00d      	beq.n	1ef6 <update_super_servo_single+0x8a>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*super_servo)/254) + 1280));
    1eda:	20dc      	movs	r0, #220	; 0xdc
    1edc:	0100      	lsls	r0, r0, #4
    1ede:	4348      	muls	r0, r1
    1ee0:	21fe      	movs	r1, #254	; 0xfe
    1ee2:	4b17      	ldr	r3, [pc, #92]	; (1f40 <update_super_servo_single+0xd4>)
    1ee4:	4798      	blx	r3
    1ee6:	23a0      	movs	r3, #160	; 0xa0
    1ee8:	00db      	lsls	r3, r3, #3
    1eea:	18c2      	adds	r2, r0, r3
    1eec:	2101      	movs	r1, #1
    1eee:	4815      	ldr	r0, [pc, #84]	; (1f44 <update_super_servo_single+0xd8>)
    1ef0:	4b15      	ldr	r3, [pc, #84]	; (1f48 <update_super_servo_single+0xdc>)
    1ef2:	4798      	blx	r3
    1ef4:	e7e8      	b.n	1ec8 <update_super_servo_single+0x5c>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1ef6:	2200      	movs	r2, #0
    1ef8:	2101      	movs	r1, #1
    1efa:	4812      	ldr	r0, [pc, #72]	; (1f44 <update_super_servo_single+0xd8>)
    1efc:	4b12      	ldr	r3, [pc, #72]	; (1f48 <update_super_servo_single+0xdc>)
    1efe:	4798      	blx	r3
    1f00:	e7e2      	b.n	1ec8 <update_super_servo_single+0x5c>
					if(super_servo != 255)
    1f02:	29ff      	cmp	r1, #255	; 0xff
    1f04:	d00d      	beq.n	1f22 <update_super_servo_single+0xb6>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*super_servo)/254) + 1280));
    1f06:	20dc      	movs	r0, #220	; 0xdc
    1f08:	0100      	lsls	r0, r0, #4
    1f0a:	4348      	muls	r0, r1
    1f0c:	21fe      	movs	r1, #254	; 0xfe
    1f0e:	4b0c      	ldr	r3, [pc, #48]	; (1f40 <update_super_servo_single+0xd4>)
    1f10:	4798      	blx	r3
    1f12:	23a0      	movs	r3, #160	; 0xa0
    1f14:	00db      	lsls	r3, r3, #3
    1f16:	18c2      	adds	r2, r0, r3
    1f18:	2102      	movs	r1, #2
    1f1a:	480a      	ldr	r0, [pc, #40]	; (1f44 <update_super_servo_single+0xd8>)
    1f1c:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <update_super_servo_single+0xdc>)
    1f1e:	4798      	blx	r3
    1f20:	e7d2      	b.n	1ec8 <update_super_servo_single+0x5c>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    1f22:	2200      	movs	r2, #0
    1f24:	2102      	movs	r1, #2
    1f26:	4807      	ldr	r0, [pc, #28]	; (1f44 <update_super_servo_single+0xd8>)
    1f28:	4b07      	ldr	r3, [pc, #28]	; (1f48 <update_super_servo_single+0xdc>)
    1f2a:	4798      	blx	r3
    1f2c:	e7cc      	b.n	1ec8 <update_super_servo_single+0x5c>
						tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    1f2e:	2200      	movs	r2, #0
    1f30:	2103      	movs	r1, #3
    1f32:	4804      	ldr	r0, [pc, #16]	; (1f44 <update_super_servo_single+0xd8>)
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <update_super_servo_single+0xdc>)
    1f36:	4798      	blx	r3
    1f38:	e7c6      	b.n	1ec8 <update_super_servo_single+0x5c>
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	200000ec 	.word	0x200000ec
    1f40:	00003701 	.word	0x00003701
    1f44:	20000268 	.word	0x20000268
    1f48:	00002461 	.word	0x00002461

00001f4c <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1f4c:	2000      	movs	r0, #0
    1f4e:	4770      	bx	lr

00001f50 <_tcc_set_compare_value>:

#define PORT_CLEAR_REGISTER_ADD     0x41004414UL
#define PORT_SET_REGISTER_ADD		0x41004418UL
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
    1f50:	b530      	push	{r4, r5, lr}
    1f52:	0004      	movs	r4, r0
	Assert(module_inst->hw);
	uint32_t B2_RGB = 0x08000000;
	uint32_t G2_RGB = 0x00000200;
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR_REGISTER  = PORT_CLEAR_REGISTER_ADD;
	
    1f54:	2017      	movs	r0, #23
	volatile uint32_t* const PORT_CLEAR_REGISTER  = PORT_CLEAR_REGISTER_ADD;
    1f56:	2903      	cmp	r1, #3
    1f58:	d900      	bls.n	1f5c <_tcc_set_compare_value+0xc>
		}
		*/
		*PORT_SET            = B2_RGB;
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
    1f5a:	bd30      	pop	{r4, r5, pc}
	/* Check index */
    1f5c:	4d0e      	ldr	r5, [pc, #56]	; (1f98 <_tcc_set_compare_value+0x48>)
    1f5e:	42aa      	cmp	r2, r5
    1f60:	d8fb      	bhi.n	1f5a <_tcc_set_compare_value+0xa>
	Assert(module_inst);
    1f62:	6820      	ldr	r0, [r4, #0]

    1f64:	2b00      	cmp	r3, #0
    1f66:	d00a      	beq.n	1f7e <_tcc_set_compare_value+0x2e>
		tcc_module->CCBUF[channel_index].reg = compare;
    1f68:	2480      	movs	r4, #128	; 0x80
    1f6a:	0324      	lsls	r4, r4, #12
    1f6c:	408c      	lsls	r4, r1
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
    1f6e:	6883      	ldr	r3, [r0, #8]
    1f70:	421c      	tst	r4, r3
    1f72:	d1fc      	bne.n	1f6e <_tcc_set_compare_value+0x1e>
		/*
    1f74:	311c      	adds	r1, #28
    1f76:	0089      	lsls	r1, r1, #2
    1f78:	500a      	str	r2, [r1, r0]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1f7a:	2000      	movs	r0, #0
    1f7c:	e7ed      	b.n	1f5a <_tcc_set_compare_value+0xa>
			
    1f7e:	2480      	movs	r4, #128	; 0x80
    1f80:	0064      	lsls	r4, r4, #1
    1f82:	408c      	lsls	r4, r1
    1f84:	6883      	ldr	r3, [r0, #8]
    1f86:	421c      	tst	r4, r3
    1f88:	d1fc      	bne.n	1f84 <_tcc_set_compare_value+0x34>
		*PORT_SET            = B2_RGB;
    1f8a:	3110      	adds	r1, #16
    1f8c:	0089      	lsls	r1, r1, #2
    1f8e:	1841      	adds	r1, r0, r1
    1f90:	604a      	str	r2, [r1, #4]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1f92:	2000      	movs	r0, #0
    1f94:	e7e1      	b.n	1f5a <_tcc_set_compare_value+0xa>
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	00ffffff 	.word	0x00ffffff

00001f9c <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    1f9c:	2300      	movs	r3, #0
    1f9e:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    1fa0:	4a4c      	ldr	r2, [pc, #304]	; (20d4 <tcc_get_config_defaults+0x138>)
    1fa2:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1fa4:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1fa6:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1fa8:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1faa:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1fac:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1fae:	61c3      	str	r3, [r0, #28]
    1fb0:	6203      	str	r3, [r0, #32]
    1fb2:	6243      	str	r3, [r0, #36]	; 0x24
    1fb4:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1fb6:	7503      	strb	r3, [r0, #20]
    1fb8:	7543      	strb	r3, [r0, #21]
    1fba:	7583      	strb	r3, [r0, #22]
    1fbc:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1fbe:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1fc0:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1fc2:	7403      	strb	r3, [r0, #16]
    1fc4:	7443      	strb	r3, [r0, #17]
    1fc6:	7483      	strb	r3, [r0, #18]
    1fc8:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1fca:	222c      	movs	r2, #44	; 0x2c
    1fcc:	5483      	strb	r3, [r0, r2]
    1fce:	3201      	adds	r2, #1
    1fd0:	5483      	strb	r3, [r0, r2]
    1fd2:	3201      	adds	r2, #1
    1fd4:	5483      	strb	r3, [r0, r2]
    1fd6:	3201      	adds	r2, #1
    1fd8:	5483      	strb	r3, [r0, r2]
    1fda:	3201      	adds	r2, #1
    1fdc:	5483      	strb	r3, [r0, r2]
    1fde:	3201      	adds	r2, #1
    1fe0:	5483      	strb	r3, [r0, r2]
    1fe2:	3201      	adds	r2, #1
    1fe4:	5483      	strb	r3, [r0, r2]
    1fe6:	3201      	adds	r2, #1
    1fe8:	5483      	strb	r3, [r0, r2]
    1fea:	3201      	adds	r2, #1
    1fec:	5483      	strb	r3, [r0, r2]
    1fee:	3201      	adds	r2, #1
    1ff0:	5483      	strb	r3, [r0, r2]
    1ff2:	3201      	adds	r2, #1
    1ff4:	5483      	strb	r3, [r0, r2]
    1ff6:	3201      	adds	r2, #1
    1ff8:	5483      	strb	r3, [r0, r2]
    1ffa:	3201      	adds	r2, #1
    1ffc:	5483      	strb	r3, [r0, r2]
    1ffe:	3201      	adds	r2, #1
    2000:	5483      	strb	r3, [r0, r2]
    2002:	3201      	adds	r2, #1
    2004:	5483      	strb	r3, [r0, r2]
    2006:	3201      	adds	r2, #1
    2008:	5483      	strb	r3, [r0, r2]
    200a:	3201      	adds	r2, #1
    200c:	5483      	strb	r3, [r0, r2]
    200e:	3201      	adds	r2, #1
    2010:	5483      	strb	r3, [r0, r2]
    2012:	3201      	adds	r2, #1
    2014:	5483      	strb	r3, [r0, r2]
    2016:	3201      	adds	r2, #1
    2018:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    201a:	3201      	adds	r2, #1
    201c:	5483      	strb	r3, [r0, r2]
    201e:	3201      	adds	r2, #1
    2020:	5483      	strb	r3, [r0, r2]
    2022:	3201      	adds	r2, #1
    2024:	5483      	strb	r3, [r0, r2]
    2026:	3201      	adds	r2, #1
    2028:	5483      	strb	r3, [r0, r2]
    202a:	3201      	adds	r2, #1
    202c:	5483      	strb	r3, [r0, r2]
    202e:	3201      	adds	r2, #1
    2030:	5483      	strb	r3, [r0, r2]
    2032:	3201      	adds	r2, #1
    2034:	5483      	strb	r3, [r0, r2]
    2036:	3201      	adds	r2, #1
    2038:	5483      	strb	r3, [r0, r2]
    203a:	3201      	adds	r2, #1
    203c:	5483      	strb	r3, [r0, r2]
    203e:	3201      	adds	r2, #1
    2040:	5483      	strb	r3, [r0, r2]
    2042:	3201      	adds	r2, #1
    2044:	5483      	strb	r3, [r0, r2]
    2046:	3201      	adds	r2, #1
    2048:	5483      	strb	r3, [r0, r2]
    204a:	3201      	adds	r2, #1
    204c:	5483      	strb	r3, [r0, r2]
    204e:	3201      	adds	r2, #1
    2050:	5483      	strb	r3, [r0, r2]
    2052:	3201      	adds	r2, #1
    2054:	5483      	strb	r3, [r0, r2]
    2056:	3201      	adds	r2, #1
    2058:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    205a:	3201      	adds	r2, #1
    205c:	5483      	strb	r3, [r0, r2]
    205e:	3201      	adds	r2, #1
    2060:	5483      	strb	r3, [r0, r2]
    2062:	3201      	adds	r2, #1
    2064:	5483      	strb	r3, [r0, r2]
    2066:	3201      	adds	r2, #1
    2068:	5483      	strb	r3, [r0, r2]
    206a:	3201      	adds	r2, #1
    206c:	5483      	strb	r3, [r0, r2]
    206e:	3201      	adds	r2, #1
    2070:	5483      	strb	r3, [r0, r2]
    2072:	3201      	adds	r2, #1
    2074:	5483      	strb	r3, [r0, r2]
    2076:	3201      	adds	r2, #1
    2078:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    207a:	3241      	adds	r2, #65	; 0x41
    207c:	5483      	strb	r3, [r0, r2]
    207e:	6583      	str	r3, [r0, #88]	; 0x58
    2080:	6783      	str	r3, [r0, #120]	; 0x78
    2082:	3201      	adds	r2, #1
    2084:	5483      	strb	r3, [r0, r2]
    2086:	65c3      	str	r3, [r0, #92]	; 0x5c
    2088:	67c3      	str	r3, [r0, #124]	; 0x7c
    208a:	3201      	adds	r2, #1
    208c:	5483      	strb	r3, [r0, r2]
    208e:	6603      	str	r3, [r0, #96]	; 0x60
    2090:	3a1a      	subs	r2, #26
    2092:	5083      	str	r3, [r0, r2]
    2094:	321b      	adds	r2, #27
    2096:	5483      	strb	r3, [r0, r2]
    2098:	6643      	str	r3, [r0, #100]	; 0x64
    209a:	3a17      	subs	r2, #23
    209c:	5083      	str	r3, [r0, r2]
    209e:	3218      	adds	r2, #24
    20a0:	5483      	strb	r3, [r0, r2]
    20a2:	6683      	str	r3, [r0, #104]	; 0x68
    20a4:	3a14      	subs	r2, #20
    20a6:	5083      	str	r3, [r0, r2]
    20a8:	3215      	adds	r2, #21
    20aa:	5483      	strb	r3, [r0, r2]
    20ac:	66c3      	str	r3, [r0, #108]	; 0x6c
    20ae:	3a11      	subs	r2, #17
    20b0:	5083      	str	r3, [r0, r2]
    20b2:	3212      	adds	r2, #18
    20b4:	5483      	strb	r3, [r0, r2]
    20b6:	6703      	str	r3, [r0, #112]	; 0x70
    20b8:	3a0e      	subs	r2, #14
    20ba:	5083      	str	r3, [r0, r2]
    20bc:	320f      	adds	r2, #15
    20be:	5483      	strb	r3, [r0, r2]
    20c0:	6743      	str	r3, [r0, #116]	; 0x74
    20c2:	3a0b      	subs	r2, #11
    20c4:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    20c6:	2101      	movs	r1, #1
    20c8:	320c      	adds	r2, #12
    20ca:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    20cc:	3201      	adds	r2, #1
    20ce:	5483      	strb	r3, [r0, r2]
}
    20d0:	4770      	bx	lr
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00ffffff 	.word	0x00ffffff

000020d8 <tcc_init>:
{
    20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20da:	46de      	mov	lr, fp
    20dc:	4657      	mov	r7, sl
    20de:	464e      	mov	r6, r9
    20e0:	4645      	mov	r5, r8
    20e2:	b5e0      	push	{r5, r6, r7, lr}
    20e4:	b08d      	sub	sp, #52	; 0x34
    20e6:	0006      	movs	r6, r0
    20e8:	000c      	movs	r4, r1
    20ea:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    20ec:	0008      	movs	r0, r1
    20ee:	4bcd      	ldr	r3, [pc, #820]	; (2424 <tcc_init+0x34c>)
    20f0:	4798      	blx	r3
    20f2:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    20f4:	49cc      	ldr	r1, [pc, #816]	; (2428 <tcc_init+0x350>)
    20f6:	6a0a      	ldr	r2, [r1, #32]
    20f8:	2020      	movs	r0, #32
    20fa:	4302      	orrs	r2, r0
    20fc:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    20fe:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2100:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2102:	0792      	lsls	r2, r2, #30
    2104:	d506      	bpl.n	2114 <tcc_init+0x3c>
}
    2106:	b00d      	add	sp, #52	; 0x34
    2108:	bc3c      	pop	{r2, r3, r4, r5}
    210a:	4690      	mov	r8, r2
    210c:	4699      	mov	r9, r3
    210e:	46a2      	mov	sl, r4
    2110:	46ab      	mov	fp, r5
    2112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2114:	6822      	ldr	r2, [r4, #0]
    2116:	2701      	movs	r7, #1
    2118:	4017      	ands	r7, r2
    211a:	d1f4      	bne.n	2106 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    211c:	4ac3      	ldr	r2, [pc, #780]	; (242c <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    211e:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    2120:	6829      	ldr	r1, [r5, #0]
    2122:	4291      	cmp	r1, r2
    2124:	d8ef      	bhi.n	2106 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    2126:	6869      	ldr	r1, [r5, #4]
    2128:	4291      	cmp	r1, r2
    212a:	d8ec      	bhi.n	2106 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    212c:	69e9      	ldr	r1, [r5, #28]
    212e:	4291      	cmp	r1, r2
    2130:	d900      	bls.n	2134 <tcc_init+0x5c>
    2132:	e18b      	b.n	244c <tcc_init+0x374>
    2134:	6a29      	ldr	r1, [r5, #32]
    2136:	4291      	cmp	r1, r2
    2138:	d900      	bls.n	213c <tcc_init+0x64>
    213a:	e189      	b.n	2450 <tcc_init+0x378>
    213c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    213e:	4291      	cmp	r1, r2
    2140:	d900      	bls.n	2144 <tcc_init+0x6c>
    2142:	e187      	b.n	2454 <tcc_init+0x37c>
    2144:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2146:	4291      	cmp	r1, r2
    2148:	d900      	bls.n	214c <tcc_init+0x74>
    214a:	e185      	b.n	2458 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    214c:	7c2a      	ldrb	r2, [r5, #16]
    214e:	3a01      	subs	r2, #1
    2150:	4250      	negs	r0, r2
    2152:	4150      	adcs	r0, r2
    2154:	0602      	lsls	r2, r0, #24
    2156:	9201      	str	r2, [sp, #4]
    2158:	7c6a      	ldrb	r2, [r5, #17]
    215a:	2a01      	cmp	r2, #1
    215c:	d031      	beq.n	21c2 <tcc_init+0xea>
    215e:	7caa      	ldrb	r2, [r5, #18]
    2160:	2a01      	cmp	r2, #1
    2162:	d034      	beq.n	21ce <tcc_init+0xf6>
    2164:	7cea      	ldrb	r2, [r5, #19]
    2166:	2a01      	cmp	r2, #1
    2168:	d037      	beq.n	21da <tcc_init+0x102>
	if (config->run_in_standby) {
    216a:	22a1      	movs	r2, #161	; 0xa1
    216c:	5caa      	ldrb	r2, [r5, r2]
    216e:	2a00      	cmp	r2, #0
    2170:	d004      	beq.n	217c <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2172:	2280      	movs	r2, #128	; 0x80
    2174:	0112      	lsls	r2, r2, #4
    2176:	9901      	ldr	r1, [sp, #4]
    2178:	4311      	orrs	r1, r2
    217a:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    217c:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    217e:	1e51      	subs	r1, r2, #1
    2180:	418a      	sbcs	r2, r1
    2182:	0092      	lsls	r2, r2, #2
    2184:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2186:	7a6a      	ldrb	r2, [r5, #9]
    2188:	2a01      	cmp	r2, #1
    218a:	d02c      	beq.n	21e6 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    218c:	2235      	movs	r2, #53	; 0x35
    218e:	5caa      	ldrb	r2, [r5, r2]
    2190:	2a03      	cmp	r2, #3
    2192:	d900      	bls.n	2196 <tcc_init+0xbe>
    2194:	e162      	b.n	245c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    2196:	212c      	movs	r1, #44	; 0x2c
    2198:	5c69      	ldrb	r1, [r5, r1]
    219a:	290f      	cmp	r1, #15
    219c:	d900      	bls.n	21a0 <tcc_init+0xc8>
    219e:	e15d      	b.n	245c <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    21a0:	7b28      	ldrb	r0, [r5, #12]
    21a2:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    21a4:	7ae8      	ldrb	r0, [r5, #11]
    21a6:	9005      	str	r0, [sp, #20]
    21a8:	202d      	movs	r0, #45	; 0x2d
    21aa:	4682      	mov	sl, r0
    21ac:	44aa      	add	sl, r5
    21ae:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    21b0:	9702      	str	r7, [sp, #8]
    21b2:	4684      	mov	ip, r0
    21b4:	9606      	str	r6, [sp, #24]
    21b6:	000e      	movs	r6, r1
    21b8:	46a0      	mov	r8, r4
    21ba:	4654      	mov	r4, sl
    21bc:	46a9      	mov	r9, r5
    21be:	9307      	str	r3, [sp, #28]
    21c0:	e047      	b.n	2252 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    21c2:	2280      	movs	r2, #128	; 0x80
    21c4:	0492      	lsls	r2, r2, #18
    21c6:	9901      	ldr	r1, [sp, #4]
    21c8:	4311      	orrs	r1, r2
    21ca:	9101      	str	r1, [sp, #4]
    21cc:	e7c7      	b.n	215e <tcc_init+0x86>
    21ce:	2280      	movs	r2, #128	; 0x80
    21d0:	04d2      	lsls	r2, r2, #19
    21d2:	9901      	ldr	r1, [sp, #4]
    21d4:	4311      	orrs	r1, r2
    21d6:	9101      	str	r1, [sp, #4]
    21d8:	e7c4      	b.n	2164 <tcc_init+0x8c>
    21da:	2280      	movs	r2, #128	; 0x80
    21dc:	0512      	lsls	r2, r2, #20
    21de:	9901      	ldr	r1, [sp, #4]
    21e0:	4311      	orrs	r1, r2
    21e2:	9101      	str	r1, [sp, #4]
    21e4:	e7c1      	b.n	216a <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    21e6:	9903      	ldr	r1, [sp, #12]
    21e8:	4311      	orrs	r1, r2
    21ea:	9103      	str	r1, [sp, #12]
    21ec:	e7ce      	b.n	218c <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    21ee:	0292      	lsls	r2, r2, #10
    21f0:	25c0      	movs	r5, #192	; 0xc0
    21f2:	012d      	lsls	r5, r5, #4
    21f4:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    21f8:	790d      	ldrb	r5, [r1, #4]
    21fa:	2603      	movs	r6, #3
    21fc:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21fe:	4332      	orrs	r2, r6
    2200:	4655      	mov	r5, sl
    2202:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2204:	794e      	ldrb	r6, [r1, #5]
    2206:	0176      	lsls	r6, r6, #5
    2208:	2560      	movs	r5, #96	; 0x60
    220a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    220c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    220e:	798d      	ldrb	r5, [r1, #6]
    2210:	022d      	lsls	r5, r5, #8
    2212:	26c0      	movs	r6, #192	; 0xc0
    2214:	00b6      	lsls	r6, r6, #2
    2216:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2218:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    221a:	79cd      	ldrb	r5, [r1, #7]
    221c:	032d      	lsls	r5, r5, #12
    221e:	26e0      	movs	r6, #224	; 0xe0
    2220:	01f6      	lsls	r6, r6, #7
    2222:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2224:	432a      	orrs	r2, r5
    2226:	4310      	orrs	r0, r2
    2228:	4303      	orrs	r3, r0
    222a:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    222c:	ab08      	add	r3, sp, #32
    222e:	4662      	mov	r2, ip
    2230:	2008      	movs	r0, #8
    2232:	181b      	adds	r3, r3, r0
    2234:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2236:	2a04      	cmp	r2, #4
    2238:	d028      	beq.n	228c <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    223a:	7c8a      	ldrb	r2, [r1, #18]
    223c:	2a03      	cmp	r2, #3
    223e:	d900      	bls.n	2242 <tcc_init+0x16a>
    2240:	e10c      	b.n	245c <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    2242:	7a4e      	ldrb	r6, [r1, #9]
    2244:	340a      	adds	r4, #10
    2246:	2304      	movs	r3, #4
    2248:	469a      	mov	sl, r3
    224a:	44d4      	add	ip, sl
    224c:	2e0f      	cmp	r6, #15
    224e:	d900      	bls.n	2252 <tcc_init+0x17a>
    2250:	e104      	b.n	245c <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2252:	0636      	lsls	r6, r6, #24
    2254:	23f0      	movs	r3, #240	; 0xf0
    2256:	051b      	lsls	r3, r3, #20
    2258:	401e      	ands	r6, r3
    225a:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    225c:	7825      	ldrb	r5, [r4, #0]
    225e:	042d      	lsls	r5, r5, #16
    2260:	23ff      	movs	r3, #255	; 0xff
    2262:	041b      	lsls	r3, r3, #16
    2264:	401d      	ands	r5, r3
    2266:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2268:	7863      	ldrb	r3, [r4, #1]
    226a:	2080      	movs	r0, #128	; 0x80
    226c:	2b00      	cmp	r3, #0
    226e:	d100      	bne.n	2272 <tcc_init+0x19a>
    2270:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2272:	788f      	ldrb	r7, [r1, #2]
    2274:	2308      	movs	r3, #8
    2276:	2f00      	cmp	r7, #0
    2278:	d100      	bne.n	227c <tcc_init+0x1a4>
    227a:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    227c:	78cf      	ldrb	r7, [r1, #3]
    227e:	46bb      	mov	fp, r7
    2280:	2710      	movs	r7, #16
    2282:	465d      	mov	r5, fp
    2284:	2d00      	cmp	r5, #0
    2286:	d1b2      	bne.n	21ee <tcc_init+0x116>
    2288:	9f02      	ldr	r7, [sp, #8]
    228a:	e7b0      	b.n	21ee <tcc_init+0x116>
    228c:	9e06      	ldr	r6, [sp, #24]
    228e:	4644      	mov	r4, r8
    2290:	464d      	mov	r5, r9
    2292:	9b07      	ldr	r3, [sp, #28]
    2294:	4648      	mov	r0, r9
    2296:	3050      	adds	r0, #80	; 0x50
    2298:	4649      	mov	r1, r9
    229a:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    229c:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    229e:	2780      	movs	r7, #128	; 0x80
    22a0:	027f      	lsls	r7, r7, #9
    22a2:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    22a4:	2701      	movs	r7, #1
    22a6:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    22a8:	2702      	movs	r7, #2
    22aa:	37ff      	adds	r7, #255	; 0xff
    22ac:	46ba      	mov	sl, r7
    22ae:	001f      	movs	r7, r3
    22b0:	0013      	movs	r3, r2
    22b2:	46a0      	mov	r8, r4
    22b4:	003c      	movs	r4, r7
    22b6:	e007      	b.n	22c8 <tcc_init+0x1f0>
    22b8:	4657      	mov	r7, sl
    22ba:	4097      	lsls	r7, r2
    22bc:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    22be:	3201      	adds	r2, #1
    22c0:	3001      	adds	r0, #1
    22c2:	3102      	adds	r1, #2
    22c4:	2a08      	cmp	r2, #8
    22c6:	d00e      	beq.n	22e6 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    22c8:	7807      	ldrb	r7, [r0, #0]
    22ca:	2f00      	cmp	r7, #0
    22cc:	d002      	beq.n	22d4 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    22ce:	4667      	mov	r7, ip
    22d0:	4097      	lsls	r7, r2
    22d2:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    22d4:	780f      	ldrb	r7, [r1, #0]
    22d6:	2f00      	cmp	r7, #0
    22d8:	d0f1      	beq.n	22be <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    22da:	2f02      	cmp	r7, #2
    22dc:	d0ec      	beq.n	22b8 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    22de:	464f      	mov	r7, r9
    22e0:	4097      	lsls	r7, r2
    22e2:	433b      	orrs	r3, r7
    22e4:	e7eb      	b.n	22be <tcc_init+0x1e6>
    22e6:	0022      	movs	r2, r4
    22e8:	4644      	mov	r4, r8
    22ea:	4698      	mov	r8, r3
    22ec:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    22ee:	7e6a      	ldrb	r2, [r5, #25]
    22f0:	0112      	lsls	r2, r2, #4
    22f2:	2130      	movs	r1, #48	; 0x30
    22f4:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    22f6:	7e28      	ldrb	r0, [r5, #24]
    22f8:	2207      	movs	r2, #7
    22fa:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    22fc:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    22fe:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    2300:	2080      	movs	r0, #128	; 0x80
    2302:	0240      	lsls	r0, r0, #9
    2304:	000f      	movs	r7, r1
    2306:	e002      	b.n	230e <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2308:	3201      	adds	r2, #1
    230a:	2a04      	cmp	r2, #4
    230c:	d007      	beq.n	231e <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    230e:	18a9      	adds	r1, r5, r2
    2310:	7d09      	ldrb	r1, [r1, #20]
    2312:	2900      	cmp	r1, #0
    2314:	d0f8      	beq.n	2308 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    2316:	0001      	movs	r1, r0
    2318:	4091      	lsls	r1, r2
    231a:	430f      	orrs	r7, r1
    231c:	e7f4      	b.n	2308 <tcc_init+0x230>
    231e:	46b9      	mov	r9, r7
    2320:	1d32      	adds	r2, r6, #4
    2322:	0030      	movs	r0, r6
    2324:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    2326:	2100      	movs	r1, #0
    2328:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    232a:	4290      	cmp	r0, r2
    232c:	d1fc      	bne.n	2328 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    232e:	2200      	movs	r2, #0
    2330:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2332:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2334:	009b      	lsls	r3, r3, #2
    2336:	4a3e      	ldr	r2, [pc, #248]	; (2430 <tcc_init+0x358>)
    2338:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    233a:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    233c:	23a0      	movs	r3, #160	; 0xa0
    233e:	5cea      	ldrb	r2, [r5, r3]
    2340:	3b64      	subs	r3, #100	; 0x64
    2342:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    2344:	a909      	add	r1, sp, #36	; 0x24
    2346:	7aab      	ldrb	r3, [r5, #10]
    2348:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    234a:	2011      	movs	r0, #17
    234c:	4b39      	ldr	r3, [pc, #228]	; (2434 <tcc_init+0x35c>)
    234e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2350:	2011      	movs	r0, #17
    2352:	4b39      	ldr	r3, [pc, #228]	; (2438 <tcc_init+0x360>)
    2354:	4798      	blx	r3
    2356:	002f      	movs	r7, r5
    2358:	3798      	adds	r7, #152	; 0x98
    235a:	002e      	movs	r6, r5
    235c:	3658      	adds	r6, #88	; 0x58
    235e:	2378      	movs	r3, #120	; 0x78
    2360:	469a      	mov	sl, r3
    2362:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2364:	3b77      	subs	r3, #119	; 0x77
    2366:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    2368:	0023      	movs	r3, r4
    236a:	4654      	mov	r4, sl
    236c:	469a      	mov	sl, r3
    236e:	e003      	b.n	2378 <tcc_init+0x2a0>
    2370:	3701      	adds	r7, #1
    2372:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2374:	42b4      	cmp	r4, r6
    2376:	d014      	beq.n	23a2 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    2378:	783b      	ldrb	r3, [r7, #0]
    237a:	2b00      	cmp	r3, #0
    237c:	d0f8      	beq.n	2370 <tcc_init+0x298>
    237e:	ab08      	add	r3, sp, #32
    2380:	465a      	mov	r2, fp
    2382:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2384:	2300      	movs	r3, #0
    2386:	aa08      	add	r2, sp, #32
    2388:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    238a:	0013      	movs	r3, r2
    238c:	2220      	movs	r2, #32
    238e:	18b2      	adds	r2, r6, r2
    2390:	7812      	ldrb	r2, [r2, #0]
    2392:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2394:	465a      	mov	r2, fp
    2396:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    2398:	7830      	ldrb	r0, [r6, #0]
    239a:	0019      	movs	r1, r3
    239c:	4b27      	ldr	r3, [pc, #156]	; (243c <tcc_init+0x364>)
    239e:	4798      	blx	r3
    23a0:	e7e6      	b.n	2370 <tcc_init+0x298>
    23a2:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    23a4:	9b04      	ldr	r3, [sp, #16]
    23a6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    23a8:	9a05      	ldr	r2, [sp, #20]
    23aa:	0212      	lsls	r2, r2, #8
    23ac:	4313      	orrs	r3, r2
    23ae:	9a01      	ldr	r2, [sp, #4]
    23b0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    23b2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    23b4:	2204      	movs	r2, #4
    23b6:	68a3      	ldr	r3, [r4, #8]
    23b8:	421a      	tst	r2, r3
    23ba:	d1fc      	bne.n	23b6 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    23bc:	23ff      	movs	r3, #255	; 0xff
    23be:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    23c0:	2204      	movs	r2, #4
    23c2:	68a3      	ldr	r3, [r4, #8]
    23c4:	421a      	tst	r2, r3
    23c6:	d1fc      	bne.n	23c2 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    23c8:	466b      	mov	r3, sp
    23ca:	7b1b      	ldrb	r3, [r3, #12]
    23cc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    23ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23d0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    23d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23d4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    23d6:	4643      	mov	r3, r8
    23d8:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    23da:	4a19      	ldr	r2, [pc, #100]	; (2440 <tcc_init+0x368>)
    23dc:	68a3      	ldr	r3, [r4, #8]
    23de:	4213      	tst	r3, r2
    23e0:	d1fc      	bne.n	23dc <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    23e2:	464b      	mov	r3, r9
    23e4:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    23e6:	2210      	movs	r2, #16
    23e8:	68a3      	ldr	r3, [r4, #8]
    23ea:	421a      	tst	r2, r3
    23ec:	d1fc      	bne.n	23e8 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    23ee:	682b      	ldr	r3, [r5, #0]
    23f0:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    23f2:	4a14      	ldr	r2, [pc, #80]	; (2444 <tcc_init+0x36c>)
    23f4:	68a3      	ldr	r3, [r4, #8]
    23f6:	4213      	tst	r3, r2
    23f8:	d1fc      	bne.n	23f4 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    23fa:	686b      	ldr	r3, [r5, #4]
    23fc:	6423      	str	r3, [r4, #64]	; 0x40
    23fe:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2400:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2402:	4811      	ldr	r0, [pc, #68]	; (2448 <tcc_init+0x370>)
    2404:	0002      	movs	r2, r0
    2406:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    2408:	68a3      	ldr	r3, [r4, #8]
    240a:	421a      	tst	r2, r3
    240c:	d1fc      	bne.n	2408 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    240e:	cd04      	ldmia	r5!, {r2}
    2410:	000b      	movs	r3, r1
    2412:	3310      	adds	r3, #16
    2414:	009b      	lsls	r3, r3, #2
    2416:	18e3      	adds	r3, r4, r3
    2418:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    241a:	3101      	adds	r1, #1
    241c:	2904      	cmp	r1, #4
    241e:	d1f1      	bne.n	2404 <tcc_init+0x32c>
	return STATUS_OK;
    2420:	2000      	movs	r0, #0
    2422:	e670      	b.n	2106 <tcc_init+0x2e>
    2424:	00001f4d 	.word	0x00001f4d
    2428:	40000400 	.word	0x40000400
    242c:	00ffffff 	.word	0x00ffffff
    2430:	200002a8 	.word	0x200002a8
    2434:	00003305 	.word	0x00003305
    2438:	00003279 	.word	0x00003279
    243c:	000033fd 	.word	0x000033fd
    2440:	00020040 	.word	0x00020040
    2444:	00040080 	.word	0x00040080
    2448:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    244c:	2017      	movs	r0, #23
    244e:	e65a      	b.n	2106 <tcc_init+0x2e>
    2450:	2017      	movs	r0, #23
    2452:	e658      	b.n	2106 <tcc_init+0x2e>
    2454:	2017      	movs	r0, #23
    2456:	e656      	b.n	2106 <tcc_init+0x2e>
    2458:	2017      	movs	r0, #23
    245a:	e654      	b.n	2106 <tcc_init+0x2e>
    245c:	2017      	movs	r0, #23
    245e:	e652      	b.n	2106 <tcc_init+0x2e>

00002460 <tcc_set_compare_value>:
 * \brief Sets a TCC module compare value.
 *
 * Writes a compare value to the given TCC module compare/capture channel.
 *
 * If double buffering is enabled it always write to the buffer
 * register. The value will then be updated immediately by calling
    2460:	b510      	push	{r4, lr}
 * \ref tcc_force_double_buffer_update(), or be updated when the lock update bit
 * is cleared and the UPDATE condition happen.
 *
 * \param[in]  module_inst    Pointer to the software module instance struct
    2462:	233c      	movs	r3, #60	; 0x3c
    2464:	5cc3      	ldrb	r3, [r0, r3]
    2466:	4c01      	ldr	r4, [pc, #4]	; (246c <tcc_set_compare_value+0xc>)
    2468:	47a0      	blx	r4
 * \param[in]  channel_index  Index of the compare channel to write to
 * \param[in]  compare        New compare value to set
    246a:	bd10      	pop	{r4, pc}
    246c:	00001f51 	.word	0x00001f51

00002470 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2470:	b5f0      	push	{r4, r5, r6, r7, lr}
    2472:	46c6      	mov	lr, r8
    2474:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2476:	0080      	lsls	r0, r0, #2
    2478:	4b0e      	ldr	r3, [pc, #56]	; (24b4 <_tcc_interrupt_handler+0x44>)
    247a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    247c:	683b      	ldr	r3, [r7, #0]
    247e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2484:	4013      	ands	r3, r2
    2486:	401e      	ands	r6, r3
    2488:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    248a:	4b0b      	ldr	r3, [pc, #44]	; (24b8 <_tcc_interrupt_handler+0x48>)
    248c:	4698      	mov	r8, r3
    248e:	e002      	b.n	2496 <_tcc_interrupt_handler+0x26>
    2490:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2492:	2c30      	cmp	r4, #48	; 0x30
    2494:	d00a      	beq.n	24ac <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2496:	4643      	mov	r3, r8
    2498:	58e5      	ldr	r5, [r4, r3]
    249a:	4235      	tst	r5, r6
    249c:	d0f8      	beq.n	2490 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    249e:	193b      	adds	r3, r7, r4
    24a0:	685b      	ldr	r3, [r3, #4]
    24a2:	0038      	movs	r0, r7
    24a4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    24a6:	683b      	ldr	r3, [r7, #0]
    24a8:	62dd      	str	r5, [r3, #44]	; 0x2c
    24aa:	e7f1      	b.n	2490 <_tcc_interrupt_handler+0x20>
		}
	}
}
    24ac:	bc04      	pop	{r2}
    24ae:	4690      	mov	r8, r2
    24b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	200002a8 	.word	0x200002a8
    24b8:	00003ba0 	.word	0x00003ba0

000024bc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    24bc:	b510      	push	{r4, lr}
    24be:	2000      	movs	r0, #0
    24c0:	4b01      	ldr	r3, [pc, #4]	; (24c8 <TCC0_Handler+0xc>)
    24c2:	4798      	blx	r3
    24c4:	bd10      	pop	{r4, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	00002471 	.word	0x00002471

000024cc <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    24cc:	4b06      	ldr	r3, [pc, #24]	; (24e8 <_tc_get_inst_index+0x1c>)
    24ce:	4298      	cmp	r0, r3
    24d0:	d008      	beq.n	24e4 <_tc_get_inst_index+0x18>
    24d2:	4a06      	ldr	r2, [pc, #24]	; (24ec <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    24d4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    24d6:	4290      	cmp	r0, r2
    24d8:	d001      	beq.n	24de <_tc_get_inst_index+0x12>
}
    24da:	0018      	movs	r0, r3
    24dc:	4770      	bx	lr
    24de:	3301      	adds	r3, #1
			return i;
    24e0:	b2db      	uxtb	r3, r3
    24e2:	e7fa      	b.n	24da <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    24e4:	2300      	movs	r3, #0
    24e6:	e7fb      	b.n	24e0 <_tc_get_inst_index+0x14>
    24e8:	42001800 	.word	0x42001800
    24ec:	42001c00 	.word	0x42001c00

000024f0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    24f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f2:	b085      	sub	sp, #20
    24f4:	0004      	movs	r4, r0
    24f6:	000d      	movs	r5, r1
    24f8:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    24fa:	0008      	movs	r0, r1
    24fc:	4b82      	ldr	r3, [pc, #520]	; (2708 <tc_init+0x218>)
    24fe:	4798      	blx	r3
    2500:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2502:	ab03      	add	r3, sp, #12
    2504:	2212      	movs	r2, #18
    2506:	701a      	strb	r2, [r3, #0]
    2508:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    250a:	ab02      	add	r3, sp, #8
    250c:	322e      	adds	r2, #46	; 0x2e
    250e:	801a      	strh	r2, [r3, #0]
    2510:	3240      	adds	r2, #64	; 0x40
    2512:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2514:	2300      	movs	r3, #0
    2516:	60a3      	str	r3, [r4, #8]
    2518:	60e3      	str	r3, [r4, #12]
    251a:	6123      	str	r3, [r4, #16]
    251c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    251e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2520:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2522:	0082      	lsls	r2, r0, #2
    2524:	4b79      	ldr	r3, [pc, #484]	; (270c <tc_init+0x21c>)
    2526:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2528:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    252a:	78b3      	ldrb	r3, [r6, #2]
    252c:	2b08      	cmp	r3, #8
    252e:	d006      	beq.n	253e <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2530:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2532:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2534:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2536:	07db      	lsls	r3, r3, #31
    2538:	d505      	bpl.n	2546 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    253a:	b005      	add	sp, #20
    253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    253e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2540:	07fa      	lsls	r2, r7, #31
    2542:	d4fa      	bmi.n	253a <tc_init+0x4a>
    2544:	e7f4      	b.n	2530 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2546:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2548:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    254a:	06db      	lsls	r3, r3, #27
    254c:	d4f5      	bmi.n	253a <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    254e:	882b      	ldrh	r3, [r5, #0]
    2550:	079b      	lsls	r3, r3, #30
    2552:	d4f2      	bmi.n	253a <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    2554:	7c33      	ldrb	r3, [r6, #16]
    2556:	2b00      	cmp	r3, #0
    2558:	d000      	beq.n	255c <tc_init+0x6c>
    255a:	e07a      	b.n	2652 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    255c:	7f33      	ldrb	r3, [r6, #28]
    255e:	2b00      	cmp	r3, #0
    2560:	d000      	beq.n	2564 <tc_init+0x74>
    2562:	e082      	b.n	266a <tc_init+0x17a>
    2564:	496a      	ldr	r1, [pc, #424]	; (2710 <tc_init+0x220>)
    2566:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2568:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    256a:	ab02      	add	r3, sp, #8
    256c:	5ad3      	ldrh	r3, [r2, r3]
    256e:	4303      	orrs	r3, r0
    2570:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2572:	78b3      	ldrb	r3, [r6, #2]
    2574:	2b08      	cmp	r3, #8
    2576:	d100      	bne.n	257a <tc_init+0x8a>
    2578:	e087      	b.n	268a <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    257a:	7833      	ldrb	r3, [r6, #0]
    257c:	466a      	mov	r2, sp
    257e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2580:	ab03      	add	r3, sp, #12
    2582:	5ddf      	ldrb	r7, [r3, r7]
    2584:	4669      	mov	r1, sp
    2586:	0038      	movs	r0, r7
    2588:	4b62      	ldr	r3, [pc, #392]	; (2714 <tc_init+0x224>)
    258a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    258c:	0038      	movs	r0, r7
    258e:	4b62      	ldr	r3, [pc, #392]	; (2718 <tc_init+0x228>)
    2590:	4798      	blx	r3
	ctrla_tmp =
    2592:	8931      	ldrh	r1, [r6, #8]
    2594:	88b3      	ldrh	r3, [r6, #4]
    2596:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2598:	78b1      	ldrb	r1, [r6, #2]
    259a:	79b2      	ldrb	r2, [r6, #6]
    259c:	4311      	orrs	r1, r2
	ctrla_tmp =
    259e:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    25a0:	7873      	ldrb	r3, [r6, #1]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d002      	beq.n	25ac <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    25a6:	2380      	movs	r3, #128	; 0x80
    25a8:	011b      	lsls	r3, r3, #4
    25aa:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ac:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25ae:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25b0:	b25b      	sxtb	r3, r3
    25b2:	2b00      	cmp	r3, #0
    25b4:	dbfb      	blt.n	25ae <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    25b6:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    25b8:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    25ba:	1e4b      	subs	r3, r1, #1
    25bc:	4199      	sbcs	r1, r3
    25be:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    25c0:	7bb3      	ldrb	r3, [r6, #14]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d001      	beq.n	25ca <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25c6:	2301      	movs	r3, #1
    25c8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25cc:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25ce:	b25b      	sxtb	r3, r3
    25d0:	2b00      	cmp	r3, #0
    25d2:	dbfb      	blt.n	25cc <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25d4:	23ff      	movs	r3, #255	; 0xff
    25d6:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    25d8:	2900      	cmp	r1, #0
    25da:	d005      	beq.n	25e8 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25de:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    25e0:	b25b      	sxtb	r3, r3
    25e2:	2b00      	cmp	r3, #0
    25e4:	dbfb      	blt.n	25de <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25e6:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    25e8:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    25ea:	7af3      	ldrb	r3, [r6, #11]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d001      	beq.n	25f4 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25f0:	2310      	movs	r3, #16
    25f2:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    25f4:	7b33      	ldrb	r3, [r6, #12]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d001      	beq.n	25fe <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25fa:	2320      	movs	r3, #32
    25fc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2600:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2602:	b25b      	sxtb	r3, r3
    2604:	2b00      	cmp	r3, #0
    2606:	dbfb      	blt.n	2600 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2608:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    260a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    260c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    260e:	b25b      	sxtb	r3, r3
    2610:	2b00      	cmp	r3, #0
    2612:	dbfb      	blt.n	260c <tc_init+0x11c>
	switch (module_inst->counter_size) {
    2614:	7923      	ldrb	r3, [r4, #4]
    2616:	2b04      	cmp	r3, #4
    2618:	d03f      	beq.n	269a <tc_init+0x1aa>
    261a:	2b08      	cmp	r3, #8
    261c:	d05e      	beq.n	26dc <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    261e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2620:	2b00      	cmp	r3, #0
    2622:	d000      	beq.n	2626 <tc_init+0x136>
    2624:	e789      	b.n	253a <tc_init+0x4a>
    2626:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2628:	b25b      	sxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	dbfb      	blt.n	2626 <tc_init+0x136>
				= config->counter_16_bit.value;
    262e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2630:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2632:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2634:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2636:	b25b      	sxtb	r3, r3
    2638:	2b00      	cmp	r3, #0
    263a:	dbfb      	blt.n	2634 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    263c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    263e:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2640:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2642:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2644:	b25b      	sxtb	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	dbfb      	blt.n	2642 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    264a:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    264c:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    264e:	2000      	movs	r0, #0
    2650:	e773      	b.n	253a <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2652:	a901      	add	r1, sp, #4
    2654:	2301      	movs	r3, #1
    2656:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2658:	2200      	movs	r2, #0
    265a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    265c:	7e32      	ldrb	r2, [r6, #24]
    265e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2660:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2662:	7d30      	ldrb	r0, [r6, #20]
    2664:	4b2d      	ldr	r3, [pc, #180]	; (271c <tc_init+0x22c>)
    2666:	4798      	blx	r3
    2668:	e778      	b.n	255c <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    266a:	a901      	add	r1, sp, #4
    266c:	2301      	movs	r3, #1
    266e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2670:	2200      	movs	r2, #0
    2672:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2674:	3224      	adds	r2, #36	; 0x24
    2676:	18b2      	adds	r2, r6, r2
    2678:	7812      	ldrb	r2, [r2, #0]
    267a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    267c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    267e:	331f      	adds	r3, #31
    2680:	18f3      	adds	r3, r6, r3
    2682:	7818      	ldrb	r0, [r3, #0]
    2684:	4b25      	ldr	r3, [pc, #148]	; (271c <tc_init+0x22c>)
    2686:	4798      	blx	r3
    2688:	e76c      	b.n	2564 <tc_init+0x74>
    268a:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    268c:	1c7a      	adds	r2, r7, #1
    268e:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2690:	ab02      	add	r3, sp, #8
    2692:	5ad3      	ldrh	r3, [r2, r3]
    2694:	4303      	orrs	r3, r0
    2696:	620b      	str	r3, [r1, #32]
    2698:	e76f      	b.n	257a <tc_init+0x8a>
    269a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    269c:	b25b      	sxtb	r3, r3
    269e:	2b00      	cmp	r3, #0
    26a0:	dbfb      	blt.n	269a <tc_init+0x1aa>
					config->counter_8_bit.value;
    26a2:	2328      	movs	r3, #40	; 0x28
    26a4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    26a6:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26a8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26aa:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26ac:	b25b      	sxtb	r3, r3
    26ae:	2b00      	cmp	r3, #0
    26b0:	dbfb      	blt.n	26aa <tc_init+0x1ba>
					config->counter_8_bit.period;
    26b2:	2329      	movs	r3, #41	; 0x29
    26b4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    26b6:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ba:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26bc:	b25b      	sxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	dbfb      	blt.n	26ba <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    26c2:	232a      	movs	r3, #42	; 0x2a
    26c4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    26c6:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ca:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26cc:	b25b      	sxtb	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	dbfb      	blt.n	26ca <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    26d2:	232b      	movs	r3, #43	; 0x2b
    26d4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    26d6:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    26d8:	2000      	movs	r0, #0
    26da:	e72e      	b.n	253a <tc_init+0x4a>
    26dc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26de:	b25b      	sxtb	r3, r3
    26e0:	2b00      	cmp	r3, #0
    26e2:	dbfb      	blt.n	26dc <tc_init+0x1ec>
				= config->counter_32_bit.value;
    26e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    26e6:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ea:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26ec:	b25b      	sxtb	r3, r3
    26ee:	2b00      	cmp	r3, #0
    26f0:	dbfb      	blt.n	26ea <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    26f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    26f4:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26f8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26fa:	b25b      	sxtb	r3, r3
    26fc:	2b00      	cmp	r3, #0
    26fe:	dbfb      	blt.n	26f8 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    2700:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2702:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2704:	2000      	movs	r0, #0
    2706:	e718      	b.n	253a <tc_init+0x4a>
    2708:	000024cd 	.word	0x000024cd
    270c:	200002ac 	.word	0x200002ac
    2710:	40000400 	.word	0x40000400
    2714:	00003305 	.word	0x00003305
    2718:	00003279 	.word	0x00003279
    271c:	000033fd 	.word	0x000033fd

00002720 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2720:	1c93      	adds	r3, r2, #2
    2722:	009b      	lsls	r3, r3, #2
    2724:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2726:	2a02      	cmp	r2, #2
    2728:	d009      	beq.n	273e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    272a:	2a03      	cmp	r2, #3
    272c:	d00c      	beq.n	2748 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    272e:	2301      	movs	r3, #1
    2730:	4093      	lsls	r3, r2
    2732:	001a      	movs	r2, r3
    2734:	7e03      	ldrb	r3, [r0, #24]
    2736:	4313      	orrs	r3, r2
    2738:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    273a:	2000      	movs	r0, #0
    273c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    273e:	7e03      	ldrb	r3, [r0, #24]
    2740:	2210      	movs	r2, #16
    2742:	4313      	orrs	r3, r2
    2744:	7603      	strb	r3, [r0, #24]
    2746:	e7f8      	b.n	273a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2748:	7e03      	ldrb	r3, [r0, #24]
    274a:	2220      	movs	r2, #32
    274c:	4313      	orrs	r3, r2
    274e:	7603      	strb	r3, [r0, #24]
    2750:	e7f3      	b.n	273a <tc_register_callback+0x1a>
	...

00002754 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2756:	46de      	mov	lr, fp
    2758:	4657      	mov	r7, sl
    275a:	464e      	mov	r6, r9
    275c:	4645      	mov	r5, r8
    275e:	b5e0      	push	{r5, r6, r7, lr}
 



	/* Get device instance from the look-up table */
	struct tc_module *module = (struct tc_module *)_tc_instances[instance];
    2760:	0080      	lsls	r0, r0, #2
    2762:	4ba6      	ldr	r3, [pc, #664]	; (29fc <_tc_interrupt_handler+0x2a8>)
    2764:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg & module->register_callback_mask & module->enable_callback_mask;
    2766:	6823      	ldr	r3, [r4, #0]
    2768:	7b9b      	ldrb	r3, [r3, #14]
    276a:	7e22      	ldrb	r2, [r4, #24]
    276c:	7e61      	ldrb	r1, [r4, #25]
    276e:	4011      	ands	r1, r2
    2770:	4019      	ands	r1, r3
			
	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2772:	06cb      	lsls	r3, r1, #27
    2774:	d400      	bmi.n	2778 <_tc_interrupt_handler+0x24>
    2776:	e086      	b.n	2886 <_tc_interrupt_handler+0x132>
		/* Invoke registered and enabled callback function */
		//(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
		/* Clear interrupt flag */
		//module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
		
		if(first_time == false)
    2778:	4ba1      	ldr	r3, [pc, #644]	; (2a00 <_tc_interrupt_handler+0x2ac>)
    277a:	781b      	ldrb	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d17c      	bne.n	287a <_tc_interrupt_handler+0x126>
		{
			if(compare_array_ID != N_valid_compares)
    2780:	4ba0      	ldr	r3, [pc, #640]	; (2a04 <_tc_interrupt_handler+0x2b0>)
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	4aa0      	ldr	r2, [pc, #640]	; (2a08 <_tc_interrupt_handler+0x2b4>)
    2786:	7812      	ldrb	r2, [r2, #0]
    2788:	b2db      	uxtb	r3, r3
    278a:	4293      	cmp	r3, r2
    278c:	d011      	beq.n	27b2 <_tc_interrupt_handler+0x5e>
			{
				//port_pin_set_output_level(LED1, RGB_ON);
				//port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
				*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    278e:	489f      	ldr	r0, [pc, #636]	; (2a0c <_tc_interrupt_handler+0x2b8>)
    2790:	7803      	ldrb	r3, [r0, #0]
    2792:	b2db      	uxtb	r3, r3
    2794:	1c5a      	adds	r2, r3, #1
    2796:	b2d2      	uxtb	r2, r2
    2798:	7002      	strb	r2, [r0, #0]
    279a:	4a9d      	ldr	r2, [pc, #628]	; (2a10 <_tc_interrupt_handler+0x2bc>)
    279c:	5cd2      	ldrb	r2, [r2, r3]
    279e:	b2d2      	uxtb	r2, r2
    27a0:	2301      	movs	r3, #1
    27a2:	4093      	lsls	r3, r2
    27a4:	4a9b      	ldr	r2, [pc, #620]	; (2a14 <_tc_interrupt_handler+0x2c0>)
    27a6:	6013      	str	r3, [r2, #0]
				compare_array_ID = compare_array_ID + 1;
    27a8:	4a96      	ldr	r2, [pc, #600]	; (2a04 <_tc_interrupt_handler+0x2b0>)
    27aa:	7813      	ldrb	r3, [r2, #0]
    27ac:	3301      	adds	r3, #1
    27ae:	b2db      	uxtb	r3, r3
    27b0:	7013      	strb	r3, [r2, #0]
			}
			
			if(compare_array_ID < N_valid_compares )
    27b2:	4b94      	ldr	r3, [pc, #592]	; (2a04 <_tc_interrupt_handler+0x2b0>)
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	4a94      	ldr	r2, [pc, #592]	; (2a08 <_tc_interrupt_handler+0x2b4>)
    27b8:	7812      	ldrb	r2, [r2, #0]
    27ba:	b2db      	uxtb	r3, r3
    27bc:	4293      	cmp	r3, r2
    27be:	d25f      	bcs.n	2880 <_tc_interrupt_handler+0x12c>
			{
				compare_value_last    = compare_array[compare_array_ID - 1];
    27c0:	4d90      	ldr	r5, [pc, #576]	; (2a04 <_tc_interrupt_handler+0x2b0>)
    27c2:	782b      	ldrb	r3, [r5, #0]
    27c4:	3b01      	subs	r3, #1
    27c6:	4894      	ldr	r0, [pc, #592]	; (2a18 <_tc_interrupt_handler+0x2c4>)
    27c8:	5cc2      	ldrb	r2, [r0, r3]
    27ca:	b2d2      	uxtb	r2, r2
    27cc:	4b93      	ldr	r3, [pc, #588]	; (2a1c <_tc_interrupt_handler+0x2c8>)
    27ce:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[compare_array_ID];
    27d0:	782b      	ldrb	r3, [r5, #0]
    27d2:	b2db      	uxtb	r3, r3
    27d4:	5cc3      	ldrb	r3, [r0, r3]
    27d6:	b2db      	uxtb	r3, r3
    27d8:	4891      	ldr	r0, [pc, #580]	; (2a20 <_tc_interrupt_handler+0x2cc>)
    27da:	7003      	strb	r3, [r0, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    27dc:	429a      	cmp	r2, r3
    27de:	d136      	bne.n	284e <_tc_interrupt_handler+0xfa>
    27e0:	7828      	ldrb	r0, [r5, #0]
    27e2:	b2c0      	uxtb	r0, r0
    27e4:	4b88      	ldr	r3, [pc, #544]	; (2a08 <_tc_interrupt_handler+0x2b4>)
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	3b01      	subs	r3, #1
    27ea:	4298      	cmp	r0, r3
    27ec:	dc3c      	bgt.n	2868 <_tc_interrupt_handler+0x114>
				{
					//Enable the LED
					//port_pin_set_output_level(LED1, RGB_OFF);
					//port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    27ee:	4e87      	ldr	r6, [pc, #540]	; (2a0c <_tc_interrupt_handler+0x2b8>)
    27f0:	4b87      	ldr	r3, [pc, #540]	; (2a10 <_tc_interrupt_handler+0x2bc>)
    27f2:	4698      	mov	r8, r3
					compare_value_last	  = compare_array[compare_array_ID];
    27f4:	0028      	movs	r0, r5
    27f6:	4d88      	ldr	r5, [pc, #544]	; (2a18 <_tc_interrupt_handler+0x2c4>)
    27f8:	4b88      	ldr	r3, [pc, #544]	; (2a1c <_tc_interrupt_handler+0x2c8>)
    27fa:	469c      	mov	ip, r3
					compare_value_current = compare_array[++compare_array_ID];
    27fc:	4f88      	ldr	r7, [pc, #544]	; (2a20 <_tc_interrupt_handler+0x2cc>)
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    27fe:	4682      	mov	sl, r0
    2800:	4b81      	ldr	r3, [pc, #516]	; (2a08 <_tc_interrupt_handler+0x2b4>)
    2802:	4699      	mov	r9, r3
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    2804:	7833      	ldrb	r3, [r6, #0]
    2806:	b2db      	uxtb	r3, r3
    2808:	1c5a      	adds	r2, r3, #1
    280a:	b2d2      	uxtb	r2, r2
    280c:	7032      	strb	r2, [r6, #0]
    280e:	4642      	mov	r2, r8
    2810:	5cd2      	ldrb	r2, [r2, r3]
    2812:	b2d2      	uxtb	r2, r2
    2814:	2301      	movs	r3, #1
    2816:	4093      	lsls	r3, r2
    2818:	4a7e      	ldr	r2, [pc, #504]	; (2a14 <_tc_interrupt_handler+0x2c0>)
    281a:	6013      	str	r3, [r2, #0]
					compare_value_last	  = compare_array[compare_array_ID];
    281c:	7803      	ldrb	r3, [r0, #0]
    281e:	b2db      	uxtb	r3, r3
    2820:	5cea      	ldrb	r2, [r5, r3]
    2822:	b2d2      	uxtb	r2, r2
    2824:	4663      	mov	r3, ip
    2826:	701a      	strb	r2, [r3, #0]
					compare_value_current = compare_array[++compare_array_ID];
    2828:	7803      	ldrb	r3, [r0, #0]
    282a:	3301      	adds	r3, #1
    282c:	b2db      	uxtb	r3, r3
    282e:	7003      	strb	r3, [r0, #0]
    2830:	5ceb      	ldrb	r3, [r5, r3]
    2832:	b2db      	uxtb	r3, r3
    2834:	703b      	strb	r3, [r7, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    2836:	429a      	cmp	r2, r3
    2838:	d109      	bne.n	284e <_tc_interrupt_handler+0xfa>
    283a:	4652      	mov	r2, sl
    283c:	7812      	ldrb	r2, [r2, #0]
    283e:	b2d2      	uxtb	r2, r2
    2840:	4693      	mov	fp, r2
    2842:	464a      	mov	r2, r9
    2844:	7812      	ldrb	r2, [r2, #0]
    2846:	3a01      	subs	r2, #1
    2848:	4593      	cmp	fp, r2
    284a:	dddb      	ble.n	2804 <_tc_interrupt_handler+0xb0>
					compare_value_current = compare_array[++compare_array_ID];
    284c:	001a      	movs	r2, r3
				}
				if(compare_value_current != 255)
    284e:	2bff      	cmp	r3, #255	; 0xff
    2850:	d00c      	beq.n	286c <_tc_interrupt_handler+0x118>
				{
					//check sync
					while((*STATUS_REGISTER && MASK_SYNC) == true);
    2852:	4874      	ldr	r0, [pc, #464]	; (2a24 <_tc_interrupt_handler+0x2d0>)
    2854:	7802      	ldrb	r2, [r0, #0]
    2856:	2a00      	cmp	r2, #0
    2858:	d1fc      	bne.n	2854 <_tc_interrupt_handler+0x100>
					*COMPARE_REGISTER         =	compare_value_current;
    285a:	4a73      	ldr	r2, [pc, #460]	; (2a28 <_tc_interrupt_handler+0x2d4>)
    285c:	7013      	strb	r3, [r2, #0]
					*COUNT_REGISTER           =	compare_value_last;			
    285e:	4b6f      	ldr	r3, [pc, #444]	; (2a1c <_tc_interrupt_handler+0x2c8>)
    2860:	781a      	ldrb	r2, [r3, #0]
    2862:	4b72      	ldr	r3, [pc, #456]	; (2a2c <_tc_interrupt_handler+0x2d8>)
    2864:	701a      	strb	r2, [r3, #0]
    2866:	e00b      	b.n	2880 <_tc_interrupt_handler+0x12c>
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    2868:	0013      	movs	r3, r2
    286a:	e7f0      	b.n	284e <_tc_interrupt_handler+0xfa>
					//tc_set_count_value(module_inst, compare_value_last);
					//tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
				}
				else
				{
					while((*STATUS_REGISTER && MASK_SYNC) == true);
    286c:	486d      	ldr	r0, [pc, #436]	; (2a24 <_tc_interrupt_handler+0x2d0>)
    286e:	7803      	ldrb	r3, [r0, #0]
    2870:	2b00      	cmp	r3, #0
    2872:	d1fc      	bne.n	286e <_tc_interrupt_handler+0x11a>
					*COUNT_REGISTER         =	compare_value_last;
    2874:	4b6d      	ldr	r3, [pc, #436]	; (2a2c <_tc_interrupt_handler+0x2d8>)
    2876:	701a      	strb	r2, [r3, #0]
    2878:	e002      	b.n	2880 <_tc_interrupt_handler+0x12c>
			
			
		}
		else
		{
			first_time = false;
    287a:	2200      	movs	r2, #0
    287c:	4b60      	ldr	r3, [pc, #384]	; (2a00 <_tc_interrupt_handler+0x2ac>)
    287e:	701a      	strb	r2, [r3, #0]
			
		}
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2880:	2310      	movs	r3, #16
    2882:	6822      	ldr	r2, [r4, #0]
    2884:	7393      	strb	r3, [r2, #14]
	}
	
	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2886:	07cb      	lsls	r3, r1, #31
    2888:	d400      	bmi.n	288c <_tc_interrupt_handler+0x138>
    288a:	e0a6      	b.n	29da <_tc_interrupt_handler+0x286>
		/* Invoke registered and enabled callback function */
		//(module->callback[TC_CALLBACK_OVERFLOW])(module);
		/* Clear interrupt flag */
		serial_timeout_count++;
    288c:	4a68      	ldr	r2, [pc, #416]	; (2a30 <_tc_interrupt_handler+0x2dc>)
    288e:	7813      	ldrb	r3, [r2, #0]
    2890:	3301      	adds	r3, #1
    2892:	b2db      	uxtb	r3, r3
    2894:	7013      	strb	r3, [r2, #0]
		
		if(status_battery == true)
    2896:	4b67      	ldr	r3, [pc, #412]	; (2a34 <_tc_interrupt_handler+0x2e0>)
    2898:	781b      	ldrb	r3, [r3, #0]
    289a:	2b00      	cmp	r3, #0
    289c:	d025      	beq.n	28ea <_tc_interrupt_handler+0x196>
		{
			status_update_count++;
    289e:	4a66      	ldr	r2, [pc, #408]	; (2a38 <_tc_interrupt_handler+0x2e4>)
    28a0:	7813      	ldrb	r3, [r2, #0]
    28a2:	3301      	adds	r3, #1
    28a4:	b2db      	uxtb	r3, r3
    28a6:	7013      	strb	r3, [r2, #0]
			if(status_update_count > flexible_count)
    28a8:	4a64      	ldr	r2, [pc, #400]	; (2a3c <_tc_interrupt_handler+0x2e8>)
    28aa:	7812      	ldrb	r2, [r2, #0]
    28ac:	429a      	cmp	r2, r3
    28ae:	d21c      	bcs.n	28ea <_tc_interrupt_handler+0x196>
			{
				status_update_count = 0;
    28b0:	2200      	movs	r2, #0
    28b2:	4b61      	ldr	r3, [pc, #388]	; (2a38 <_tc_interrupt_handler+0x2e4>)
    28b4:	701a      	strb	r2, [r3, #0]
				if(battery_voltage < threshold_blink)
    28b6:	4b62      	ldr	r3, [pc, #392]	; (2a40 <_tc_interrupt_handler+0x2ec>)
    28b8:	781a      	ldrb	r2, [r3, #0]
    28ba:	b2d2      	uxtb	r2, r2
    28bc:	4b61      	ldr	r3, [pc, #388]	; (2a44 <_tc_interrupt_handler+0x2f0>)
    28be:	781b      	ldrb	r3, [r3, #0]
    28c0:	429a      	cmp	r2, r3
    28c2:	d234      	bcs.n	292e <_tc_interrupt_handler+0x1da>
				{
					flexible_count       =  MAX_STATUS_BLINK - ((threshold_blink- battery_voltage)*60/(80));
    28c4:	4a5e      	ldr	r2, [pc, #376]	; (2a40 <_tc_interrupt_handler+0x2ec>)
    28c6:	7812      	ldrb	r2, [r2, #0]
    28c8:	1a9b      	subs	r3, r3, r2
    28ca:	0118      	lsls	r0, r3, #4
    28cc:	1a18      	subs	r0, r3, r0
    28ce:	0080      	lsls	r0, r0, #2
    28d0:	2150      	movs	r1, #80	; 0x50
    28d2:	4b5d      	ldr	r3, [pc, #372]	; (2a48 <_tc_interrupt_handler+0x2f4>)
    28d4:	4798      	blx	r3
    28d6:	3041      	adds	r0, #65	; 0x41
    28d8:	4b58      	ldr	r3, [pc, #352]	; (2a3c <_tc_interrupt_handler+0x2e8>)
    28da:	7018      	strb	r0, [r3, #0]
					threshold_blink      =   MIN_BLINK_START - 5;//decrease the threshold
    28dc:	2269      	movs	r2, #105	; 0x69
    28de:	4b59      	ldr	r3, [pc, #356]	; (2a44 <_tc_interrupt_handler+0x2f0>)
    28e0:	701a      	strb	r2, [r3, #0]
					*PORT_TOGGLE          =  STATUS_LED_PIN;
    28e2:	2280      	movs	r2, #128	; 0x80
    28e4:	05d2      	lsls	r2, r2, #23
    28e6:	4b59      	ldr	r3, [pc, #356]	; (2a4c <_tc_interrupt_handler+0x2f8>)
    28e8:	601a      	str	r2, [r3, #0]
				}
			}
		}
		
		
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    28ea:	4b51      	ldr	r3, [pc, #324]	; (2a30 <_tc_interrupt_handler+0x2dc>)
    28ec:	781b      	ldrb	r3, [r3, #0]
    28ee:	b2db      	uxtb	r3, r3
    28f0:	2b01      	cmp	r3, #1
    28f2:	d905      	bls.n	2900 <_tc_interrupt_handler+0x1ac>
		{
			serial_timeout = true;
    28f4:	2201      	movs	r2, #1
    28f6:	4b56      	ldr	r3, [pc, #344]	; (2a50 <_tc_interrupt_handler+0x2fc>)
    28f8:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    28fa:	2200      	movs	r2, #0
    28fc:	4b4c      	ldr	r3, [pc, #304]	; (2a30 <_tc_interrupt_handler+0x2dc>)
    28fe:	701a      	strb	r2, [r3, #0]
		}
		
		*PORT_CLEAR_REGISTER						  = CLEAR_ORB_LEDS;
    2900:	4a54      	ldr	r2, [pc, #336]	; (2a54 <_tc_interrupt_handler+0x300>)
    2902:	4b55      	ldr	r3, [pc, #340]	; (2a58 <_tc_interrupt_handler+0x304>)
    2904:	601a      	str	r2, [r3, #0]
		if(update_compare_array == true)
    2906:	4b55      	ldr	r3, [pc, #340]	; (2a5c <_tc_interrupt_handler+0x308>)
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	2b00      	cmp	r3, #0
    290c:	d04b      	beq.n	29a6 <_tc_interrupt_handler+0x252>
		{
			//B2 on 
			//*PORT_SET = B2_RGB;
			if(int_enable == true)
    290e:	4b54      	ldr	r3, [pc, #336]	; (2a60 <_tc_interrupt_handler+0x30c>)
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d116      	bne.n	2944 <_tc_interrupt_handler+0x1f0>
			}
			
			//transfer_temp();
			//if(lock_temp_array == false)
			//{
				N_valid_compares = 0;
    2916:	2200      	movs	r2, #0
    2918:	4b3b      	ldr	r3, [pc, #236]	; (2a08 <_tc_interrupt_handler+0x2b4>)
    291a:	701a      	strb	r2, [r3, #0]
    291c:	2300      	movs	r3, #0
			
				for(i=0;i<NO_OF_LEDS;i++)
				{
					//N_valid_compares++;
				
					if(temp_compare_array[i] != 255)
    291e:	4a51      	ldr	r2, [pc, #324]	; (2a64 <_tc_interrupt_handler+0x310>)
    2920:	4690      	mov	r8, r2
					{
						N_valid_compares++;
    2922:	4839      	ldr	r0, [pc, #228]	; (2a08 <_tc_interrupt_handler+0x2b4>)
						//k++;
					}
				
					compare_array[i] = temp_compare_array[i] ;
    2924:	4694      	mov	ip, r2
    2926:	4f3c      	ldr	r7, [pc, #240]	; (2a18 <_tc_interrupt_handler+0x2c4>)
					pin_array[i]	 = temp_pin_array[i];
    2928:	4e4f      	ldr	r6, [pc, #316]	; (2a68 <_tc_interrupt_handler+0x314>)
    292a:	4d39      	ldr	r5, [pc, #228]	; (2a10 <_tc_interrupt_handler+0x2bc>)
    292c:	e02d      	b.n	298a <_tc_interrupt_handler+0x236>
					threshold_blink      =  MIN_BLINK_START;
    292e:	226e      	movs	r2, #110	; 0x6e
    2930:	4b44      	ldr	r3, [pc, #272]	; (2a44 <_tc_interrupt_handler+0x2f0>)
    2932:	701a      	strb	r2, [r3, #0]
					flexible_count       =  MAX_STATUS_BLINK;//
    2934:	3a2d      	subs	r2, #45	; 0x2d
    2936:	4b41      	ldr	r3, [pc, #260]	; (2a3c <_tc_interrupt_handler+0x2e8>)
    2938:	701a      	strb	r2, [r3, #0]
					*PORT_SET			 =  STATUS_LED_PIN;
    293a:	2280      	movs	r2, #128	; 0x80
    293c:	05d2      	lsls	r2, r2, #23
    293e:	4b35      	ldr	r3, [pc, #212]	; (2a14 <_tc_interrupt_handler+0x2c0>)
    2940:	601a      	str	r2, [r3, #0]
    2942:	e7d2      	b.n	28ea <_tc_interrupt_handler+0x196>
				int_enable = false;
    2944:	2200      	movs	r2, #0
    2946:	4b46      	ldr	r3, [pc, #280]	; (2a60 <_tc_interrupt_handler+0x30c>)
    2948:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    294a:	6820      	ldr	r0, [r4, #0]
    294c:	4b47      	ldr	r3, [pc, #284]	; (2a6c <_tc_interrupt_handler+0x318>)
    294e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2950:	4b47      	ldr	r3, [pc, #284]	; (2a70 <_tc_interrupt_handler+0x31c>)
    2952:	5c1b      	ldrb	r3, [r3, r0]
    2954:	221f      	movs	r2, #31
    2956:	401a      	ands	r2, r3
    2958:	2301      	movs	r3, #1
    295a:	4093      	lsls	r3, r2
    295c:	4a45      	ldr	r2, [pc, #276]	; (2a74 <_tc_interrupt_handler+0x320>)
    295e:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2960:	7e63      	ldrb	r3, [r4, #25]
    2962:	2210      	movs	r2, #16
    2964:	4313      	orrs	r3, r2
    2966:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2968:	2310      	movs	r3, #16
    296a:	6822      	ldr	r2, [r4, #0]
    296c:	7353      	strb	r3, [r2, #13]
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    296e:	3301      	adds	r3, #1
    2970:	6822      	ldr	r2, [r4, #0]
    2972:	7393      	strb	r3, [r2, #14]
    2974:	e7cf      	b.n	2916 <_tc_interrupt_handler+0x1c2>
					compare_array[i] = temp_compare_array[i] ;
    2976:	4661      	mov	r1, ip
    2978:	5c89      	ldrb	r1, [r1, r2]
    297a:	b2c9      	uxtb	r1, r1
    297c:	54b9      	strb	r1, [r7, r2]
					pin_array[i]	 = temp_pin_array[i];
    297e:	5cb1      	ldrb	r1, [r6, r2]
    2980:	b2c9      	uxtb	r1, r1
    2982:	54a9      	strb	r1, [r5, r2]
    2984:	3301      	adds	r3, #1
				for(i=0;i<NO_OF_LEDS;i++)
    2986:	2b08      	cmp	r3, #8
    2988:	d00a      	beq.n	29a0 <_tc_interrupt_handler+0x24c>
					if(temp_compare_array[i] != 255)
    298a:	001a      	movs	r2, r3
    298c:	4641      	mov	r1, r8
    298e:	5cc9      	ldrb	r1, [r1, r3]
    2990:	b2c9      	uxtb	r1, r1
    2992:	29ff      	cmp	r1, #255	; 0xff
    2994:	d0ef      	beq.n	2976 <_tc_interrupt_handler+0x222>
						N_valid_compares++;
    2996:	7801      	ldrb	r1, [r0, #0]
    2998:	3101      	adds	r1, #1
    299a:	b2c9      	uxtb	r1, r1
    299c:	7001      	strb	r1, [r0, #0]
    299e:	e7ea      	b.n	2976 <_tc_interrupt_handler+0x222>
				}
				
			//}
			update_compare_array = false;
    29a0:	2200      	movs	r2, #0
    29a2:	4b2e      	ldr	r3, [pc, #184]	; (2a5c <_tc_interrupt_handler+0x308>)
    29a4:	701a      	strb	r2, [r3, #0]
			//*PORT_CLEAR_REGISTER = B2_RGB;
		}
		compare_array_ID = 0;
    29a6:	2300      	movs	r3, #0
    29a8:	4a16      	ldr	r2, [pc, #88]	; (2a04 <_tc_interrupt_handler+0x2b0>)
    29aa:	7013      	strb	r3, [r2, #0]
		pin_array_ID  = 0;
    29ac:	4a17      	ldr	r2, [pc, #92]	; (2a0c <_tc_interrupt_handler+0x2b8>)
    29ae:	7013      	strb	r3, [r2, #0]
		
		compare_value = compare_array[0];
    29b0:	4b19      	ldr	r3, [pc, #100]	; (2a18 <_tc_interrupt_handler+0x2c4>)
    29b2:	7819      	ldrb	r1, [r3, #0]
    29b4:	b2c9      	uxtb	r1, r1
		if(compare_value != 255)
    29b6:	29ff      	cmp	r1, #255	; 0xff
    29b8:	d015      	beq.n	29e6 <_tc_interrupt_handler+0x292>
		{
			
			led_disable_flag = true;
			//Check sync busy
			while((*STATUS_REGISTER && MASK_SYNC) == true);
    29ba:	4a1a      	ldr	r2, [pc, #104]	; (2a24 <_tc_interrupt_handler+0x2d0>)
    29bc:	7813      	ldrb	r3, [r2, #0]
    29be:	2b00      	cmp	r3, #0
    29c0:	d1fc      	bne.n	29bc <_tc_interrupt_handler+0x268>
			//Update the compare value
			*COMPARE_REGISTER  = compare_value;
    29c2:	4b19      	ldr	r3, [pc, #100]	; (2a28 <_tc_interrupt_handler+0x2d4>)
    29c4:	7019      	strb	r1, [r3, #0]
		else
		{
			int_enable = true;
			tc_disable_callback(module, TC_CALLBACK_CC_CHANNEL0);
		}
		while((*STATUS_REGISTER && MASK_SYNC) == true);
    29c6:	4a17      	ldr	r2, [pc, #92]	; (2a24 <_tc_interrupt_handler+0x2d0>)
    29c8:	7813      	ldrb	r3, [r2, #0]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d1fc      	bne.n	29c8 <_tc_interrupt_handler+0x274>
		*COUNT_REGISTER           =	0;
    29ce:	2200      	movs	r2, #0
    29d0:	4b16      	ldr	r3, [pc, #88]	; (2a2c <_tc_interrupt_handler+0x2d8>)
    29d2:	701a      	strb	r2, [r3, #0]
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    29d4:	6823      	ldr	r3, [r4, #0]
    29d6:	3201      	adds	r2, #1
    29d8:	739a      	strb	r2, [r3, #14]
		//(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		//module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	//}
	
}
    29da:	bc3c      	pop	{r2, r3, r4, r5}
    29dc:	4690      	mov	r8, r2
    29de:	4699      	mov	r9, r3
    29e0:	46a2      	mov	sl, r4
    29e2:	46ab      	mov	fp, r5
    29e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			int_enable = true;
    29e6:	2201      	movs	r2, #1
    29e8:	4b1d      	ldr	r3, [pc, #116]	; (2a60 <_tc_interrupt_handler+0x30c>)
    29ea:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    29ec:	320f      	adds	r2, #15
    29ee:	6823      	ldr	r3, [r4, #0]
    29f0:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    29f2:	7e63      	ldrb	r3, [r4, #25]
    29f4:	4393      	bics	r3, r2
    29f6:	7663      	strb	r3, [r4, #25]
    29f8:	e7e5      	b.n	29c6 <_tc_interrupt_handler+0x272>
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	200002ac 	.word	0x200002ac
    2a00:	20000009 	.word	0x20000009
    2a04:	200000ac 	.word	0x200000ac
    2a08:	20000008 	.word	0x20000008
    2a0c:	200000b8 	.word	0x200000b8
    2a10:	200000b0 	.word	0x200000b0
    2a14:	41004418 	.word	0x41004418
    2a18:	200000a4 	.word	0x200000a4
    2a1c:	200000ae 	.word	0x200000ae
    2a20:	200000ad 	.word	0x200000ad
    2a24:	4200180f 	.word	0x4200180f
    2a28:	42001818 	.word	0x42001818
    2a2c:	42001810 	.word	0x42001810
    2a30:	200000f0 	.word	0x200000f0
    2a34:	2000000e 	.word	0x2000000e
    2a38:	200000b9 	.word	0x200000b9
    2a3c:	2000000a 	.word	0x2000000a
    2a40:	200000ec 	.word	0x200000ec
    2a44:	2000000b 	.word	0x2000000b
    2a48:	00003701 	.word	0x00003701
    2a4c:	4100441c 	.word	0x4100441c
    2a50:	200000ef 	.word	0x200000ef
    2a54:	88038300 	.word	0x88038300
    2a58:	41004414 	.word	0x41004414
    2a5c:	200000f4 	.word	0x200000f4
    2a60:	200000af 	.word	0x200000af
    2a64:	20000308 	.word	0x20000308
    2a68:	2000032c 	.word	0x2000032c
    2a6c:	000024cd 	.word	0x000024cd
    2a70:	00003bd0 	.word	0x00003bd0
    2a74:	e000e100 	.word	0xe000e100

00002a78 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2a78:	b510      	push	{r4, lr}
    2a7a:	2000      	movs	r0, #0
    2a7c:	4b01      	ldr	r3, [pc, #4]	; (2a84 <TC1_Handler+0xc>)
    2a7e:	4798      	blx	r3
    2a80:	bd10      	pop	{r4, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	00002755 	.word	0x00002755

00002a88 <TC2_Handler>:
    2a88:	b510      	push	{r4, lr}
    2a8a:	2001      	movs	r0, #1
    2a8c:	4b01      	ldr	r3, [pc, #4]	; (2a94 <TC2_Handler+0xc>)
    2a8e:	4798      	blx	r3
    2a90:	bd10      	pop	{r4, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	00002755 	.word	0x00002755

00002a98 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2a98:	4770      	bx	lr
	...

00002a9c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2a9c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2a9e:	4b0a      	ldr	r3, [pc, #40]	; (2ac8 <_sercom_set_handler+0x2c>)
    2aa0:	781b      	ldrb	r3, [r3, #0]
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d10c      	bne.n	2ac0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2aa6:	4c09      	ldr	r4, [pc, #36]	; (2acc <_sercom_set_handler+0x30>)
    2aa8:	4d09      	ldr	r5, [pc, #36]	; (2ad0 <_sercom_set_handler+0x34>)
    2aaa:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2aac:	4b09      	ldr	r3, [pc, #36]	; (2ad4 <_sercom_set_handler+0x38>)
    2aae:	2200      	movs	r2, #0
    2ab0:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2ab2:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    2ab4:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2ab6:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    2ab8:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    2aba:	3201      	adds	r2, #1
    2abc:	4b02      	ldr	r3, [pc, #8]	; (2ac8 <_sercom_set_handler+0x2c>)
    2abe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2ac0:	0080      	lsls	r0, r0, #2
    2ac2:	4b02      	ldr	r3, [pc, #8]	; (2acc <_sercom_set_handler+0x30>)
    2ac4:	50c1      	str	r1, [r0, r3]
}
    2ac6:	bd30      	pop	{r4, r5, pc}
    2ac8:	200000ba 	.word	0x200000ba
    2acc:	200000bc 	.word	0x200000bc
    2ad0:	00002a99 	.word	0x00002a99
    2ad4:	200002b4 	.word	0x200002b4

00002ad8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2ad8:	b510      	push	{r4, lr}
    2ada:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2adc:	ac01      	add	r4, sp, #4
    2ade:	2309      	movs	r3, #9
    2ae0:	7023      	strb	r3, [r4, #0]
    2ae2:	3301      	adds	r3, #1
    2ae4:	7063      	strb	r3, [r4, #1]
    2ae6:	3301      	adds	r3, #1
    2ae8:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2aea:	4b02      	ldr	r3, [pc, #8]	; (2af4 <_sercom_get_interrupt_vector+0x1c>)
    2aec:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2aee:	5620      	ldrsb	r0, [r4, r0]
}
    2af0:	b002      	add	sp, #8
    2af2:	bd10      	pop	{r4, pc}
    2af4:	0000189d 	.word	0x0000189d

00002af8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2af8:	b510      	push	{r4, lr}
    2afa:	4b02      	ldr	r3, [pc, #8]	; (2b04 <SERCOM0_Handler+0xc>)
    2afc:	681b      	ldr	r3, [r3, #0]
    2afe:	2000      	movs	r0, #0
    2b00:	4798      	blx	r3
    2b02:	bd10      	pop	{r4, pc}
    2b04:	200000bc 	.word	0x200000bc

00002b08 <SERCOM1_Handler>:
    2b08:	b510      	push	{r4, lr}
    2b0a:	4b02      	ldr	r3, [pc, #8]	; (2b14 <SERCOM1_Handler+0xc>)
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	2001      	movs	r0, #1
    2b10:	4798      	blx	r3
    2b12:	bd10      	pop	{r4, pc}
    2b14:	200000bc 	.word	0x200000bc

00002b18 <SERCOM2_Handler>:
    2b18:	b510      	push	{r4, lr}
    2b1a:	4b02      	ldr	r3, [pc, #8]	; (2b24 <SERCOM2_Handler+0xc>)
    2b1c:	689b      	ldr	r3, [r3, #8]
    2b1e:	2002      	movs	r0, #2
    2b20:	4798      	blx	r3
    2b22:	bd10      	pop	{r4, pc}
    2b24:	200000bc 	.word	0x200000bc

00002b28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2b28:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b2a:	2200      	movs	r2, #0
    2b2c:	4b10      	ldr	r3, [pc, #64]	; (2b70 <EIC_Handler+0x48>)
    2b2e:	701a      	strb	r2, [r3, #0]
    2b30:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2b32:	4910      	ldr	r1, [pc, #64]	; (2b74 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2b34:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2b36:	4e10      	ldr	r6, [pc, #64]	; (2b78 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b38:	4c0d      	ldr	r4, [pc, #52]	; (2b70 <EIC_Handler+0x48>)
    2b3a:	e00a      	b.n	2b52 <EIC_Handler+0x2a>
		return eics[eic_index];
    2b3c:	490d      	ldr	r1, [pc, #52]	; (2b74 <EIC_Handler+0x4c>)
    2b3e:	e008      	b.n	2b52 <EIC_Handler+0x2a>
    2b40:	7823      	ldrb	r3, [r4, #0]
    2b42:	3301      	adds	r3, #1
    2b44:	b2db      	uxtb	r3, r3
    2b46:	7023      	strb	r3, [r4, #0]
    2b48:	2b0f      	cmp	r3, #15
    2b4a:	d810      	bhi.n	2b6e <EIC_Handler+0x46>
		return NULL;
    2b4c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2b4e:	2b1f      	cmp	r3, #31
    2b50:	d9f4      	bls.n	2b3c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2b52:	0028      	movs	r0, r5
    2b54:	4018      	ands	r0, r3
    2b56:	2201      	movs	r2, #1
    2b58:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2b5a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2b5c:	4210      	tst	r0, r2
    2b5e:	d0ef      	beq.n	2b40 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2b60:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2b62:	009b      	lsls	r3, r3, #2
    2b64:	599b      	ldr	r3, [r3, r6]
    2b66:	2b00      	cmp	r3, #0
    2b68:	d0ea      	beq.n	2b40 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2b6a:	4798      	blx	r3
    2b6c:	e7e8      	b.n	2b40 <EIC_Handler+0x18>
			}
		}
	}
}
    2b6e:	bd70      	pop	{r4, r5, r6, pc}
    2b70:	200002c0 	.word	0x200002c0
    2b74:	40001800 	.word	0x40001800
    2b78:	20000208 	.word	0x20000208

00002b7c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2b7c:	b500      	push	{lr}
    2b7e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b80:	ab01      	add	r3, sp, #4
    2b82:	2280      	movs	r2, #128	; 0x80
    2b84:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2b86:	780a      	ldrb	r2, [r1, #0]
    2b88:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2b8a:	784a      	ldrb	r2, [r1, #1]
    2b8c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2b8e:	788a      	ldrb	r2, [r1, #2]
    2b90:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2b92:	0019      	movs	r1, r3
    2b94:	4b01      	ldr	r3, [pc, #4]	; (2b9c <port_pin_set_config+0x20>)
    2b96:	4798      	blx	r3
}
    2b98:	b003      	add	sp, #12
    2b9a:	bd00      	pop	{pc}
    2b9c:	000033fd 	.word	0x000033fd

00002ba0 <tc_callback_PWM>:



void tc_callback_PWM(struct tc_module *const module_inst)
{
}
    2ba0:	4770      	bx	lr

00002ba2 <tc_callback_OF>:

void tc_callback_OF(struct tc_module *const module_inst)
{
}
    2ba2:	4770      	bx	lr

00002ba4 <increasing_sort_tag>:
{
    2ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba6:	46c6      	mov	lr, r8
    2ba8:	b500      	push	{lr}
    2baa:	b084      	sub	sp, #16
    2bac:	2300      	movs	r3, #0
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
    2bae:	4c23      	ldr	r4, [pc, #140]	; (2c3c <increasing_sort_tag+0x98>)
    2bb0:	a802      	add	r0, sp, #8
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
    2bb2:	4923      	ldr	r1, [pc, #140]	; (2c40 <increasing_sort_tag+0x9c>)
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
    2bb4:	5ce2      	ldrb	r2, [r4, r3]
    2bb6:	54c2      	strb	r2, [r0, r3]
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
    2bb8:	5cca      	ldrb	r2, [r1, r3]
    2bba:	466d      	mov	r5, sp
    2bbc:	54ea      	strb	r2, [r5, r3]
    2bbe:	3301      	adds	r3, #1
	for(i=0;i<NO_OF_LEDS;i++)
    2bc0:	2b08      	cmp	r3, #8
    2bc2:	d1f7      	bne.n	2bb4 <increasing_sort_tag+0x10>
    2bc4:	3b01      	subs	r3, #1
    2bc6:	469c      	mov	ip, r3
				temp = temp_temp_pin_array[j];
    2bc8:	ad02      	add	r5, sp, #8
    2bca:	e01a      	b.n	2c02 <increasing_sort_tag+0x5e>
		for(j=0;j< N-i-1;j++)
    2bcc:	3301      	adds	r3, #1
    2bce:	b2db      	uxtb	r3, r3
    2bd0:	001a      	movs	r2, r3
    2bd2:	42bb      	cmp	r3, r7
    2bd4:	da0e      	bge.n	2bf4 <increasing_sort_tag+0x50>
			if(temp_temp_compare_array[j]>temp_temp_compare_array[j+1])
    2bd6:	4669      	mov	r1, sp
    2bd8:	5c88      	ldrb	r0, [r1, r2]
    2bda:	1c51      	adds	r1, r2, #1
    2bdc:	466c      	mov	r4, sp
    2bde:	5c64      	ldrb	r4, [r4, r1]
    2be0:	42a0      	cmp	r0, r4
    2be2:	d9f3      	bls.n	2bcc <increasing_sort_tag+0x28>
				temp_temp_compare_array[j] = temp_temp_compare_array[j+1];
    2be4:	466e      	mov	r6, sp
    2be6:	54b4      	strb	r4, [r6, r2]
				temp_temp_compare_array[j+1]= temp;
    2be8:	5470      	strb	r0, [r6, r1]
				temp = temp_temp_pin_array[j];
    2bea:	5ca8      	ldrb	r0, [r5, r2]
				temp_temp_pin_array[j]   = temp_temp_pin_array[j+1];
    2bec:	5c6c      	ldrb	r4, [r5, r1]
    2bee:	54ac      	strb	r4, [r5, r2]
				temp_temp_pin_array[j+1] = temp;
    2bf0:	5468      	strb	r0, [r5, r1]
    2bf2:	e7eb      	b.n	2bcc <increasing_sort_tag+0x28>
    2bf4:	2301      	movs	r3, #1
    2bf6:	425b      	negs	r3, r3
    2bf8:	4698      	mov	r8, r3
    2bfa:	44c4      	add	ip, r8
	for(i=0; i< N-1 ;i++)
    2bfc:	4663      	mov	r3, ip
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d005      	beq.n	2c0e <increasing_sort_tag+0x6a>
		for(j=0;j< N-i-1;j++)
    2c02:	4667      	mov	r7, ip
    2c04:	2200      	movs	r2, #0
    2c06:	2300      	movs	r3, #0
    2c08:	2f00      	cmp	r7, #0
    2c0a:	dce4      	bgt.n	2bd6 <increasing_sort_tag+0x32>
    2c0c:	e7f2      	b.n	2bf4 <increasing_sort_tag+0x50>
	lock_temp_array = true;
    2c0e:	2201      	movs	r2, #1
    2c10:	4b0c      	ldr	r3, [pc, #48]	; (2c44 <increasing_sort_tag+0xa0>)
    2c12:	701a      	strb	r2, [r3, #0]
    2c14:	2300      	movs	r3, #0
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
    2c16:	ac02      	add	r4, sp, #8
    2c18:	480b      	ldr	r0, [pc, #44]	; (2c48 <increasing_sort_tag+0xa4>)
		temp_compare_array[i] = temp_temp_compare_array[i];
    2c1a:	490c      	ldr	r1, [pc, #48]	; (2c4c <increasing_sort_tag+0xa8>)
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
    2c1c:	5d1a      	ldrb	r2, [r3, r4]
    2c1e:	54c2      	strb	r2, [r0, r3]
		temp_compare_array[i] = temp_temp_compare_array[i];
    2c20:	466a      	mov	r2, sp
    2c22:	5c9a      	ldrb	r2, [r3, r2]
    2c24:	54ca      	strb	r2, [r1, r3]
    2c26:	3301      	adds	r3, #1
	for(i=0;i<N;i++)
    2c28:	2b08      	cmp	r3, #8
    2c2a:	d1f7      	bne.n	2c1c <increasing_sort_tag+0x78>
	lock_temp_array = false;
    2c2c:	2200      	movs	r2, #0
    2c2e:	4b05      	ldr	r3, [pc, #20]	; (2c44 <increasing_sort_tag+0xa0>)
    2c30:	701a      	strb	r2, [r3, #0]
}
    2c32:	b004      	add	sp, #16
    2c34:	bc04      	pop	{r2}
    2c36:	4690      	mov	r8, r2
    2c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	20000324 	.word	0x20000324
    2c40:	20000348 	.word	0x20000348
    2c44:	200000ee 	.word	0x200000ee
    2c48:	2000032c 	.word	0x2000032c
    2c4c:	20000308 	.word	0x20000308

00002c50 <ORB_timer_init>:
{
    2c50:	b510      	push	{r4, lr}
    2c52:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2c54:	aa01      	add	r2, sp, #4
    2c56:	2300      	movs	r3, #0
    2c58:	2100      	movs	r1, #0
    2c5a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2c5c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2c5e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2c60:	2000      	movs	r0, #0
    2c62:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2c64:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2c66:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2c68:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2c6a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2c6c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2c6e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2c70:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2c72:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2c74:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2c76:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2c78:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2c7a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2c7c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2c7e:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    2c80:	23c0      	movs	r3, #192	; 0xc0
    2c82:	00db      	lsls	r3, r3, #3
    2c84:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    2c86:	2304      	movs	r3, #4
    2c88:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    2c8a:	21ff      	movs	r1, #255	; 0xff
    2c8c:	3325      	adds	r3, #37	; 0x25
    2c8e:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    2c90:	4c07      	ldr	r4, [pc, #28]	; (2cb0 <ORB_timer_init+0x60>)
    2c92:	4908      	ldr	r1, [pc, #32]	; (2cb4 <ORB_timer_init+0x64>)
    2c94:	0020      	movs	r0, r4
    2c96:	4b08      	ldr	r3, [pc, #32]	; (2cb8 <ORB_timer_init+0x68>)
    2c98:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c9a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c9c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2c9e:	b25b      	sxtb	r3, r3
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	dbfb      	blt.n	2c9c <ORB_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2ca4:	8813      	ldrh	r3, [r2, #0]
    2ca6:	2102      	movs	r1, #2
    2ca8:	430b      	orrs	r3, r1
    2caa:	8013      	strh	r3, [r2, #0]
}
    2cac:	b00e      	add	sp, #56	; 0x38
    2cae:	bd10      	pop	{r4, pc}
    2cb0:	200002c4 	.word	0x200002c4
    2cb4:	42001800 	.word	0x42001800
    2cb8:	000024f1 	.word	0x000024f1

00002cbc <set_drivestrength_ORB>:
{
    2cbc:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB_LEDS,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    2cbe:	2201      	movs	r2, #1
    2cc0:	4902      	ldr	r1, [pc, #8]	; (2ccc <set_drivestrength_ORB+0x10>)
    2cc2:	4803      	ldr	r0, [pc, #12]	; (2cd0 <set_drivestrength_ORB+0x14>)
    2cc4:	4b03      	ldr	r3, [pc, #12]	; (2cd4 <set_drivestrength_ORB+0x18>)
    2cc6:	4798      	blx	r3
}
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	c8038300 	.word	0xc8038300
    2cd0:	41004400 	.word	0x41004400
    2cd4:	0000342d 	.word	0x0000342d

00002cd8 <ORB_setup_pins>:
{
    2cd8:	b530      	push	{r4, r5, lr}
    2cda:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2cdc:	ac01      	add	r4, sp, #4
    2cde:	2301      	movs	r3, #1
    2ce0:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2ce2:	2200      	movs	r2, #0
    2ce4:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2ce6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ORB_R1, &config_port_pin);
    2ce8:	0021      	movs	r1, r4
    2cea:	200f      	movs	r0, #15
    2cec:	4d0e      	ldr	r5, [pc, #56]	; (2d28 <ORB_setup_pins+0x50>)
    2cee:	47a8      	blx	r5
	port_pin_set_config(ORB_G1, &config_port_pin);
    2cf0:	0021      	movs	r1, r4
    2cf2:	2010      	movs	r0, #16
    2cf4:	47a8      	blx	r5
	port_pin_set_config(ORB_B1, &config_port_pin);
    2cf6:	0021      	movs	r1, r4
    2cf8:	2011      	movs	r0, #17
    2cfa:	47a8      	blx	r5
	port_pin_set_config(ORB_R2, &config_port_pin);
    2cfc:	0021      	movs	r1, r4
    2cfe:	2008      	movs	r0, #8
    2d00:	47a8      	blx	r5
	port_pin_set_config(ORB_G2, &config_port_pin);
    2d02:	0021      	movs	r1, r4
    2d04:	2009      	movs	r0, #9
    2d06:	47a8      	blx	r5
	port_pin_set_config(ORB_B2, &config_port_pin);
    2d08:	0021      	movs	r1, r4
    2d0a:	201b      	movs	r0, #27
    2d0c:	47a8      	blx	r5
	port_pin_set_config(LED1, &config_port_pin);
    2d0e:	0021      	movs	r1, r4
    2d10:	201f      	movs	r0, #31
    2d12:	47a8      	blx	r5
	port_pin_set_config(LED4, &config_port_pin);
    2d14:	0021      	movs	r1, r4
    2d16:	201e      	movs	r0, #30
    2d18:	47a8      	blx	r5
	set_drivestrength_ORB();
    2d1a:	4b04      	ldr	r3, [pc, #16]	; (2d2c <ORB_setup_pins+0x54>)
    2d1c:	4798      	blx	r3
	port_base->OUTCLR.reg	   = CLEAR_ORB_LEDS;
    2d1e:	4a04      	ldr	r2, [pc, #16]	; (2d30 <ORB_setup_pins+0x58>)
    2d20:	4b04      	ldr	r3, [pc, #16]	; (2d34 <ORB_setup_pins+0x5c>)
    2d22:	615a      	str	r2, [r3, #20]
}
    2d24:	b003      	add	sp, #12
    2d26:	bd30      	pop	{r4, r5, pc}
    2d28:	00002b7d 	.word	0x00002b7d
    2d2c:	00002cbd 	.word	0x00002cbd
    2d30:	c8038300 	.word	0xc8038300
    2d34:	41004400 	.word	0x41004400

00002d38 <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    2d38:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    2d3a:	4d05      	ldr	r5, [pc, #20]	; (2d50 <ORB_timer_callbacks_init+0x18>)
    2d3c:	2200      	movs	r2, #0
    2d3e:	4905      	ldr	r1, [pc, #20]	; (2d54 <ORB_timer_callbacks_init+0x1c>)
    2d40:	0028      	movs	r0, r5
    2d42:	4c05      	ldr	r4, [pc, #20]	; (2d58 <ORB_timer_callbacks_init+0x20>)
    2d44:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    2d46:	2202      	movs	r2, #2
    2d48:	4904      	ldr	r1, [pc, #16]	; (2d5c <ORB_timer_callbacks_init+0x24>)
    2d4a:	0028      	movs	r0, r5
    2d4c:	47a0      	blx	r4
}
    2d4e:	bd70      	pop	{r4, r5, r6, pc}
    2d50:	200002c4 	.word	0x200002c4
    2d54:	00002ba3 	.word	0x00002ba3
    2d58:	00002721 	.word	0x00002721
    2d5c:	00002ba1 	.word	0x00002ba1

00002d60 <enable_ORB>:

void enable_ORB()
{
    2d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d62:	46ce      	mov	lr, r9
    2d64:	4647      	mov	r7, r8
    2d66:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d68:	4c13      	ldr	r4, [pc, #76]	; (2db8 <enable_ORB+0x58>)
    2d6a:	6820      	ldr	r0, [r4, #0]
    2d6c:	4b13      	ldr	r3, [pc, #76]	; (2dbc <enable_ORB+0x5c>)
    2d6e:	4699      	mov	r9, r3
    2d70:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d72:	4b13      	ldr	r3, [pc, #76]	; (2dc0 <enable_ORB+0x60>)
    2d74:	4698      	mov	r8, r3
    2d76:	5c1b      	ldrb	r3, [r3, r0]
    2d78:	261f      	movs	r6, #31
    2d7a:	4033      	ands	r3, r6
    2d7c:	2501      	movs	r5, #1
    2d7e:	002a      	movs	r2, r5
    2d80:	409a      	lsls	r2, r3
    2d82:	4f10      	ldr	r7, [pc, #64]	; (2dc4 <enable_ORB+0x64>)
    2d84:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2d86:	7e63      	ldrb	r3, [r4, #25]
    2d88:	2201      	movs	r2, #1
    2d8a:	4313      	orrs	r3, r2
    2d8c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2d8e:	6823      	ldr	r3, [r4, #0]
    2d90:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d92:	0018      	movs	r0, r3
    2d94:	47c8      	blx	r9
    2d96:	4643      	mov	r3, r8
    2d98:	5c1b      	ldrb	r3, [r3, r0]
    2d9a:	401e      	ands	r6, r3
    2d9c:	40b5      	lsls	r5, r6
    2d9e:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2da0:	7e63      	ldrb	r3, [r4, #25]
    2da2:	2210      	movs	r2, #16
    2da4:	4313      	orrs	r3, r2
    2da6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2da8:	6823      	ldr	r3, [r4, #0]
    2daa:	2210      	movs	r2, #16
    2dac:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    2dae:	bc0c      	pop	{r2, r3}
    2db0:	4690      	mov	r8, r2
    2db2:	4699      	mov	r9, r3
    2db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	200002c4 	.word	0x200002c4
    2dbc:	000024cd 	.word	0x000024cd
    2dc0:	00003bd4 	.word	0x00003bd4
    2dc4:	e000e100 	.word	0xe000e100

00002dc8 <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array_2[0]  = ORB_R1;
    2dc8:	4b08      	ldr	r3, [pc, #32]	; (2dec <initializing_pin_array+0x24>)
    2dca:	220f      	movs	r2, #15
    2dcc:	701a      	strb	r2, [r3, #0]
	temp_pin_array_2[1]  = ORB_G1;
    2dce:	3201      	adds	r2, #1
    2dd0:	705a      	strb	r2, [r3, #1]
	temp_pin_array_2[2]  = ORB_B1;
    2dd2:	3201      	adds	r2, #1
    2dd4:	709a      	strb	r2, [r3, #2]
	temp_pin_array_2[3]  = ORB_R2;
    2dd6:	3a09      	subs	r2, #9
    2dd8:	70da      	strb	r2, [r3, #3]
	temp_pin_array_2[4]  = ORB_G2;
    2dda:	3201      	adds	r2, #1
    2ddc:	711a      	strb	r2, [r3, #4]
	temp_pin_array_2[5]  = ORB_B2;
    2dde:	3212      	adds	r2, #18
    2de0:	715a      	strb	r2, [r3, #5]
	temp_pin_array_2[6]  = LED1;
    2de2:	3204      	adds	r2, #4
    2de4:	719a      	strb	r2, [r3, #6]
	temp_pin_array_2[7]  = LED4;
    2de6:	3a01      	subs	r2, #1
    2de8:	71da      	strb	r2, [r3, #7]
}
    2dea:	4770      	bx	lr
    2dec:	20000324 	.word	0x20000324

00002df0 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 255;//Left  -- R
    2df0:	4b05      	ldr	r3, [pc, #20]	; (2e08 <initializing_compare_array+0x18>)
    2df2:	22ff      	movs	r2, #255	; 0xff
    2df4:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    2df6:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    2df8:	709a      	strb	r2, [r3, #2]
	
	temp_compare_array_2[3] = 255;//Right -- R
    2dfa:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right -- G
    2dfc:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    2dfe:	715a      	strb	r2, [r3, #5]
	
	temp_compare_array_2[6] =  255;//LED1
    2e00:	719a      	strb	r2, [r3, #6]
	temp_compare_array_2[7] =  255;//LED4
    2e02:	71da      	strb	r2, [r3, #7]
}
    2e04:	4770      	bx	lr
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	20000348 	.word	0x20000348

00002e0c <ORB_init_array>:


void ORB_init_array()
{
    2e0c:	b510      	push	{r4, lr}
	initializing_pin_array();
    2e0e:	4b03      	ldr	r3, [pc, #12]	; (2e1c <ORB_init_array+0x10>)
    2e10:	4798      	blx	r3
	initializing_compare_array();
    2e12:	4b03      	ldr	r3, [pc, #12]	; (2e20 <ORB_init_array+0x14>)
    2e14:	4798      	blx	r3
	increasing_sort_tag();
    2e16:	4b03      	ldr	r3, [pc, #12]	; (2e24 <ORB_init_array+0x18>)
    2e18:	4798      	blx	r3
}
    2e1a:	bd10      	pop	{r4, pc}
    2e1c:	00002dc9 	.word	0x00002dc9
    2e20:	00002df1 	.word	0x00002df1
    2e24:	00002ba5 	.word	0x00002ba5

00002e28 <ORB_init>:

void ORB_init()
{
    2e28:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    2e2a:	4b04      	ldr	r3, [pc, #16]	; (2e3c <ORB_init+0x14>)
    2e2c:	4798      	blx	r3
	ORB_setup_pins();
    2e2e:	4b04      	ldr	r3, [pc, #16]	; (2e40 <ORB_init+0x18>)
    2e30:	4798      	blx	r3
	ORB_init_array();
    2e32:	4b04      	ldr	r3, [pc, #16]	; (2e44 <ORB_init+0x1c>)
    2e34:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    2e36:	4b04      	ldr	r3, [pc, #16]	; (2e48 <ORB_init+0x20>)
    2e38:	4798      	blx	r3

    2e3a:	bd10      	pop	{r4, pc}
    2e3c:	00002c51 	.word	0x00002c51
    2e40:	00002cd9 	.word	0x00002cd9
    2e44:	00002e0d 	.word	0x00002e0d
    2e48:	00002d39 	.word	0x00002d39

00002e4c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2e4c:	4770      	bx	lr
	...

00002e50 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e50:	4b0c      	ldr	r3, [pc, #48]	; (2e84 <cpu_irq_enter_critical+0x34>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	2b00      	cmp	r3, #0
    2e56:	d106      	bne.n	2e66 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e58:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d007      	beq.n	2e70 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e60:	2200      	movs	r2, #0
    2e62:	4b09      	ldr	r3, [pc, #36]	; (2e88 <cpu_irq_enter_critical+0x38>)
    2e64:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e66:	4a07      	ldr	r2, [pc, #28]	; (2e84 <cpu_irq_enter_critical+0x34>)
    2e68:	6813      	ldr	r3, [r2, #0]
    2e6a:	3301      	adds	r3, #1
    2e6c:	6013      	str	r3, [r2, #0]
}
    2e6e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2e70:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2e72:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e76:	2200      	movs	r2, #0
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <cpu_irq_enter_critical+0x3c>)
    2e7a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e7c:	3201      	adds	r2, #1
    2e7e:	4b02      	ldr	r3, [pc, #8]	; (2e88 <cpu_irq_enter_critical+0x38>)
    2e80:	701a      	strb	r2, [r3, #0]
    2e82:	e7f0      	b.n	2e66 <cpu_irq_enter_critical+0x16>
    2e84:	200000c8 	.word	0x200000c8
    2e88:	200000cc 	.word	0x200000cc
    2e8c:	2000000c 	.word	0x2000000c

00002e90 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e90:	4b08      	ldr	r3, [pc, #32]	; (2eb4 <cpu_irq_leave_critical+0x24>)
    2e92:	681a      	ldr	r2, [r3, #0]
    2e94:	3a01      	subs	r2, #1
    2e96:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e98:	681b      	ldr	r3, [r3, #0]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d109      	bne.n	2eb2 <cpu_irq_leave_critical+0x22>
    2e9e:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <cpu_irq_leave_critical+0x28>)
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d005      	beq.n	2eb2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2ea6:	2201      	movs	r2, #1
    2ea8:	4b04      	ldr	r3, [pc, #16]	; (2ebc <cpu_irq_leave_critical+0x2c>)
    2eaa:	701a      	strb	r2, [r3, #0]
    2eac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2eb0:	b662      	cpsie	i
	}
}
    2eb2:	4770      	bx	lr
    2eb4:	200000c8 	.word	0x200000c8
    2eb8:	200000cc 	.word	0x200000cc
    2ebc:	2000000c 	.word	0x2000000c

00002ec0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2ec0:	b510      	push	{r4, lr}
	switch (clock_source) {
    2ec2:	2808      	cmp	r0, #8
    2ec4:	d803      	bhi.n	2ece <system_clock_source_get_hz+0xe>
    2ec6:	0080      	lsls	r0, r0, #2
    2ec8:	4b1b      	ldr	r3, [pc, #108]	; (2f38 <system_clock_source_get_hz+0x78>)
    2eca:	581b      	ldr	r3, [r3, r0]
    2ecc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2ece:	2000      	movs	r0, #0
    2ed0:	e030      	b.n	2f34 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2ed2:	4b1a      	ldr	r3, [pc, #104]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2ed4:	6918      	ldr	r0, [r3, #16]
    2ed6:	e02d      	b.n	2f34 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ed8:	4b19      	ldr	r3, [pc, #100]	; (2f40 <system_clock_source_get_hz+0x80>)
    2eda:	6a1b      	ldr	r3, [r3, #32]
    2edc:	059b      	lsls	r3, r3, #22
    2ede:	0f9b      	lsrs	r3, r3, #30
    2ee0:	4818      	ldr	r0, [pc, #96]	; (2f44 <system_clock_source_get_hz+0x84>)
    2ee2:	40d8      	lsrs	r0, r3
    2ee4:	e026      	b.n	2f34 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2ee6:	4b15      	ldr	r3, [pc, #84]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2ee8:	6958      	ldr	r0, [r3, #20]
    2eea:	e023      	b.n	2f34 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2eec:	4b13      	ldr	r3, [pc, #76]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2eee:	681b      	ldr	r3, [r3, #0]
			return 0;
    2ef0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ef2:	079b      	lsls	r3, r3, #30
    2ef4:	d51e      	bpl.n	2f34 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ef6:	4912      	ldr	r1, [pc, #72]	; (2f40 <system_clock_source_get_hz+0x80>)
    2ef8:	2210      	movs	r2, #16
    2efa:	68cb      	ldr	r3, [r1, #12]
    2efc:	421a      	tst	r2, r3
    2efe:	d0fc      	beq.n	2efa <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2f00:	4b0e      	ldr	r3, [pc, #56]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	075b      	lsls	r3, r3, #29
    2f06:	d401      	bmi.n	2f0c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2f08:	480f      	ldr	r0, [pc, #60]	; (2f48 <system_clock_source_get_hz+0x88>)
    2f0a:	e013      	b.n	2f34 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f0c:	2000      	movs	r0, #0
    2f0e:	4b0f      	ldr	r3, [pc, #60]	; (2f4c <system_clock_source_get_hz+0x8c>)
    2f10:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2f12:	4b0a      	ldr	r3, [pc, #40]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2f14:	689b      	ldr	r3, [r3, #8]
    2f16:	041b      	lsls	r3, r3, #16
    2f18:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f1a:	4358      	muls	r0, r3
    2f1c:	e00a      	b.n	2f34 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f1e:	2350      	movs	r3, #80	; 0x50
    2f20:	4a07      	ldr	r2, [pc, #28]	; (2f40 <system_clock_source_get_hz+0x80>)
    2f22:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2f24:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f26:	075b      	lsls	r3, r3, #29
    2f28:	d504      	bpl.n	2f34 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2f2a:	4b04      	ldr	r3, [pc, #16]	; (2f3c <system_clock_source_get_hz+0x7c>)
    2f2c:	68d8      	ldr	r0, [r3, #12]
    2f2e:	e001      	b.n	2f34 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2f30:	2080      	movs	r0, #128	; 0x80
    2f32:	0200      	lsls	r0, r0, #8
	}
}
    2f34:	bd10      	pop	{r4, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	00003bd8 	.word	0x00003bd8
    2f3c:	200000d0 	.word	0x200000d0
    2f40:	40000800 	.word	0x40000800
    2f44:	007a1200 	.word	0x007a1200
    2f48:	02dc6c00 	.word	0x02dc6c00
    2f4c:	00003321 	.word	0x00003321

00002f50 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f50:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f52:	490c      	ldr	r1, [pc, #48]	; (2f84 <system_clock_source_osc8m_set_config+0x34>)
    2f54:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f56:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f58:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f5a:	7840      	ldrb	r0, [r0, #1]
    2f5c:	2201      	movs	r2, #1
    2f5e:	4010      	ands	r0, r2
    2f60:	0180      	lsls	r0, r0, #6
    2f62:	2640      	movs	r6, #64	; 0x40
    2f64:	43b3      	bics	r3, r6
    2f66:	4303      	orrs	r3, r0
    2f68:	402a      	ands	r2, r5
    2f6a:	01d2      	lsls	r2, r2, #7
    2f6c:	2080      	movs	r0, #128	; 0x80
    2f6e:	4383      	bics	r3, r0
    2f70:	4313      	orrs	r3, r2
    2f72:	2203      	movs	r2, #3
    2f74:	4022      	ands	r2, r4
    2f76:	0212      	lsls	r2, r2, #8
    2f78:	4803      	ldr	r0, [pc, #12]	; (2f88 <system_clock_source_osc8m_set_config+0x38>)
    2f7a:	4003      	ands	r3, r0
    2f7c:	4313      	orrs	r3, r2
    2f7e:	620b      	str	r3, [r1, #32]
}
    2f80:	bd70      	pop	{r4, r5, r6, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	40000800 	.word	0x40000800
    2f88:	fffffcff 	.word	0xfffffcff

00002f8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f8c:	2808      	cmp	r0, #8
    2f8e:	d803      	bhi.n	2f98 <system_clock_source_enable+0xc>
    2f90:	0080      	lsls	r0, r0, #2
    2f92:	4b25      	ldr	r3, [pc, #148]	; (3028 <system_clock_source_enable+0x9c>)
    2f94:	581b      	ldr	r3, [r3, r0]
    2f96:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f98:	2017      	movs	r0, #23
    2f9a:	e044      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f9c:	4a23      	ldr	r2, [pc, #140]	; (302c <system_clock_source_enable+0xa0>)
    2f9e:	6a13      	ldr	r3, [r2, #32]
    2fa0:	2102      	movs	r1, #2
    2fa2:	430b      	orrs	r3, r1
    2fa4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2fa6:	2000      	movs	r0, #0
    2fa8:	e03d      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2faa:	4a20      	ldr	r2, [pc, #128]	; (302c <system_clock_source_enable+0xa0>)
    2fac:	6993      	ldr	r3, [r2, #24]
    2fae:	2102      	movs	r1, #2
    2fb0:	430b      	orrs	r3, r1
    2fb2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2fb4:	2000      	movs	r0, #0
		break;
    2fb6:	e036      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2fb8:	4a1c      	ldr	r2, [pc, #112]	; (302c <system_clock_source_enable+0xa0>)
    2fba:	8a13      	ldrh	r3, [r2, #16]
    2fbc:	2102      	movs	r1, #2
    2fbe:	430b      	orrs	r3, r1
    2fc0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2fc2:	2000      	movs	r0, #0
		break;
    2fc4:	e02f      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2fc6:	4a19      	ldr	r2, [pc, #100]	; (302c <system_clock_source_enable+0xa0>)
    2fc8:	8a93      	ldrh	r3, [r2, #20]
    2fca:	2102      	movs	r1, #2
    2fcc:	430b      	orrs	r3, r1
    2fce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2fd0:	2000      	movs	r0, #0
		break;
    2fd2:	e028      	b.n	3026 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2fd4:	4916      	ldr	r1, [pc, #88]	; (3030 <system_clock_source_enable+0xa4>)
    2fd6:	680b      	ldr	r3, [r1, #0]
    2fd8:	2202      	movs	r2, #2
    2fda:	4313      	orrs	r3, r2
    2fdc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2fde:	4b13      	ldr	r3, [pc, #76]	; (302c <system_clock_source_enable+0xa0>)
    2fe0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fe2:	0019      	movs	r1, r3
    2fe4:	320e      	adds	r2, #14
    2fe6:	68cb      	ldr	r3, [r1, #12]
    2fe8:	421a      	tst	r2, r3
    2fea:	d0fc      	beq.n	2fe6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2fec:	4a10      	ldr	r2, [pc, #64]	; (3030 <system_clock_source_enable+0xa4>)
    2fee:	6891      	ldr	r1, [r2, #8]
    2ff0:	4b0e      	ldr	r3, [pc, #56]	; (302c <system_clock_source_enable+0xa0>)
    2ff2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ff4:	6852      	ldr	r2, [r2, #4]
    2ff6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2ff8:	2200      	movs	r2, #0
    2ffa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ffc:	0019      	movs	r1, r3
    2ffe:	3210      	adds	r2, #16
    3000:	68cb      	ldr	r3, [r1, #12]
    3002:	421a      	tst	r2, r3
    3004:	d0fc      	beq.n	3000 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3006:	4b0a      	ldr	r3, [pc, #40]	; (3030 <system_clock_source_enable+0xa4>)
    3008:	681b      	ldr	r3, [r3, #0]
    300a:	b29b      	uxth	r3, r3
    300c:	4a07      	ldr	r2, [pc, #28]	; (302c <system_clock_source_enable+0xa0>)
    300e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3010:	2000      	movs	r0, #0
    3012:	e008      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3014:	4905      	ldr	r1, [pc, #20]	; (302c <system_clock_source_enable+0xa0>)
    3016:	2244      	movs	r2, #68	; 0x44
    3018:	5c8b      	ldrb	r3, [r1, r2]
    301a:	2002      	movs	r0, #2
    301c:	4303      	orrs	r3, r0
    301e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3020:	2000      	movs	r0, #0
		break;
    3022:	e000      	b.n	3026 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3024:	2000      	movs	r0, #0
}
    3026:	4770      	bx	lr
    3028:	00003bfc 	.word	0x00003bfc
    302c:	40000800 	.word	0x40000800
    3030:	200000d0 	.word	0x200000d0

00003034 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3034:	b530      	push	{r4, r5, lr}
    3036:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3038:	22c2      	movs	r2, #194	; 0xc2
    303a:	00d2      	lsls	r2, r2, #3
    303c:	4b1a      	ldr	r3, [pc, #104]	; (30a8 <system_clock_init+0x74>)
    303e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3040:	4a1a      	ldr	r2, [pc, #104]	; (30ac <system_clock_init+0x78>)
    3042:	6853      	ldr	r3, [r2, #4]
    3044:	211e      	movs	r1, #30
    3046:	438b      	bics	r3, r1
    3048:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    304a:	2301      	movs	r3, #1
    304c:	466a      	mov	r2, sp
    304e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3050:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3052:	4d17      	ldr	r5, [pc, #92]	; (30b0 <system_clock_init+0x7c>)
    3054:	b2e0      	uxtb	r0, r4
    3056:	4669      	mov	r1, sp
    3058:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    305a:	3401      	adds	r4, #1
    305c:	2c18      	cmp	r4, #24
    305e:	d1f9      	bne.n	3054 <system_clock_init+0x20>
	config->run_in_standby  = false;
    3060:	a803      	add	r0, sp, #12
    3062:	2400      	movs	r4, #0
    3064:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    3066:	2501      	movs	r5, #1
    3068:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    306a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    306c:	4b11      	ldr	r3, [pc, #68]	; (30b4 <system_clock_init+0x80>)
    306e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3070:	2006      	movs	r0, #6
    3072:	4b11      	ldr	r3, [pc, #68]	; (30b8 <system_clock_init+0x84>)
    3074:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3076:	4b11      	ldr	r3, [pc, #68]	; (30bc <system_clock_init+0x88>)
    3078:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    307a:	4b11      	ldr	r3, [pc, #68]	; (30c0 <system_clock_init+0x8c>)
    307c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    307e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3080:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3082:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    3084:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    3086:	466b      	mov	r3, sp
    3088:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    308a:	2306      	movs	r3, #6
    308c:	466a      	mov	r2, sp
    308e:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    3090:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    3092:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3094:	4669      	mov	r1, sp
    3096:	2000      	movs	r0, #0
    3098:	4b0a      	ldr	r3, [pc, #40]	; (30c4 <system_clock_init+0x90>)
    309a:	4798      	blx	r3
    309c:	2000      	movs	r0, #0
    309e:	4b0a      	ldr	r3, [pc, #40]	; (30c8 <system_clock_init+0x94>)
    30a0:	4798      	blx	r3
#endif
}
    30a2:	b005      	add	sp, #20
    30a4:	bd30      	pop	{r4, r5, pc}
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	40000800 	.word	0x40000800
    30ac:	41004000 	.word	0x41004000
    30b0:	00003305 	.word	0x00003305
    30b4:	00002f51 	.word	0x00002f51
    30b8:	00002f8d 	.word	0x00002f8d
    30bc:	000030cd 	.word	0x000030cd
    30c0:	40000400 	.word	0x40000400
    30c4:	000030f1 	.word	0x000030f1
    30c8:	000031a9 	.word	0x000031a9

000030cc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    30cc:	4a06      	ldr	r2, [pc, #24]	; (30e8 <system_gclk_init+0x1c>)
    30ce:	6993      	ldr	r3, [r2, #24]
    30d0:	2108      	movs	r1, #8
    30d2:	430b      	orrs	r3, r1
    30d4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    30d6:	2201      	movs	r2, #1
    30d8:	4b04      	ldr	r3, [pc, #16]	; (30ec <system_gclk_init+0x20>)
    30da:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    30dc:	0019      	movs	r1, r3
    30de:	780b      	ldrb	r3, [r1, #0]
    30e0:	4213      	tst	r3, r2
    30e2:	d1fc      	bne.n	30de <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    30e4:	4770      	bx	lr
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	40000400 	.word	0x40000400
    30ec:	40000c00 	.word	0x40000c00

000030f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    30f4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    30f6:	780d      	ldrb	r5, [r1, #0]
    30f8:	022d      	lsls	r5, r5, #8
    30fa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    30fc:	784b      	ldrb	r3, [r1, #1]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3102:	2380      	movs	r3, #128	; 0x80
    3104:	02db      	lsls	r3, r3, #11
    3106:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3108:	7a4b      	ldrb	r3, [r1, #9]
    310a:	2b00      	cmp	r3, #0
    310c:	d002      	beq.n	3114 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    310e:	2380      	movs	r3, #128	; 0x80
    3110:	031b      	lsls	r3, r3, #12
    3112:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3114:	6848      	ldr	r0, [r1, #4]
    3116:	2801      	cmp	r0, #1
    3118:	d910      	bls.n	313c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    311a:	1e43      	subs	r3, r0, #1
    311c:	4218      	tst	r0, r3
    311e:	d134      	bne.n	318a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3120:	2802      	cmp	r0, #2
    3122:	d930      	bls.n	3186 <system_gclk_gen_set_config+0x96>
    3124:	2302      	movs	r3, #2
    3126:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3128:	3201      	adds	r2, #1
						mask <<= 1) {
    312a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    312c:	4298      	cmp	r0, r3
    312e:	d8fb      	bhi.n	3128 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3130:	0212      	lsls	r2, r2, #8
    3132:	4332      	orrs	r2, r6
    3134:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3136:	2380      	movs	r3, #128	; 0x80
    3138:	035b      	lsls	r3, r3, #13
    313a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    313c:	7a0b      	ldrb	r3, [r1, #8]
    313e:	2b00      	cmp	r3, #0
    3140:	d002      	beq.n	3148 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3142:	2380      	movs	r3, #128	; 0x80
    3144:	039b      	lsls	r3, r3, #14
    3146:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3148:	4a13      	ldr	r2, [pc, #76]	; (3198 <system_gclk_gen_set_config+0xa8>)
    314a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    314c:	b25b      	sxtb	r3, r3
    314e:	2b00      	cmp	r3, #0
    3150:	dbfb      	blt.n	314a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3152:	4b12      	ldr	r3, [pc, #72]	; (319c <system_gclk_gen_set_config+0xac>)
    3154:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3156:	4b12      	ldr	r3, [pc, #72]	; (31a0 <system_gclk_gen_set_config+0xb0>)
    3158:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    315a:	4a0f      	ldr	r2, [pc, #60]	; (3198 <system_gclk_gen_set_config+0xa8>)
    315c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    315e:	b25b      	sxtb	r3, r3
    3160:	2b00      	cmp	r3, #0
    3162:	dbfb      	blt.n	315c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3164:	4b0c      	ldr	r3, [pc, #48]	; (3198 <system_gclk_gen_set_config+0xa8>)
    3166:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3168:	001a      	movs	r2, r3
    316a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    316c:	b25b      	sxtb	r3, r3
    316e:	2b00      	cmp	r3, #0
    3170:	dbfb      	blt.n	316a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3172:	4a09      	ldr	r2, [pc, #36]	; (3198 <system_gclk_gen_set_config+0xa8>)
    3174:	6853      	ldr	r3, [r2, #4]
    3176:	2180      	movs	r1, #128	; 0x80
    3178:	0249      	lsls	r1, r1, #9
    317a:	400b      	ands	r3, r1
    317c:	431d      	orrs	r5, r3
    317e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3180:	4b08      	ldr	r3, [pc, #32]	; (31a4 <system_gclk_gen_set_config+0xb4>)
    3182:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3184:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3186:	2200      	movs	r2, #0
    3188:	e7d2      	b.n	3130 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    318a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    318c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    318e:	2380      	movs	r3, #128	; 0x80
    3190:	029b      	lsls	r3, r3, #10
    3192:	431d      	orrs	r5, r3
    3194:	e7d2      	b.n	313c <system_gclk_gen_set_config+0x4c>
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	40000c00 	.word	0x40000c00
    319c:	00002e51 	.word	0x00002e51
    31a0:	40000c08 	.word	0x40000c08
    31a4:	00002e91 	.word	0x00002e91

000031a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    31a8:	b510      	push	{r4, lr}
    31aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31ac:	4a0b      	ldr	r2, [pc, #44]	; (31dc <system_gclk_gen_enable+0x34>)
    31ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31b0:	b25b      	sxtb	r3, r3
    31b2:	2b00      	cmp	r3, #0
    31b4:	dbfb      	blt.n	31ae <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    31b6:	4b0a      	ldr	r3, [pc, #40]	; (31e0 <system_gclk_gen_enable+0x38>)
    31b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31ba:	4b0a      	ldr	r3, [pc, #40]	; (31e4 <system_gclk_gen_enable+0x3c>)
    31bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31be:	4a07      	ldr	r2, [pc, #28]	; (31dc <system_gclk_gen_enable+0x34>)
    31c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31c2:	b25b      	sxtb	r3, r3
    31c4:	2b00      	cmp	r3, #0
    31c6:	dbfb      	blt.n	31c0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    31c8:	4a04      	ldr	r2, [pc, #16]	; (31dc <system_gclk_gen_enable+0x34>)
    31ca:	6851      	ldr	r1, [r2, #4]
    31cc:	2380      	movs	r3, #128	; 0x80
    31ce:	025b      	lsls	r3, r3, #9
    31d0:	430b      	orrs	r3, r1
    31d2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    31d4:	4b04      	ldr	r3, [pc, #16]	; (31e8 <system_gclk_gen_enable+0x40>)
    31d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31d8:	bd10      	pop	{r4, pc}
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	40000c00 	.word	0x40000c00
    31e0:	00002e51 	.word	0x00002e51
    31e4:	40000c04 	.word	0x40000c04
    31e8:	00002e91 	.word	0x00002e91

000031ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    31ec:	b570      	push	{r4, r5, r6, lr}
    31ee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31f0:	4a1a      	ldr	r2, [pc, #104]	; (325c <system_gclk_gen_get_hz+0x70>)
    31f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31f4:	b25b      	sxtb	r3, r3
    31f6:	2b00      	cmp	r3, #0
    31f8:	dbfb      	blt.n	31f2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    31fa:	4b19      	ldr	r3, [pc, #100]	; (3260 <system_gclk_gen_get_hz+0x74>)
    31fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31fe:	4b19      	ldr	r3, [pc, #100]	; (3264 <system_gclk_gen_get_hz+0x78>)
    3200:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3202:	4a16      	ldr	r2, [pc, #88]	; (325c <system_gclk_gen_get_hz+0x70>)
    3204:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3206:	b25b      	sxtb	r3, r3
    3208:	2b00      	cmp	r3, #0
    320a:	dbfb      	blt.n	3204 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    320c:	4e13      	ldr	r6, [pc, #76]	; (325c <system_gclk_gen_get_hz+0x70>)
    320e:	6870      	ldr	r0, [r6, #4]
    3210:	04c0      	lsls	r0, r0, #19
    3212:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3214:	4b14      	ldr	r3, [pc, #80]	; (3268 <system_gclk_gen_get_hz+0x7c>)
    3216:	4798      	blx	r3
    3218:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    321a:	4b12      	ldr	r3, [pc, #72]	; (3264 <system_gclk_gen_get_hz+0x78>)
    321c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    321e:	6876      	ldr	r6, [r6, #4]
    3220:	02f6      	lsls	r6, r6, #11
    3222:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3224:	4b11      	ldr	r3, [pc, #68]	; (326c <system_gclk_gen_get_hz+0x80>)
    3226:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3228:	4a0c      	ldr	r2, [pc, #48]	; (325c <system_gclk_gen_get_hz+0x70>)
    322a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    322c:	b25b      	sxtb	r3, r3
    322e:	2b00      	cmp	r3, #0
    3230:	dbfb      	blt.n	322a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3232:	4b0a      	ldr	r3, [pc, #40]	; (325c <system_gclk_gen_get_hz+0x70>)
    3234:	689c      	ldr	r4, [r3, #8]
    3236:	0224      	lsls	r4, r4, #8
    3238:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    323a:	4b0d      	ldr	r3, [pc, #52]	; (3270 <system_gclk_gen_get_hz+0x84>)
    323c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    323e:	2e00      	cmp	r6, #0
    3240:	d107      	bne.n	3252 <system_gclk_gen_get_hz+0x66>
    3242:	2c01      	cmp	r4, #1
    3244:	d907      	bls.n	3256 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3246:	0021      	movs	r1, r4
    3248:	0028      	movs	r0, r5
    324a:	4b0a      	ldr	r3, [pc, #40]	; (3274 <system_gclk_gen_get_hz+0x88>)
    324c:	4798      	blx	r3
    324e:	0005      	movs	r5, r0
    3250:	e001      	b.n	3256 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3252:	3401      	adds	r4, #1
    3254:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3256:	0028      	movs	r0, r5
    3258:	bd70      	pop	{r4, r5, r6, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	40000c00 	.word	0x40000c00
    3260:	00002e51 	.word	0x00002e51
    3264:	40000c04 	.word	0x40000c04
    3268:	00002ec1 	.word	0x00002ec1
    326c:	40000c08 	.word	0x40000c08
    3270:	00002e91 	.word	0x00002e91
    3274:	000035ed 	.word	0x000035ed

00003278 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3278:	b510      	push	{r4, lr}
    327a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    327c:	4b06      	ldr	r3, [pc, #24]	; (3298 <system_gclk_chan_enable+0x20>)
    327e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3280:	4b06      	ldr	r3, [pc, #24]	; (329c <system_gclk_chan_enable+0x24>)
    3282:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3284:	4a06      	ldr	r2, [pc, #24]	; (32a0 <system_gclk_chan_enable+0x28>)
    3286:	8853      	ldrh	r3, [r2, #2]
    3288:	2180      	movs	r1, #128	; 0x80
    328a:	01c9      	lsls	r1, r1, #7
    328c:	430b      	orrs	r3, r1
    328e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3290:	4b04      	ldr	r3, [pc, #16]	; (32a4 <system_gclk_chan_enable+0x2c>)
    3292:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3294:	bd10      	pop	{r4, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	00002e51 	.word	0x00002e51
    329c:	40000c02 	.word	0x40000c02
    32a0:	40000c00 	.word	0x40000c00
    32a4:	00002e91 	.word	0x00002e91

000032a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    32a8:	b510      	push	{r4, lr}
    32aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32ac:	4b0f      	ldr	r3, [pc, #60]	; (32ec <system_gclk_chan_disable+0x44>)
    32ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32b0:	4b0f      	ldr	r3, [pc, #60]	; (32f0 <system_gclk_chan_disable+0x48>)
    32b2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    32b4:	4a0f      	ldr	r2, [pc, #60]	; (32f4 <system_gclk_chan_disable+0x4c>)
    32b6:	8853      	ldrh	r3, [r2, #2]
    32b8:	051b      	lsls	r3, r3, #20
    32ba:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    32bc:	8853      	ldrh	r3, [r2, #2]
    32be:	490e      	ldr	r1, [pc, #56]	; (32f8 <system_gclk_chan_disable+0x50>)
    32c0:	400b      	ands	r3, r1
    32c2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    32c4:	8853      	ldrh	r3, [r2, #2]
    32c6:	490d      	ldr	r1, [pc, #52]	; (32fc <system_gclk_chan_disable+0x54>)
    32c8:	400b      	ands	r3, r1
    32ca:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    32cc:	0011      	movs	r1, r2
    32ce:	2280      	movs	r2, #128	; 0x80
    32d0:	01d2      	lsls	r2, r2, #7
    32d2:	884b      	ldrh	r3, [r1, #2]
    32d4:	4213      	tst	r3, r2
    32d6:	d1fc      	bne.n	32d2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    32d8:	4906      	ldr	r1, [pc, #24]	; (32f4 <system_gclk_chan_disable+0x4c>)
    32da:	884a      	ldrh	r2, [r1, #2]
    32dc:	0203      	lsls	r3, r0, #8
    32de:	4806      	ldr	r0, [pc, #24]	; (32f8 <system_gclk_chan_disable+0x50>)
    32e0:	4002      	ands	r2, r0
    32e2:	4313      	orrs	r3, r2
    32e4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    32e6:	4b06      	ldr	r3, [pc, #24]	; (3300 <system_gclk_chan_disable+0x58>)
    32e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32ea:	bd10      	pop	{r4, pc}
    32ec:	00002e51 	.word	0x00002e51
    32f0:	40000c02 	.word	0x40000c02
    32f4:	40000c00 	.word	0x40000c00
    32f8:	fffff0ff 	.word	0xfffff0ff
    32fc:	ffffbfff 	.word	0xffffbfff
    3300:	00002e91 	.word	0x00002e91

00003304 <system_gclk_chan_set_config>:
{
    3304:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3306:	780c      	ldrb	r4, [r1, #0]
    3308:	0224      	lsls	r4, r4, #8
    330a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    330c:	4b02      	ldr	r3, [pc, #8]	; (3318 <system_gclk_chan_set_config+0x14>)
    330e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3310:	b2a4      	uxth	r4, r4
    3312:	4b02      	ldr	r3, [pc, #8]	; (331c <system_gclk_chan_set_config+0x18>)
    3314:	805c      	strh	r4, [r3, #2]
}
    3316:	bd10      	pop	{r4, pc}
    3318:	000032a9 	.word	0x000032a9
    331c:	40000c00 	.word	0x40000c00

00003320 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3320:	b510      	push	{r4, lr}
    3322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3324:	4b06      	ldr	r3, [pc, #24]	; (3340 <system_gclk_chan_get_hz+0x20>)
    3326:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3328:	4b06      	ldr	r3, [pc, #24]	; (3344 <system_gclk_chan_get_hz+0x24>)
    332a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    332c:	4b06      	ldr	r3, [pc, #24]	; (3348 <system_gclk_chan_get_hz+0x28>)
    332e:	885c      	ldrh	r4, [r3, #2]
    3330:	0524      	lsls	r4, r4, #20
    3332:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3334:	4b05      	ldr	r3, [pc, #20]	; (334c <system_gclk_chan_get_hz+0x2c>)
    3336:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3338:	0020      	movs	r0, r4
    333a:	4b05      	ldr	r3, [pc, #20]	; (3350 <system_gclk_chan_get_hz+0x30>)
    333c:	4798      	blx	r3
}
    333e:	bd10      	pop	{r4, pc}
    3340:	00002e51 	.word	0x00002e51
    3344:	40000c02 	.word	0x40000c02
    3348:	40000c00 	.word	0x40000c00
    334c:	00002e91 	.word	0x00002e91
    3350:	000031ed 	.word	0x000031ed

00003354 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3354:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3356:	78d3      	ldrb	r3, [r2, #3]
    3358:	2b00      	cmp	r3, #0
    335a:	d135      	bne.n	33c8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    335c:	7813      	ldrb	r3, [r2, #0]
    335e:	2b80      	cmp	r3, #128	; 0x80
    3360:	d029      	beq.n	33b6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3362:	061b      	lsls	r3, r3, #24
    3364:	2480      	movs	r4, #128	; 0x80
    3366:	0264      	lsls	r4, r4, #9
    3368:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    336a:	7854      	ldrb	r4, [r2, #1]
    336c:	2502      	movs	r5, #2
    336e:	43ac      	bics	r4, r5
    3370:	d106      	bne.n	3380 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3372:	7894      	ldrb	r4, [r2, #2]
    3374:	2c00      	cmp	r4, #0
    3376:	d120      	bne.n	33ba <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3378:	2480      	movs	r4, #128	; 0x80
    337a:	02a4      	lsls	r4, r4, #10
    337c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    337e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3380:	7854      	ldrb	r4, [r2, #1]
    3382:	3c01      	subs	r4, #1
    3384:	2c01      	cmp	r4, #1
    3386:	d91c      	bls.n	33c2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3388:	040d      	lsls	r5, r1, #16
    338a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    338c:	24a0      	movs	r4, #160	; 0xa0
    338e:	05e4      	lsls	r4, r4, #23
    3390:	432c      	orrs	r4, r5
    3392:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3394:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3396:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3398:	24d0      	movs	r4, #208	; 0xd0
    339a:	0624      	lsls	r4, r4, #24
    339c:	432c      	orrs	r4, r5
    339e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33a0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    33a2:	78d4      	ldrb	r4, [r2, #3]
    33a4:	2c00      	cmp	r4, #0
    33a6:	d122      	bne.n	33ee <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    33a8:	035b      	lsls	r3, r3, #13
    33aa:	d51c      	bpl.n	33e6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33ac:	7893      	ldrb	r3, [r2, #2]
    33ae:	2b01      	cmp	r3, #1
    33b0:	d01e      	beq.n	33f0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    33b2:	6141      	str	r1, [r0, #20]
    33b4:	e017      	b.n	33e6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    33b6:	2300      	movs	r3, #0
    33b8:	e7d7      	b.n	336a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    33ba:	24c0      	movs	r4, #192	; 0xc0
    33bc:	02e4      	lsls	r4, r4, #11
    33be:	4323      	orrs	r3, r4
    33c0:	e7dd      	b.n	337e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    33c2:	4c0d      	ldr	r4, [pc, #52]	; (33f8 <_system_pinmux_config+0xa4>)
    33c4:	4023      	ands	r3, r4
    33c6:	e7df      	b.n	3388 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    33c8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33ca:	040c      	lsls	r4, r1, #16
    33cc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33ce:	23a0      	movs	r3, #160	; 0xa0
    33d0:	05db      	lsls	r3, r3, #23
    33d2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33d4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33d6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33d8:	23d0      	movs	r3, #208	; 0xd0
    33da:	061b      	lsls	r3, r3, #24
    33dc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33de:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    33e0:	78d3      	ldrb	r3, [r2, #3]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d103      	bne.n	33ee <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33e6:	7853      	ldrb	r3, [r2, #1]
    33e8:	3b01      	subs	r3, #1
    33ea:	2b01      	cmp	r3, #1
    33ec:	d902      	bls.n	33f4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    33ee:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    33f0:	6181      	str	r1, [r0, #24]
    33f2:	e7f8      	b.n	33e6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    33f4:	6081      	str	r1, [r0, #8]
}
    33f6:	e7fa      	b.n	33ee <_system_pinmux_config+0x9a>
    33f8:	fffbffff 	.word	0xfffbffff

000033fc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    33fc:	b510      	push	{r4, lr}
    33fe:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3400:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3402:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3404:	2900      	cmp	r1, #0
    3406:	d104      	bne.n	3412 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3408:	0943      	lsrs	r3, r0, #5
    340a:	01db      	lsls	r3, r3, #7
    340c:	4905      	ldr	r1, [pc, #20]	; (3424 <system_pinmux_pin_set_config+0x28>)
    340e:	468c      	mov	ip, r1
    3410:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3412:	241f      	movs	r4, #31
    3414:	4020      	ands	r0, r4
    3416:	2101      	movs	r1, #1
    3418:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    341a:	0018      	movs	r0, r3
    341c:	4b02      	ldr	r3, [pc, #8]	; (3428 <system_pinmux_pin_set_config+0x2c>)
    341e:	4798      	blx	r3
}
    3420:	bd10      	pop	{r4, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	41004400 	.word	0x41004400
    3428:	00003355 	.word	0x00003355

0000342c <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	46c6      	mov	lr, r8
    3430:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    3432:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    3434:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    3436:	2440      	movs	r4, #64	; 0x40
    3438:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    343a:	46a4      	mov	ip, r4
    343c:	e009      	b.n	3452 <system_pinmux_group_set_output_strength+0x26>
    343e:	18c5      	adds	r5, r0, r3
    3440:	3540      	adds	r5, #64	; 0x40
    3442:	782c      	ldrb	r4, [r5, #0]
    3444:	4667      	mov	r7, ip
    3446:	433c      	orrs	r4, r7
    3448:	b2e4      	uxtb	r4, r4
    344a:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    344c:	3301      	adds	r3, #1
    344e:	2b20      	cmp	r3, #32
    3450:	d00c      	beq.n	346c <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    3452:	000c      	movs	r4, r1
    3454:	40dc      	lsrs	r4, r3
    3456:	4226      	tst	r6, r4
    3458:	d0f8      	beq.n	344c <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    345a:	2a01      	cmp	r2, #1
    345c:	d0ef      	beq.n	343e <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    345e:	18c4      	adds	r4, r0, r3
    3460:	3440      	adds	r4, #64	; 0x40
    3462:	7825      	ldrb	r5, [r4, #0]
    3464:	4647      	mov	r7, r8
    3466:	43bd      	bics	r5, r7
    3468:	7025      	strb	r5, [r4, #0]
    346a:	e7ef      	b.n	344c <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    346c:	bc04      	pop	{r2}
    346e:	4690      	mov	r8, r2
    3470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003472 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3472:	4770      	bx	lr

00003474 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3474:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3476:	4b05      	ldr	r3, [pc, #20]	; (348c <system_init+0x18>)
    3478:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <system_init+0x1c>)
    347c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <system_init+0x20>)
    3480:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <system_init+0x24>)
    3484:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3486:	4b05      	ldr	r3, [pc, #20]	; (349c <system_init+0x28>)
    3488:	4798      	blx	r3
}
    348a:	bd10      	pop	{r4, pc}
    348c:	00003035 	.word	0x00003035
    3490:	00002e4d 	.word	0x00002e4d
    3494:	00003473 	.word	0x00003473
    3498:	000016fd 	.word	0x000016fd
    349c:	00003473 	.word	0x00003473

000034a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34a0:	e7fe      	b.n	34a0 <Dummy_Handler>
	...

000034a4 <Reset_Handler>:
void Reset_Handler(void){
    34a4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    34a6:	4a26      	ldr	r2, [pc, #152]	; (3540 <Reset_Handler+0x9c>)
    34a8:	4b26      	ldr	r3, [pc, #152]	; (3544 <Reset_Handler+0xa0>)
    34aa:	429a      	cmp	r2, r3
    34ac:	d011      	beq.n	34d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    34ae:	001a      	movs	r2, r3
    34b0:	4b25      	ldr	r3, [pc, #148]	; (3548 <Reset_Handler+0xa4>)
    34b2:	429a      	cmp	r2, r3
    34b4:	d20d      	bcs.n	34d2 <Reset_Handler+0x2e>
    34b6:	4a25      	ldr	r2, [pc, #148]	; (354c <Reset_Handler+0xa8>)
    34b8:	3303      	adds	r3, #3
    34ba:	1a9b      	subs	r3, r3, r2
    34bc:	089b      	lsrs	r3, r3, #2
    34be:	3301      	adds	r3, #1
    34c0:	009b      	lsls	r3, r3, #2
    34c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    34c4:	481f      	ldr	r0, [pc, #124]	; (3544 <Reset_Handler+0xa0>)
    34c6:	491e      	ldr	r1, [pc, #120]	; (3540 <Reset_Handler+0x9c>)
    34c8:	588c      	ldr	r4, [r1, r2]
    34ca:	5084      	str	r4, [r0, r2]
    34cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    34ce:	429a      	cmp	r2, r3
    34d0:	d1fa      	bne.n	34c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    34d2:	4a1f      	ldr	r2, [pc, #124]	; (3550 <Reset_Handler+0xac>)
    34d4:	4b1f      	ldr	r3, [pc, #124]	; (3554 <Reset_Handler+0xb0>)
    34d6:	429a      	cmp	r2, r3
    34d8:	d20a      	bcs.n	34f0 <Reset_Handler+0x4c>
    34da:	43d3      	mvns	r3, r2
    34dc:	491d      	ldr	r1, [pc, #116]	; (3554 <Reset_Handler+0xb0>)
    34de:	185b      	adds	r3, r3, r1
    34e0:	2103      	movs	r1, #3
    34e2:	438b      	bics	r3, r1
    34e4:	3304      	adds	r3, #4
    34e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    34e8:	2100      	movs	r1, #0
    34ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    34ec:	4293      	cmp	r3, r2
    34ee:	d1fc      	bne.n	34ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34f0:	4a19      	ldr	r2, [pc, #100]	; (3558 <Reset_Handler+0xb4>)
    34f2:	21ff      	movs	r1, #255	; 0xff
    34f4:	4b19      	ldr	r3, [pc, #100]	; (355c <Reset_Handler+0xb8>)
    34f6:	438b      	bics	r3, r1
    34f8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    34fa:	39fd      	subs	r1, #253	; 0xfd
    34fc:	2390      	movs	r3, #144	; 0x90
    34fe:	005b      	lsls	r3, r3, #1
    3500:	4a17      	ldr	r2, [pc, #92]	; (3560 <Reset_Handler+0xbc>)
    3502:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3504:	4b17      	ldr	r3, [pc, #92]	; (3564 <Reset_Handler+0xc0>)
    3506:	7b9a      	ldrb	r2, [r3, #14]
    3508:	312e      	adds	r1, #46	; 0x2e
    350a:	438a      	bics	r2, r1
    350c:	2120      	movs	r1, #32
    350e:	430a      	orrs	r2, r1
    3510:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3512:	7b9a      	ldrb	r2, [r3, #14]
    3514:	210c      	movs	r1, #12
    3516:	438a      	bics	r2, r1
    3518:	2108      	movs	r1, #8
    351a:	430a      	orrs	r2, r1
    351c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    351e:	7b9a      	ldrb	r2, [r3, #14]
    3520:	2103      	movs	r1, #3
    3522:	438a      	bics	r2, r1
    3524:	2102      	movs	r1, #2
    3526:	430a      	orrs	r2, r1
    3528:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    352a:	4a0f      	ldr	r2, [pc, #60]	; (3568 <Reset_Handler+0xc4>)
    352c:	6853      	ldr	r3, [r2, #4]
    352e:	2180      	movs	r1, #128	; 0x80
    3530:	430b      	orrs	r3, r1
    3532:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3534:	4b0d      	ldr	r3, [pc, #52]	; (356c <Reset_Handler+0xc8>)
    3536:	4798      	blx	r3
        main();
    3538:	4b0d      	ldr	r3, [pc, #52]	; (3570 <Reset_Handler+0xcc>)
    353a:	4798      	blx	r3
    353c:	e7fe      	b.n	353c <Reset_Handler+0x98>
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	00003c40 	.word	0x00003c40
    3544:	20000000 	.word	0x20000000
    3548:	20000074 	.word	0x20000074
    354c:	20000004 	.word	0x20000004
    3550:	20000074 	.word	0x20000074
    3554:	20000354 	.word	0x20000354
    3558:	e000ed00 	.word	0xe000ed00
    355c:	00000800 	.word	0x00000800
    3560:	41007000 	.word	0x41007000
    3564:	41004800 	.word	0x41004800
    3568:	41004000 	.word	0x41004000
    356c:	000038d9 	.word	0x000038d9
    3570:	00003599 	.word	0x00003599

00003574 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3574:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3576:	4a06      	ldr	r2, [pc, #24]	; (3590 <_sbrk+0x1c>)
    3578:	6812      	ldr	r2, [r2, #0]
    357a:	2a00      	cmp	r2, #0
    357c:	d004      	beq.n	3588 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    357e:	4a04      	ldr	r2, [pc, #16]	; (3590 <_sbrk+0x1c>)
    3580:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3582:	18c3      	adds	r3, r0, r3
    3584:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3586:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3588:	4902      	ldr	r1, [pc, #8]	; (3594 <_sbrk+0x20>)
    358a:	4a01      	ldr	r2, [pc, #4]	; (3590 <_sbrk+0x1c>)
    358c:	6011      	str	r1, [r2, #0]
    358e:	e7f6      	b.n	357e <_sbrk+0xa>
    3590:	200000e8 	.word	0x200000e8
    3594:	20000758 	.word	0x20000758

00003598 <main>:
		}
	}
}

int main (void)
{
    3598:	b570      	push	{r4, r5, r6, lr}
	system_init();
    359a:	4b0a      	ldr	r3, [pc, #40]	; (35c4 <main+0x2c>)
    359c:	4798      	blx	r3
	delay_init();
    359e:	4b0a      	ldr	r3, [pc, #40]	; (35c8 <main+0x30>)
    35a0:	4798      	blx	r3
	ORB_init();
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <main+0x34>)
    35a4:	4798      	blx	r3
	//microbit_connection();
	sensor_init();
    35a6:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <main+0x38>)
    35a8:	4798      	blx	r3
	super_servo_init();
    35aa:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <main+0x3c>)
    35ac:	4798      	blx	r3
	enable_super_servo();
    35ae:	4b0a      	ldr	r3, [pc, #40]	; (35d8 <main+0x40>)
    35b0:	4798      	blx	r3
	enable_ORB();
    35b2:	4b0a      	ldr	r3, [pc, #40]	; (35dc <main+0x44>)
    35b4:	4798      	blx	r3
	spi_slave_init();
    35b6:	4b0a      	ldr	r3, [pc, #40]	; (35e0 <main+0x48>)
    35b8:	4798      	blx	r3
		read_all_sensors();
    35ba:	4d0a      	ldr	r5, [pc, #40]	; (35e4 <main+0x4c>)
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		//microbit_connection();
		sensor_check();
		spi_main_loop();
    35bc:	4c0a      	ldr	r4, [pc, #40]	; (35e8 <main+0x50>)
		read_all_sensors();
    35be:	47a8      	blx	r5
		spi_main_loop();
    35c0:	47a0      	blx	r4
    35c2:	e7fc      	b.n	35be <main+0x26>
    35c4:	00003475 	.word	0x00003475
    35c8:	00001175 	.word	0x00001175
    35cc:	00002e29 	.word	0x00002e29
    35d0:	00001cc5 	.word	0x00001cc5
    35d4:	00001d81 	.word	0x00001d81
    35d8:	00001cd1 	.word	0x00001cd1
    35dc:	00002d61 	.word	0x00002d61
    35e0:	00001051 	.word	0x00001051
    35e4:	00001ab1 	.word	0x00001ab1
    35e8:	00000da1 	.word	0x00000da1

000035ec <__udivsi3>:
    35ec:	2200      	movs	r2, #0
    35ee:	0843      	lsrs	r3, r0, #1
    35f0:	428b      	cmp	r3, r1
    35f2:	d374      	bcc.n	36de <__udivsi3+0xf2>
    35f4:	0903      	lsrs	r3, r0, #4
    35f6:	428b      	cmp	r3, r1
    35f8:	d35f      	bcc.n	36ba <__udivsi3+0xce>
    35fa:	0a03      	lsrs	r3, r0, #8
    35fc:	428b      	cmp	r3, r1
    35fe:	d344      	bcc.n	368a <__udivsi3+0x9e>
    3600:	0b03      	lsrs	r3, r0, #12
    3602:	428b      	cmp	r3, r1
    3604:	d328      	bcc.n	3658 <__udivsi3+0x6c>
    3606:	0c03      	lsrs	r3, r0, #16
    3608:	428b      	cmp	r3, r1
    360a:	d30d      	bcc.n	3628 <__udivsi3+0x3c>
    360c:	22ff      	movs	r2, #255	; 0xff
    360e:	0209      	lsls	r1, r1, #8
    3610:	ba12      	rev	r2, r2
    3612:	0c03      	lsrs	r3, r0, #16
    3614:	428b      	cmp	r3, r1
    3616:	d302      	bcc.n	361e <__udivsi3+0x32>
    3618:	1212      	asrs	r2, r2, #8
    361a:	0209      	lsls	r1, r1, #8
    361c:	d065      	beq.n	36ea <__udivsi3+0xfe>
    361e:	0b03      	lsrs	r3, r0, #12
    3620:	428b      	cmp	r3, r1
    3622:	d319      	bcc.n	3658 <__udivsi3+0x6c>
    3624:	e000      	b.n	3628 <__udivsi3+0x3c>
    3626:	0a09      	lsrs	r1, r1, #8
    3628:	0bc3      	lsrs	r3, r0, #15
    362a:	428b      	cmp	r3, r1
    362c:	d301      	bcc.n	3632 <__udivsi3+0x46>
    362e:	03cb      	lsls	r3, r1, #15
    3630:	1ac0      	subs	r0, r0, r3
    3632:	4152      	adcs	r2, r2
    3634:	0b83      	lsrs	r3, r0, #14
    3636:	428b      	cmp	r3, r1
    3638:	d301      	bcc.n	363e <__udivsi3+0x52>
    363a:	038b      	lsls	r3, r1, #14
    363c:	1ac0      	subs	r0, r0, r3
    363e:	4152      	adcs	r2, r2
    3640:	0b43      	lsrs	r3, r0, #13
    3642:	428b      	cmp	r3, r1
    3644:	d301      	bcc.n	364a <__udivsi3+0x5e>
    3646:	034b      	lsls	r3, r1, #13
    3648:	1ac0      	subs	r0, r0, r3
    364a:	4152      	adcs	r2, r2
    364c:	0b03      	lsrs	r3, r0, #12
    364e:	428b      	cmp	r3, r1
    3650:	d301      	bcc.n	3656 <__udivsi3+0x6a>
    3652:	030b      	lsls	r3, r1, #12
    3654:	1ac0      	subs	r0, r0, r3
    3656:	4152      	adcs	r2, r2
    3658:	0ac3      	lsrs	r3, r0, #11
    365a:	428b      	cmp	r3, r1
    365c:	d301      	bcc.n	3662 <__udivsi3+0x76>
    365e:	02cb      	lsls	r3, r1, #11
    3660:	1ac0      	subs	r0, r0, r3
    3662:	4152      	adcs	r2, r2
    3664:	0a83      	lsrs	r3, r0, #10
    3666:	428b      	cmp	r3, r1
    3668:	d301      	bcc.n	366e <__udivsi3+0x82>
    366a:	028b      	lsls	r3, r1, #10
    366c:	1ac0      	subs	r0, r0, r3
    366e:	4152      	adcs	r2, r2
    3670:	0a43      	lsrs	r3, r0, #9
    3672:	428b      	cmp	r3, r1
    3674:	d301      	bcc.n	367a <__udivsi3+0x8e>
    3676:	024b      	lsls	r3, r1, #9
    3678:	1ac0      	subs	r0, r0, r3
    367a:	4152      	adcs	r2, r2
    367c:	0a03      	lsrs	r3, r0, #8
    367e:	428b      	cmp	r3, r1
    3680:	d301      	bcc.n	3686 <__udivsi3+0x9a>
    3682:	020b      	lsls	r3, r1, #8
    3684:	1ac0      	subs	r0, r0, r3
    3686:	4152      	adcs	r2, r2
    3688:	d2cd      	bcs.n	3626 <__udivsi3+0x3a>
    368a:	09c3      	lsrs	r3, r0, #7
    368c:	428b      	cmp	r3, r1
    368e:	d301      	bcc.n	3694 <__udivsi3+0xa8>
    3690:	01cb      	lsls	r3, r1, #7
    3692:	1ac0      	subs	r0, r0, r3
    3694:	4152      	adcs	r2, r2
    3696:	0983      	lsrs	r3, r0, #6
    3698:	428b      	cmp	r3, r1
    369a:	d301      	bcc.n	36a0 <__udivsi3+0xb4>
    369c:	018b      	lsls	r3, r1, #6
    369e:	1ac0      	subs	r0, r0, r3
    36a0:	4152      	adcs	r2, r2
    36a2:	0943      	lsrs	r3, r0, #5
    36a4:	428b      	cmp	r3, r1
    36a6:	d301      	bcc.n	36ac <__udivsi3+0xc0>
    36a8:	014b      	lsls	r3, r1, #5
    36aa:	1ac0      	subs	r0, r0, r3
    36ac:	4152      	adcs	r2, r2
    36ae:	0903      	lsrs	r3, r0, #4
    36b0:	428b      	cmp	r3, r1
    36b2:	d301      	bcc.n	36b8 <__udivsi3+0xcc>
    36b4:	010b      	lsls	r3, r1, #4
    36b6:	1ac0      	subs	r0, r0, r3
    36b8:	4152      	adcs	r2, r2
    36ba:	08c3      	lsrs	r3, r0, #3
    36bc:	428b      	cmp	r3, r1
    36be:	d301      	bcc.n	36c4 <__udivsi3+0xd8>
    36c0:	00cb      	lsls	r3, r1, #3
    36c2:	1ac0      	subs	r0, r0, r3
    36c4:	4152      	adcs	r2, r2
    36c6:	0883      	lsrs	r3, r0, #2
    36c8:	428b      	cmp	r3, r1
    36ca:	d301      	bcc.n	36d0 <__udivsi3+0xe4>
    36cc:	008b      	lsls	r3, r1, #2
    36ce:	1ac0      	subs	r0, r0, r3
    36d0:	4152      	adcs	r2, r2
    36d2:	0843      	lsrs	r3, r0, #1
    36d4:	428b      	cmp	r3, r1
    36d6:	d301      	bcc.n	36dc <__udivsi3+0xf0>
    36d8:	004b      	lsls	r3, r1, #1
    36da:	1ac0      	subs	r0, r0, r3
    36dc:	4152      	adcs	r2, r2
    36de:	1a41      	subs	r1, r0, r1
    36e0:	d200      	bcs.n	36e4 <__udivsi3+0xf8>
    36e2:	4601      	mov	r1, r0
    36e4:	4152      	adcs	r2, r2
    36e6:	4610      	mov	r0, r2
    36e8:	4770      	bx	lr
    36ea:	e7ff      	b.n	36ec <__udivsi3+0x100>
    36ec:	b501      	push	{r0, lr}
    36ee:	2000      	movs	r0, #0
    36f0:	f000 f8f0 	bl	38d4 <__aeabi_idiv0>
    36f4:	bd02      	pop	{r1, pc}
    36f6:	46c0      	nop			; (mov r8, r8)

000036f8 <__aeabi_uidivmod>:
    36f8:	2900      	cmp	r1, #0
    36fa:	d0f7      	beq.n	36ec <__udivsi3+0x100>
    36fc:	e776      	b.n	35ec <__udivsi3>
    36fe:	4770      	bx	lr

00003700 <__divsi3>:
    3700:	4603      	mov	r3, r0
    3702:	430b      	orrs	r3, r1
    3704:	d47f      	bmi.n	3806 <__divsi3+0x106>
    3706:	2200      	movs	r2, #0
    3708:	0843      	lsrs	r3, r0, #1
    370a:	428b      	cmp	r3, r1
    370c:	d374      	bcc.n	37f8 <__divsi3+0xf8>
    370e:	0903      	lsrs	r3, r0, #4
    3710:	428b      	cmp	r3, r1
    3712:	d35f      	bcc.n	37d4 <__divsi3+0xd4>
    3714:	0a03      	lsrs	r3, r0, #8
    3716:	428b      	cmp	r3, r1
    3718:	d344      	bcc.n	37a4 <__divsi3+0xa4>
    371a:	0b03      	lsrs	r3, r0, #12
    371c:	428b      	cmp	r3, r1
    371e:	d328      	bcc.n	3772 <__divsi3+0x72>
    3720:	0c03      	lsrs	r3, r0, #16
    3722:	428b      	cmp	r3, r1
    3724:	d30d      	bcc.n	3742 <__divsi3+0x42>
    3726:	22ff      	movs	r2, #255	; 0xff
    3728:	0209      	lsls	r1, r1, #8
    372a:	ba12      	rev	r2, r2
    372c:	0c03      	lsrs	r3, r0, #16
    372e:	428b      	cmp	r3, r1
    3730:	d302      	bcc.n	3738 <__divsi3+0x38>
    3732:	1212      	asrs	r2, r2, #8
    3734:	0209      	lsls	r1, r1, #8
    3736:	d065      	beq.n	3804 <__divsi3+0x104>
    3738:	0b03      	lsrs	r3, r0, #12
    373a:	428b      	cmp	r3, r1
    373c:	d319      	bcc.n	3772 <__divsi3+0x72>
    373e:	e000      	b.n	3742 <__divsi3+0x42>
    3740:	0a09      	lsrs	r1, r1, #8
    3742:	0bc3      	lsrs	r3, r0, #15
    3744:	428b      	cmp	r3, r1
    3746:	d301      	bcc.n	374c <__divsi3+0x4c>
    3748:	03cb      	lsls	r3, r1, #15
    374a:	1ac0      	subs	r0, r0, r3
    374c:	4152      	adcs	r2, r2
    374e:	0b83      	lsrs	r3, r0, #14
    3750:	428b      	cmp	r3, r1
    3752:	d301      	bcc.n	3758 <__divsi3+0x58>
    3754:	038b      	lsls	r3, r1, #14
    3756:	1ac0      	subs	r0, r0, r3
    3758:	4152      	adcs	r2, r2
    375a:	0b43      	lsrs	r3, r0, #13
    375c:	428b      	cmp	r3, r1
    375e:	d301      	bcc.n	3764 <__divsi3+0x64>
    3760:	034b      	lsls	r3, r1, #13
    3762:	1ac0      	subs	r0, r0, r3
    3764:	4152      	adcs	r2, r2
    3766:	0b03      	lsrs	r3, r0, #12
    3768:	428b      	cmp	r3, r1
    376a:	d301      	bcc.n	3770 <__divsi3+0x70>
    376c:	030b      	lsls	r3, r1, #12
    376e:	1ac0      	subs	r0, r0, r3
    3770:	4152      	adcs	r2, r2
    3772:	0ac3      	lsrs	r3, r0, #11
    3774:	428b      	cmp	r3, r1
    3776:	d301      	bcc.n	377c <__divsi3+0x7c>
    3778:	02cb      	lsls	r3, r1, #11
    377a:	1ac0      	subs	r0, r0, r3
    377c:	4152      	adcs	r2, r2
    377e:	0a83      	lsrs	r3, r0, #10
    3780:	428b      	cmp	r3, r1
    3782:	d301      	bcc.n	3788 <__divsi3+0x88>
    3784:	028b      	lsls	r3, r1, #10
    3786:	1ac0      	subs	r0, r0, r3
    3788:	4152      	adcs	r2, r2
    378a:	0a43      	lsrs	r3, r0, #9
    378c:	428b      	cmp	r3, r1
    378e:	d301      	bcc.n	3794 <__divsi3+0x94>
    3790:	024b      	lsls	r3, r1, #9
    3792:	1ac0      	subs	r0, r0, r3
    3794:	4152      	adcs	r2, r2
    3796:	0a03      	lsrs	r3, r0, #8
    3798:	428b      	cmp	r3, r1
    379a:	d301      	bcc.n	37a0 <__divsi3+0xa0>
    379c:	020b      	lsls	r3, r1, #8
    379e:	1ac0      	subs	r0, r0, r3
    37a0:	4152      	adcs	r2, r2
    37a2:	d2cd      	bcs.n	3740 <__divsi3+0x40>
    37a4:	09c3      	lsrs	r3, r0, #7
    37a6:	428b      	cmp	r3, r1
    37a8:	d301      	bcc.n	37ae <__divsi3+0xae>
    37aa:	01cb      	lsls	r3, r1, #7
    37ac:	1ac0      	subs	r0, r0, r3
    37ae:	4152      	adcs	r2, r2
    37b0:	0983      	lsrs	r3, r0, #6
    37b2:	428b      	cmp	r3, r1
    37b4:	d301      	bcc.n	37ba <__divsi3+0xba>
    37b6:	018b      	lsls	r3, r1, #6
    37b8:	1ac0      	subs	r0, r0, r3
    37ba:	4152      	adcs	r2, r2
    37bc:	0943      	lsrs	r3, r0, #5
    37be:	428b      	cmp	r3, r1
    37c0:	d301      	bcc.n	37c6 <__divsi3+0xc6>
    37c2:	014b      	lsls	r3, r1, #5
    37c4:	1ac0      	subs	r0, r0, r3
    37c6:	4152      	adcs	r2, r2
    37c8:	0903      	lsrs	r3, r0, #4
    37ca:	428b      	cmp	r3, r1
    37cc:	d301      	bcc.n	37d2 <__divsi3+0xd2>
    37ce:	010b      	lsls	r3, r1, #4
    37d0:	1ac0      	subs	r0, r0, r3
    37d2:	4152      	adcs	r2, r2
    37d4:	08c3      	lsrs	r3, r0, #3
    37d6:	428b      	cmp	r3, r1
    37d8:	d301      	bcc.n	37de <__divsi3+0xde>
    37da:	00cb      	lsls	r3, r1, #3
    37dc:	1ac0      	subs	r0, r0, r3
    37de:	4152      	adcs	r2, r2
    37e0:	0883      	lsrs	r3, r0, #2
    37e2:	428b      	cmp	r3, r1
    37e4:	d301      	bcc.n	37ea <__divsi3+0xea>
    37e6:	008b      	lsls	r3, r1, #2
    37e8:	1ac0      	subs	r0, r0, r3
    37ea:	4152      	adcs	r2, r2
    37ec:	0843      	lsrs	r3, r0, #1
    37ee:	428b      	cmp	r3, r1
    37f0:	d301      	bcc.n	37f6 <__divsi3+0xf6>
    37f2:	004b      	lsls	r3, r1, #1
    37f4:	1ac0      	subs	r0, r0, r3
    37f6:	4152      	adcs	r2, r2
    37f8:	1a41      	subs	r1, r0, r1
    37fa:	d200      	bcs.n	37fe <__divsi3+0xfe>
    37fc:	4601      	mov	r1, r0
    37fe:	4152      	adcs	r2, r2
    3800:	4610      	mov	r0, r2
    3802:	4770      	bx	lr
    3804:	e05d      	b.n	38c2 <__divsi3+0x1c2>
    3806:	0fca      	lsrs	r2, r1, #31
    3808:	d000      	beq.n	380c <__divsi3+0x10c>
    380a:	4249      	negs	r1, r1
    380c:	1003      	asrs	r3, r0, #32
    380e:	d300      	bcc.n	3812 <__divsi3+0x112>
    3810:	4240      	negs	r0, r0
    3812:	4053      	eors	r3, r2
    3814:	2200      	movs	r2, #0
    3816:	469c      	mov	ip, r3
    3818:	0903      	lsrs	r3, r0, #4
    381a:	428b      	cmp	r3, r1
    381c:	d32d      	bcc.n	387a <__divsi3+0x17a>
    381e:	0a03      	lsrs	r3, r0, #8
    3820:	428b      	cmp	r3, r1
    3822:	d312      	bcc.n	384a <__divsi3+0x14a>
    3824:	22fc      	movs	r2, #252	; 0xfc
    3826:	0189      	lsls	r1, r1, #6
    3828:	ba12      	rev	r2, r2
    382a:	0a03      	lsrs	r3, r0, #8
    382c:	428b      	cmp	r3, r1
    382e:	d30c      	bcc.n	384a <__divsi3+0x14a>
    3830:	0189      	lsls	r1, r1, #6
    3832:	1192      	asrs	r2, r2, #6
    3834:	428b      	cmp	r3, r1
    3836:	d308      	bcc.n	384a <__divsi3+0x14a>
    3838:	0189      	lsls	r1, r1, #6
    383a:	1192      	asrs	r2, r2, #6
    383c:	428b      	cmp	r3, r1
    383e:	d304      	bcc.n	384a <__divsi3+0x14a>
    3840:	0189      	lsls	r1, r1, #6
    3842:	d03a      	beq.n	38ba <__divsi3+0x1ba>
    3844:	1192      	asrs	r2, r2, #6
    3846:	e000      	b.n	384a <__divsi3+0x14a>
    3848:	0989      	lsrs	r1, r1, #6
    384a:	09c3      	lsrs	r3, r0, #7
    384c:	428b      	cmp	r3, r1
    384e:	d301      	bcc.n	3854 <__divsi3+0x154>
    3850:	01cb      	lsls	r3, r1, #7
    3852:	1ac0      	subs	r0, r0, r3
    3854:	4152      	adcs	r2, r2
    3856:	0983      	lsrs	r3, r0, #6
    3858:	428b      	cmp	r3, r1
    385a:	d301      	bcc.n	3860 <__divsi3+0x160>
    385c:	018b      	lsls	r3, r1, #6
    385e:	1ac0      	subs	r0, r0, r3
    3860:	4152      	adcs	r2, r2
    3862:	0943      	lsrs	r3, r0, #5
    3864:	428b      	cmp	r3, r1
    3866:	d301      	bcc.n	386c <__divsi3+0x16c>
    3868:	014b      	lsls	r3, r1, #5
    386a:	1ac0      	subs	r0, r0, r3
    386c:	4152      	adcs	r2, r2
    386e:	0903      	lsrs	r3, r0, #4
    3870:	428b      	cmp	r3, r1
    3872:	d301      	bcc.n	3878 <__divsi3+0x178>
    3874:	010b      	lsls	r3, r1, #4
    3876:	1ac0      	subs	r0, r0, r3
    3878:	4152      	adcs	r2, r2
    387a:	08c3      	lsrs	r3, r0, #3
    387c:	428b      	cmp	r3, r1
    387e:	d301      	bcc.n	3884 <__divsi3+0x184>
    3880:	00cb      	lsls	r3, r1, #3
    3882:	1ac0      	subs	r0, r0, r3
    3884:	4152      	adcs	r2, r2
    3886:	0883      	lsrs	r3, r0, #2
    3888:	428b      	cmp	r3, r1
    388a:	d301      	bcc.n	3890 <__divsi3+0x190>
    388c:	008b      	lsls	r3, r1, #2
    388e:	1ac0      	subs	r0, r0, r3
    3890:	4152      	adcs	r2, r2
    3892:	d2d9      	bcs.n	3848 <__divsi3+0x148>
    3894:	0843      	lsrs	r3, r0, #1
    3896:	428b      	cmp	r3, r1
    3898:	d301      	bcc.n	389e <__divsi3+0x19e>
    389a:	004b      	lsls	r3, r1, #1
    389c:	1ac0      	subs	r0, r0, r3
    389e:	4152      	adcs	r2, r2
    38a0:	1a41      	subs	r1, r0, r1
    38a2:	d200      	bcs.n	38a6 <__divsi3+0x1a6>
    38a4:	4601      	mov	r1, r0
    38a6:	4663      	mov	r3, ip
    38a8:	4152      	adcs	r2, r2
    38aa:	105b      	asrs	r3, r3, #1
    38ac:	4610      	mov	r0, r2
    38ae:	d301      	bcc.n	38b4 <__divsi3+0x1b4>
    38b0:	4240      	negs	r0, r0
    38b2:	2b00      	cmp	r3, #0
    38b4:	d500      	bpl.n	38b8 <__divsi3+0x1b8>
    38b6:	4249      	negs	r1, r1
    38b8:	4770      	bx	lr
    38ba:	4663      	mov	r3, ip
    38bc:	105b      	asrs	r3, r3, #1
    38be:	d300      	bcc.n	38c2 <__divsi3+0x1c2>
    38c0:	4240      	negs	r0, r0
    38c2:	b501      	push	{r0, lr}
    38c4:	2000      	movs	r0, #0
    38c6:	f000 f805 	bl	38d4 <__aeabi_idiv0>
    38ca:	bd02      	pop	{r1, pc}

000038cc <__aeabi_idivmod>:
    38cc:	2900      	cmp	r1, #0
    38ce:	d0f8      	beq.n	38c2 <__divsi3+0x1c2>
    38d0:	e716      	b.n	3700 <__divsi3>
    38d2:	4770      	bx	lr

000038d4 <__aeabi_idiv0>:
    38d4:	4770      	bx	lr
    38d6:	46c0      	nop			; (mov r8, r8)

000038d8 <__libc_init_array>:
    38d8:	b570      	push	{r4, r5, r6, lr}
    38da:	2600      	movs	r6, #0
    38dc:	4d0c      	ldr	r5, [pc, #48]	; (3910 <__libc_init_array+0x38>)
    38de:	4c0d      	ldr	r4, [pc, #52]	; (3914 <__libc_init_array+0x3c>)
    38e0:	1b64      	subs	r4, r4, r5
    38e2:	10a4      	asrs	r4, r4, #2
    38e4:	42a6      	cmp	r6, r4
    38e6:	d109      	bne.n	38fc <__libc_init_array+0x24>
    38e8:	2600      	movs	r6, #0
    38ea:	f000 f999 	bl	3c20 <_init>
    38ee:	4d0a      	ldr	r5, [pc, #40]	; (3918 <__libc_init_array+0x40>)
    38f0:	4c0a      	ldr	r4, [pc, #40]	; (391c <__libc_init_array+0x44>)
    38f2:	1b64      	subs	r4, r4, r5
    38f4:	10a4      	asrs	r4, r4, #2
    38f6:	42a6      	cmp	r6, r4
    38f8:	d105      	bne.n	3906 <__libc_init_array+0x2e>
    38fa:	bd70      	pop	{r4, r5, r6, pc}
    38fc:	00b3      	lsls	r3, r6, #2
    38fe:	58eb      	ldr	r3, [r5, r3]
    3900:	4798      	blx	r3
    3902:	3601      	adds	r6, #1
    3904:	e7ee      	b.n	38e4 <__libc_init_array+0xc>
    3906:	00b3      	lsls	r3, r6, #2
    3908:	58eb      	ldr	r3, [r5, r3]
    390a:	4798      	blx	r3
    390c:	3601      	adds	r6, #1
    390e:	e7f2      	b.n	38f6 <__libc_init_array+0x1e>
    3910:	00003c2c 	.word	0x00003c2c
    3914:	00003c2c 	.word	0x00003c2c
    3918:	00003c2c 	.word	0x00003c2c
    391c:	00003c30 	.word	0x00003c30

00003920 <malloc>:
    3920:	b510      	push	{r4, lr}
    3922:	4b03      	ldr	r3, [pc, #12]	; (3930 <malloc+0x10>)
    3924:	0001      	movs	r1, r0
    3926:	6818      	ldr	r0, [r3, #0]
    3928:	f000 f816 	bl	3958 <_malloc_r>
    392c:	bd10      	pop	{r4, pc}
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	20000010 	.word	0x20000010

00003934 <memcpy>:
    3934:	2300      	movs	r3, #0
    3936:	b510      	push	{r4, lr}
    3938:	429a      	cmp	r2, r3
    393a:	d100      	bne.n	393e <memcpy+0xa>
    393c:	bd10      	pop	{r4, pc}
    393e:	5ccc      	ldrb	r4, [r1, r3]
    3940:	54c4      	strb	r4, [r0, r3]
    3942:	3301      	adds	r3, #1
    3944:	e7f8      	b.n	3938 <memcpy+0x4>

00003946 <memset>:
    3946:	0003      	movs	r3, r0
    3948:	1882      	adds	r2, r0, r2
    394a:	4293      	cmp	r3, r2
    394c:	d100      	bne.n	3950 <memset+0xa>
    394e:	4770      	bx	lr
    3950:	7019      	strb	r1, [r3, #0]
    3952:	3301      	adds	r3, #1
    3954:	e7f9      	b.n	394a <memset+0x4>
	...

00003958 <_malloc_r>:
    3958:	2303      	movs	r3, #3
    395a:	b570      	push	{r4, r5, r6, lr}
    395c:	1ccd      	adds	r5, r1, #3
    395e:	439d      	bics	r5, r3
    3960:	3508      	adds	r5, #8
    3962:	0006      	movs	r6, r0
    3964:	2d0c      	cmp	r5, #12
    3966:	d21e      	bcs.n	39a6 <_malloc_r+0x4e>
    3968:	250c      	movs	r5, #12
    396a:	42a9      	cmp	r1, r5
    396c:	d81d      	bhi.n	39aa <_malloc_r+0x52>
    396e:	0030      	movs	r0, r6
    3970:	f000 f862 	bl	3a38 <__malloc_lock>
    3974:	4a25      	ldr	r2, [pc, #148]	; (3a0c <_malloc_r+0xb4>)
    3976:	6814      	ldr	r4, [r2, #0]
    3978:	0021      	movs	r1, r4
    397a:	2900      	cmp	r1, #0
    397c:	d119      	bne.n	39b2 <_malloc_r+0x5a>
    397e:	4c24      	ldr	r4, [pc, #144]	; (3a10 <_malloc_r+0xb8>)
    3980:	6823      	ldr	r3, [r4, #0]
    3982:	2b00      	cmp	r3, #0
    3984:	d103      	bne.n	398e <_malloc_r+0x36>
    3986:	0030      	movs	r0, r6
    3988:	f000 f844 	bl	3a14 <_sbrk_r>
    398c:	6020      	str	r0, [r4, #0]
    398e:	0029      	movs	r1, r5
    3990:	0030      	movs	r0, r6
    3992:	f000 f83f 	bl	3a14 <_sbrk_r>
    3996:	1c43      	adds	r3, r0, #1
    3998:	d12c      	bne.n	39f4 <_malloc_r+0x9c>
    399a:	230c      	movs	r3, #12
    399c:	0030      	movs	r0, r6
    399e:	6033      	str	r3, [r6, #0]
    39a0:	f000 f84b 	bl	3a3a <__malloc_unlock>
    39a4:	e003      	b.n	39ae <_malloc_r+0x56>
    39a6:	2d00      	cmp	r5, #0
    39a8:	dadf      	bge.n	396a <_malloc_r+0x12>
    39aa:	230c      	movs	r3, #12
    39ac:	6033      	str	r3, [r6, #0]
    39ae:	2000      	movs	r0, #0
    39b0:	bd70      	pop	{r4, r5, r6, pc}
    39b2:	680b      	ldr	r3, [r1, #0]
    39b4:	1b5b      	subs	r3, r3, r5
    39b6:	d41a      	bmi.n	39ee <_malloc_r+0x96>
    39b8:	2b0b      	cmp	r3, #11
    39ba:	d903      	bls.n	39c4 <_malloc_r+0x6c>
    39bc:	600b      	str	r3, [r1, #0]
    39be:	18cc      	adds	r4, r1, r3
    39c0:	6025      	str	r5, [r4, #0]
    39c2:	e003      	b.n	39cc <_malloc_r+0x74>
    39c4:	428c      	cmp	r4, r1
    39c6:	d10e      	bne.n	39e6 <_malloc_r+0x8e>
    39c8:	6863      	ldr	r3, [r4, #4]
    39ca:	6013      	str	r3, [r2, #0]
    39cc:	0030      	movs	r0, r6
    39ce:	f000 f834 	bl	3a3a <__malloc_unlock>
    39d2:	0020      	movs	r0, r4
    39d4:	2207      	movs	r2, #7
    39d6:	300b      	adds	r0, #11
    39d8:	1d23      	adds	r3, r4, #4
    39da:	4390      	bics	r0, r2
    39dc:	1ac3      	subs	r3, r0, r3
    39de:	d0e7      	beq.n	39b0 <_malloc_r+0x58>
    39e0:	425a      	negs	r2, r3
    39e2:	50e2      	str	r2, [r4, r3]
    39e4:	e7e4      	b.n	39b0 <_malloc_r+0x58>
    39e6:	684b      	ldr	r3, [r1, #4]
    39e8:	6063      	str	r3, [r4, #4]
    39ea:	000c      	movs	r4, r1
    39ec:	e7ee      	b.n	39cc <_malloc_r+0x74>
    39ee:	000c      	movs	r4, r1
    39f0:	6849      	ldr	r1, [r1, #4]
    39f2:	e7c2      	b.n	397a <_malloc_r+0x22>
    39f4:	2303      	movs	r3, #3
    39f6:	1cc4      	adds	r4, r0, #3
    39f8:	439c      	bics	r4, r3
    39fa:	42a0      	cmp	r0, r4
    39fc:	d0e0      	beq.n	39c0 <_malloc_r+0x68>
    39fe:	1a21      	subs	r1, r4, r0
    3a00:	0030      	movs	r0, r6
    3a02:	f000 f807 	bl	3a14 <_sbrk_r>
    3a06:	1c43      	adds	r3, r0, #1
    3a08:	d1da      	bne.n	39c0 <_malloc_r+0x68>
    3a0a:	e7c6      	b.n	399a <_malloc_r+0x42>
    3a0c:	200000f8 	.word	0x200000f8
    3a10:	200000fc 	.word	0x200000fc

00003a14 <_sbrk_r>:
    3a14:	2300      	movs	r3, #0
    3a16:	b570      	push	{r4, r5, r6, lr}
    3a18:	4c06      	ldr	r4, [pc, #24]	; (3a34 <_sbrk_r+0x20>)
    3a1a:	0005      	movs	r5, r0
    3a1c:	0008      	movs	r0, r1
    3a1e:	6023      	str	r3, [r4, #0]
    3a20:	f7ff fda8 	bl	3574 <_sbrk>
    3a24:	1c43      	adds	r3, r0, #1
    3a26:	d103      	bne.n	3a30 <_sbrk_r+0x1c>
    3a28:	6823      	ldr	r3, [r4, #0]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d000      	beq.n	3a30 <_sbrk_r+0x1c>
    3a2e:	602b      	str	r3, [r5, #0]
    3a30:	bd70      	pop	{r4, r5, r6, pc}
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	20000350 	.word	0x20000350

00003a38 <__malloc_lock>:
    3a38:	4770      	bx	lr

00003a3a <__malloc_unlock>:
    3a3a:	4770      	bx	lr
    3a3c:	00000dfc 	.word	0x00000dfc
    3a40:	00000dde 	.word	0x00000dde
    3a44:	00000dde 	.word	0x00000dde
    3a48:	00000e0a 	.word	0x00000e0a
    3a4c:	00000e18 	.word	0x00000e18
    3a50:	00000e2e 	.word	0x00000e2e
    3a54:	00000e44 	.word	0x00000e44
    3a58:	00000e52 	.word	0x00000e52
    3a5c:	00000e60 	.word	0x00000e60
    3a60:	00000e6e 	.word	0x00000e6e
    3a64:	00000e7c 	.word	0x00000e7c
    3a68:	00000ebc 	.word	0x00000ebc
    3a6c:	000013c6 	.word	0x000013c6
    3a70:	00001612 	.word	0x00001612
    3a74:	00001612 	.word	0x00001612
    3a78:	00001612 	.word	0x00001612
    3a7c:	00001612 	.word	0x00001612
    3a80:	00001612 	.word	0x00001612
    3a84:	00001612 	.word	0x00001612
    3a88:	00001612 	.word	0x00001612
    3a8c:	00001612 	.word	0x00001612
    3a90:	00001612 	.word	0x00001612
    3a94:	00001612 	.word	0x00001612
    3a98:	00001612 	.word	0x00001612
    3a9c:	00001612 	.word	0x00001612
    3aa0:	00001612 	.word	0x00001612
    3aa4:	00001612 	.word	0x00001612
    3aa8:	00001612 	.word	0x00001612
    3aac:	000013ae 	.word	0x000013ae
    3ab0:	00001612 	.word	0x00001612
    3ab4:	00001612 	.word	0x00001612
    3ab8:	00001612 	.word	0x00001612
    3abc:	00001612 	.word	0x00001612
    3ac0:	00001612 	.word	0x00001612
    3ac4:	00001612 	.word	0x00001612
    3ac8:	00001612 	.word	0x00001612
    3acc:	00001612 	.word	0x00001612
    3ad0:	00001612 	.word	0x00001612
    3ad4:	00001612 	.word	0x00001612
    3ad8:	00001612 	.word	0x00001612
    3adc:	00001612 	.word	0x00001612
    3ae0:	00001612 	.word	0x00001612
    3ae4:	00001612 	.word	0x00001612
    3ae8:	00001612 	.word	0x00001612
    3aec:	000013be 	.word	0x000013be
    3af0:	00001612 	.word	0x00001612
    3af4:	00001612 	.word	0x00001612
    3af8:	00001612 	.word	0x00001612
    3afc:	00001612 	.word	0x00001612
    3b00:	00001612 	.word	0x00001612
    3b04:	00001612 	.word	0x00001612
    3b08:	00001612 	.word	0x00001612
    3b0c:	00001612 	.word	0x00001612
    3b10:	00001612 	.word	0x00001612
    3b14:	00001612 	.word	0x00001612
    3b18:	00001612 	.word	0x00001612
    3b1c:	00001612 	.word	0x00001612
    3b20:	00001612 	.word	0x00001612
    3b24:	00001612 	.word	0x00001612
    3b28:	00001612 	.word	0x00001612
    3b2c:	000013b6 	.word	0x000013b6
    3b30:	000013ce 	.word	0x000013ce
    3b34:	00001396 	.word	0x00001396
    3b38:	000013a6 	.word	0x000013a6
    3b3c:	0000139e 	.word	0x0000139e
    3b40:	00000002 	.word	0x00000002
    3b44:	00000003 	.word	0x00000003
    3b48:	00000004 	.word	0x00000004
    3b4c:	00000005 	.word	0x00000005
    3b50:	00000006 	.word	0x00000006
    3b54:	00000007 	.word	0x00000007
    3b58:	0000000e 	.word	0x0000000e
    3b5c:	0000000f 	.word	0x0000000f
    3b60:	0000000a 	.word	0x0000000a
    3b64:	0000000b 	.word	0x0000000b
    3b68:	0000ffff 	.word	0x0000ffff
    3b6c:	0000ffff 	.word	0x0000ffff
    3b70:	0000ffff 	.word	0x0000ffff
    3b74:	0000ffff 	.word	0x0000ffff
    3b78:	0000ffff 	.word	0x0000ffff
    3b7c:	0000ffff 	.word	0x0000ffff
    3b80:	0000ffff 	.word	0x0000ffff
    3b84:	0000ffff 	.word	0x0000ffff
    3b88:	0000ffff 	.word	0x0000ffff
    3b8c:	0000ffff 	.word	0x0000ffff
    3b90:	42000800 	.word	0x42000800
    3b94:	42000c00 	.word	0x42000c00
    3b98:	42001000 	.word	0x42001000

00003b9c <sensor_analog_inputs>:
    3b9c:	00080906                                ....

00003ba0 <_tcc_intflag>:
    3ba0:	00000001 00000002 00000004 00000008     ................
    3bb0:	00001000 00002000 00004000 00008000     ..... ...@......
    3bc0:	00010000 00020000 00040000 00080000     ................

00003bd0 <tc_interrupt_vectors.12355>:
    3bd0:	00000e0d                                ....

00003bd4 <tc_interrupt_vectors.12355>:
    3bd4:	00000e0d 00002ed2 00002ece 00002ece     ................
    3be4:	00002f30 00002f30 00002ee6 00002ed8     0/..0/..........
    3bf4:	00002eec 00002f1e 00002fb8 00002f98     ...../.../.../..
    3c04:	00002f98 00003024 00002faa 00002fc6     ./..$0.../.../..
    3c14:	00002f9c 00002fd4 00003014              ./.../...0..

00003c20 <_init>:
    3c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c26:	bc08      	pop	{r3}
    3c28:	469e      	mov	lr, r3
    3c2a:	4770      	bx	lr

00003c2c <__init_array_start>:
    3c2c:	000008b5 	.word	0x000008b5

00003c30 <_fini>:
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c36:	bc08      	pop	{r3}
    3c38:	469e      	mov	lr, r3
    3c3a:	4770      	bx	lr

00003c3c <__fini_array_start>:
    3c3c:	0000088d 	.word	0x0000088d
