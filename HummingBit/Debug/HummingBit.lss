
HummingBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003434  00000800  00000800  00000800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003c34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003dc  20000074  00003ca8  00010074  2**2
                  ALLOC
  3 .stack        00000400  20000450  00004084  00010074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00053049  00000000  00000000  000100f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006867  00000000  00000000  0006313e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a0d9  00000000  00000000  000699a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  00073a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d50  00000000  00000000  0007431e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b17c  00000000  00000000  0007506e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017427  00000000  00000000  000901ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000734c1  00000000  00000000  000a7611  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001518  00000000  00000000  0011aad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000800 <exception_table>:
     800:	50 08 00 20 99 34 00 00 95 34 00 00 95 34 00 00     P.. .4...4...4..
	...
     82c:	95 34 00 00 00 00 00 00 00 00 00 00 95 34 00 00     .4...........4..
     83c:	95 34 00 00 95 34 00 00 95 34 00 00 95 34 00 00     .4...4...4...4..
     84c:	95 34 00 00 1d 2b 00 00 95 34 00 00 95 34 00 00     .4...+...4...4..
     85c:	00 00 00 00 95 34 00 00 ed 2a 00 00 fd 2a 00 00     .....4...*...*..
     86c:	0d 2b 00 00 b1 24 00 00 6d 2a 00 00 7d 2a 00 00     .+...$..m*..}*..
     87c:	11 16 00 00 95 34 00 00 95 34 00 00 95 34 00 00     .....4...4...4..

0000088c <__do_global_dtors_aux>:
     88c:	b510      	push	{r4, lr}
     88e:	4c06      	ldr	r4, [pc, #24]	; (8a8 <__do_global_dtors_aux+0x1c>)
     890:	7823      	ldrb	r3, [r4, #0]
     892:	2b00      	cmp	r3, #0
     894:	d107      	bne.n	8a6 <__do_global_dtors_aux+0x1a>
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <__do_global_dtors_aux+0x20>)
     898:	2b00      	cmp	r3, #0
     89a:	d002      	beq.n	8a2 <__do_global_dtors_aux+0x16>
     89c:	4804      	ldr	r0, [pc, #16]	; (8b0 <__do_global_dtors_aux+0x24>)
     89e:	e000      	b.n	8a2 <__do_global_dtors_aux+0x16>
     8a0:	bf00      	nop
     8a2:	2301      	movs	r3, #1
     8a4:	7023      	strb	r3, [r4, #0]
     8a6:	bd10      	pop	{r4, pc}
     8a8:	20000074 	.word	0x20000074
     8ac:	00000000 	.word	0x00000000
     8b0:	00003c34 	.word	0x00003c34

000008b4 <frame_dummy>:
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <frame_dummy+0x24>)
     8b6:	b510      	push	{r4, lr}
     8b8:	2b00      	cmp	r3, #0
     8ba:	d003      	beq.n	8c4 <frame_dummy+0x10>
     8bc:	4907      	ldr	r1, [pc, #28]	; (8dc <frame_dummy+0x28>)
     8be:	4808      	ldr	r0, [pc, #32]	; (8e0 <frame_dummy+0x2c>)
     8c0:	e000      	b.n	8c4 <frame_dummy+0x10>
     8c2:	bf00      	nop
     8c4:	4807      	ldr	r0, [pc, #28]	; (8e4 <frame_dummy+0x30>)
     8c6:	6803      	ldr	r3, [r0, #0]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d100      	bne.n	8ce <frame_dummy+0x1a>
     8cc:	bd10      	pop	{r4, pc}
     8ce:	4b06      	ldr	r3, [pc, #24]	; (8e8 <frame_dummy+0x34>)
     8d0:	2b00      	cmp	r3, #0
     8d2:	d0fb      	beq.n	8cc <frame_dummy+0x18>
     8d4:	4798      	blx	r3
     8d6:	e7f9      	b.n	8cc <frame_dummy+0x18>
     8d8:	00000000 	.word	0x00000000
     8dc:	20000078 	.word	0x20000078
     8e0:	00003c34 	.word	0x00003c34
     8e4:	00003c34 	.word	0x00003c34
     8e8:	00000000 	.word	0x00000000

000008ec <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f0:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     8f2:	0020      	movs	r0, r4
     8f4:	4b0e      	ldr	r3, [pc, #56]	; (930 <spi_reset+0x44>)
     8f6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8f8:	231f      	movs	r3, #31
     8fa:	4018      	ands	r0, r3
     8fc:	3b1e      	subs	r3, #30
     8fe:	4083      	lsls	r3, r0
     900:	2280      	movs	r2, #128	; 0x80
     902:	490c      	ldr	r1, [pc, #48]	; (934 <spi_reset+0x48>)
     904:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     906:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     908:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     90a:	2b00      	cmp	r3, #0
     90c:	d1fc      	bne.n	908 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     90e:	338f      	adds	r3, #143	; 0x8f
     910:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     912:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     914:	6823      	ldr	r3, [r4, #0]
     916:	2202      	movs	r2, #2
     918:	4393      	bics	r3, r2
     91a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     91c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     91e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
     920:	2b00      	cmp	r3, #0
     922:	d1fc      	bne.n	91e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
     924:	6823      	ldr	r3, [r4, #0]
     926:	2201      	movs	r2, #1
     928:	4313      	orrs	r3, r2
     92a:	6023      	str	r3, [r4, #0]
}
     92c:	bd70      	pop	{r4, r5, r6, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	00002acd 	.word	0x00002acd
     934:	e000e100 	.word	0xe000e100

00000938 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     938:	b5f0      	push	{r4, r5, r6, r7, lr}
     93a:	b08b      	sub	sp, #44	; 0x2c
     93c:	0005      	movs	r5, r0
     93e:	000c      	movs	r4, r1
     940:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     942:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     944:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     946:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     948:	079b      	lsls	r3, r3, #30
     94a:	d501      	bpl.n	950 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     94c:	b00b      	add	sp, #44	; 0x2c
     94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     950:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     952:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     954:	07db      	lsls	r3, r3, #31
     956:	d4f9      	bmi.n	94c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     958:	0008      	movs	r0, r1
     95a:	4b6f      	ldr	r3, [pc, #444]	; (b18 <spi_init+0x1e0>)
     95c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     95e:	4a6f      	ldr	r2, [pc, #444]	; (b1c <spi_init+0x1e4>)
     960:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     962:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     964:	2301      	movs	r3, #1
     966:	40bb      	lsls	r3, r7
     968:	430b      	orrs	r3, r1
     96a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     96c:	a909      	add	r1, sp, #36	; 0x24
     96e:	2724      	movs	r7, #36	; 0x24
     970:	5df3      	ldrb	r3, [r6, r7]
     972:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     974:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     976:	b2c3      	uxtb	r3, r0
     978:	9301      	str	r3, [sp, #4]
     97a:	0018      	movs	r0, r3
     97c:	4b68      	ldr	r3, [pc, #416]	; (b20 <spi_init+0x1e8>)
     97e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     980:	9801      	ldr	r0, [sp, #4]
     982:	4b68      	ldr	r3, [pc, #416]	; (b24 <spi_init+0x1ec>)
     984:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     986:	5df0      	ldrb	r0, [r6, r7]
     988:	2100      	movs	r1, #0
     98a:	4b67      	ldr	r3, [pc, #412]	; (b28 <spi_init+0x1f0>)
     98c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     98e:	7833      	ldrb	r3, [r6, #0]
     990:	2b01      	cmp	r3, #1
     992:	d03f      	beq.n	a14 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     994:	7833      	ldrb	r3, [r6, #0]
     996:	2b00      	cmp	r3, #0
     998:	d103      	bne.n	9a2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     99a:	6823      	ldr	r3, [r4, #0]
     99c:	2208      	movs	r2, #8
     99e:	4313      	orrs	r3, r2
     9a0:	6023      	str	r3, [r4, #0]
     9a2:	002b      	movs	r3, r5
     9a4:	330c      	adds	r3, #12
     9a6:	0029      	movs	r1, r5
     9a8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     9aa:	2200      	movs	r2, #0
     9ac:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     9ae:	428b      	cmp	r3, r1
     9b0:	d1fc      	bne.n	9ac <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     9b2:	2300      	movs	r3, #0
     9b4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     9b6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     9b8:	2400      	movs	r4, #0
     9ba:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     9bc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     9be:	3336      	adds	r3, #54	; 0x36
     9c0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     9c2:	3301      	adds	r3, #1
     9c4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     9c6:	3301      	adds	r3, #1
     9c8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     9ca:	3b35      	subs	r3, #53	; 0x35
     9cc:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     9ce:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     9d0:	6828      	ldr	r0, [r5, #0]
     9d2:	4b51      	ldr	r3, [pc, #324]	; (b18 <spi_init+0x1e0>)
     9d4:	4798      	blx	r3
     9d6:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     9d8:	4954      	ldr	r1, [pc, #336]	; (b2c <spi_init+0x1f4>)
     9da:	4b55      	ldr	r3, [pc, #340]	; (b30 <spi_init+0x1f8>)
     9dc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9de:	00bf      	lsls	r7, r7, #2
     9e0:	4b54      	ldr	r3, [pc, #336]	; (b34 <spi_init+0x1fc>)
     9e2:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     9e4:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9e6:	ab04      	add	r3, sp, #16
     9e8:	2280      	movs	r2, #128	; 0x80
     9ea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9ec:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9ee:	3a7f      	subs	r2, #127	; 0x7f
     9f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     9f2:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     9f4:	7833      	ldrb	r3, [r6, #0]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d102      	bne.n	a00 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9fa:	2200      	movs	r2, #0
     9fc:	ab04      	add	r3, sp, #16
     9fe:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     a02:	9305      	str	r3, [sp, #20]
     a04:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     a06:	9306      	str	r3, [sp, #24]
     a08:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a0a:	9307      	str	r3, [sp, #28]
     a0c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a0e:	9308      	str	r3, [sp, #32]
     a10:	2400      	movs	r4, #0
     a12:	e00b      	b.n	a2c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     a14:	6823      	ldr	r3, [r4, #0]
     a16:	220c      	movs	r2, #12
     a18:	4313      	orrs	r3, r2
     a1a:	6023      	str	r3, [r4, #0]
     a1c:	e7ba      	b.n	994 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a1e:	0038      	movs	r0, r7
     a20:	4b45      	ldr	r3, [pc, #276]	; (b38 <spi_init+0x200>)
     a22:	4798      	blx	r3
     a24:	e00a      	b.n	a3c <spi_init+0x104>
     a26:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a28:	2c04      	cmp	r4, #4
     a2a:	d010      	beq.n	a4e <spi_init+0x116>
     a2c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a2e:	00a3      	lsls	r3, r4, #2
     a30:	aa02      	add	r2, sp, #8
     a32:	200c      	movs	r0, #12
     a34:	1812      	adds	r2, r2, r0
     a36:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     a38:	2800      	cmp	r0, #0
     a3a:	d0f0      	beq.n	a1e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     a3c:	1c43      	adds	r3, r0, #1
     a3e:	d0f2      	beq.n	a26 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a40:	a904      	add	r1, sp, #16
     a42:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a44:	0c00      	lsrs	r0, r0, #16
     a46:	b2c0      	uxtb	r0, r0
     a48:	4b3c      	ldr	r3, [pc, #240]	; (b3c <spi_init+0x204>)
     a4a:	4798      	blx	r3
     a4c:	e7eb      	b.n	a26 <spi_init+0xee>
	module->mode             = config->mode;
     a4e:	7833      	ldrb	r3, [r6, #0]
     a50:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     a52:	7c33      	ldrb	r3, [r6, #16]
     a54:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     a56:	7cb3      	ldrb	r3, [r6, #18]
     a58:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     a5a:	7d33      	ldrb	r3, [r6, #20]
     a5c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     a5e:	2200      	movs	r2, #0
     a60:	ab02      	add	r3, sp, #8
     a62:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     a64:	7833      	ldrb	r3, [r6, #0]
     a66:	2b01      	cmp	r3, #1
     a68:	d012      	beq.n	a90 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     a6a:	7833      	ldrb	r3, [r6, #0]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d126      	bne.n	abe <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     a70:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     a72:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     a76:	7ff1      	ldrb	r1, [r6, #31]
     a78:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     a7a:	7fb4      	ldrb	r4, [r6, #30]
     a7c:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     a7e:	4319      	orrs	r1, r3
     a80:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     a82:	2320      	movs	r3, #32
     a84:	5cf3      	ldrb	r3, [r6, r3]
     a86:	2b00      	cmp	r3, #0
     a88:	d01b      	beq.n	ac2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     a8a:	2340      	movs	r3, #64	; 0x40
     a8c:	431a      	orrs	r2, r3
     a8e:	e018      	b.n	ac2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a90:	6828      	ldr	r0, [r5, #0]
     a92:	4b21      	ldr	r3, [pc, #132]	; (b18 <spi_init+0x1e0>)
     a94:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a96:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     a98:	b2c0      	uxtb	r0, r0
     a9a:	4b29      	ldr	r3, [pc, #164]	; (b40 <spi_init+0x208>)
     a9c:	4798      	blx	r3
     a9e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     aa0:	ab02      	add	r3, sp, #8
     aa2:	1d9a      	adds	r2, r3, #6
     aa4:	69b0      	ldr	r0, [r6, #24]
     aa6:	4b27      	ldr	r3, [pc, #156]	; (b44 <spi_init+0x20c>)
     aa8:	4798      	blx	r3
     aaa:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     aac:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     aae:	2b00      	cmp	r3, #0
     ab0:	d000      	beq.n	ab4 <spi_init+0x17c>
     ab2:	e74b      	b.n	94c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     ab4:	ab02      	add	r3, sp, #8
     ab6:	3306      	adds	r3, #6
     ab8:	781b      	ldrb	r3, [r3, #0]
     aba:	733b      	strb	r3, [r7, #12]
     abc:	e7d5      	b.n	a6a <spi_init+0x132>
	uint32_t ctrlb = 0;
     abe:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     ac0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     ac2:	6873      	ldr	r3, [r6, #4]
     ac4:	68b1      	ldr	r1, [r6, #8]
     ac6:	430b      	orrs	r3, r1
     ac8:	68f1      	ldr	r1, [r6, #12]
     aca:	430b      	orrs	r3, r1
     acc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     ace:	7c31      	ldrb	r1, [r6, #16]
     ad0:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     ad2:	7c71      	ldrb	r1, [r6, #17]
     ad4:	2900      	cmp	r1, #0
     ad6:	d103      	bne.n	ae0 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ad8:	491b      	ldr	r1, [pc, #108]	; (b48 <spi_init+0x210>)
     ada:	7889      	ldrb	r1, [r1, #2]
     adc:	0789      	lsls	r1, r1, #30
     ade:	d501      	bpl.n	ae4 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ae0:	2180      	movs	r1, #128	; 0x80
     ae2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     ae4:	7cb1      	ldrb	r1, [r6, #18]
     ae6:	2900      	cmp	r1, #0
     ae8:	d002      	beq.n	af0 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     aea:	2180      	movs	r1, #128	; 0x80
     aec:	0289      	lsls	r1, r1, #10
     aee:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     af0:	7cf1      	ldrb	r1, [r6, #19]
     af2:	2900      	cmp	r1, #0
     af4:	d002      	beq.n	afc <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     af6:	2180      	movs	r1, #128	; 0x80
     af8:	0089      	lsls	r1, r1, #2
     afa:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     afc:	7d31      	ldrb	r1, [r6, #20]
     afe:	2900      	cmp	r1, #0
     b00:	d002      	beq.n	b08 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     b02:	2180      	movs	r1, #128	; 0x80
     b04:	0189      	lsls	r1, r1, #6
     b06:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     b08:	6839      	ldr	r1, [r7, #0]
     b0a:	430b      	orrs	r3, r1
     b0c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	431a      	orrs	r2, r3
     b12:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     b14:	2000      	movs	r0, #0
     b16:	e719      	b.n	94c <spi_init+0x14>
     b18:	00001889 	.word	0x00001889
     b1c:	40000400 	.word	0x40000400
     b20:	000032f9 	.word	0x000032f9
     b24:	0000326d 	.word	0x0000326d
     b28:	0000177d 	.word	0x0000177d
     b2c:	00000bad 	.word	0x00000bad
     b30:	00002a91 	.word	0x00002a91
     b34:	200003b0 	.word	0x200003b0
     b38:	000017c9 	.word	0x000017c9
     b3c:	000033f1 	.word	0x000033f1
     b40:	00003315 	.word	0x00003315
     b44:	00001755 	.word	0x00001755
     b48:	41002000 	.word	0x41002000

00000b4c <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b4c:	1c93      	adds	r3, r2, #2
     b4e:	009b      	lsls	r3, r3, #2
     b50:	18c3      	adds	r3, r0, r3
     b52:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     b54:	2136      	movs	r1, #54	; 0x36
     b56:	2301      	movs	r3, #1
     b58:	4093      	lsls	r3, r2
     b5a:	001a      	movs	r2, r3
     b5c:	5c43      	ldrb	r3, [r0, r1]
     b5e:	4313      	orrs	r3, r2
     b60:	5443      	strb	r3, [r0, r1]
}
     b62:	4770      	bx	lr

00000b64 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     b64:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);
	
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b66:	2417      	movs	r4, #23
	if (length == 0) {
     b68:	2b00      	cmp	r3, #0
     b6a:	d101      	bne.n	b70 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);
	
	return STATUS_OK;
}
     b6c:	0020      	movs	r0, r4
     b6e:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     b70:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     b72:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     b74:	2d00      	cmp	r5, #0
     b76:	d0f9      	beq.n	b6c <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     b78:	341c      	adds	r4, #28
     b7a:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     b7c:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     b7e:	2d05      	cmp	r5, #5
     b80:	d0f4      	beq.n	b6c <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
     b82:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
     b84:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
     b86:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
     b88:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
     b8a:	2205      	movs	r2, #5
     b8c:	2338      	movs	r3, #56	; 0x38
     b8e:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
     b90:	3b36      	subs	r3, #54	; 0x36
     b92:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     b94:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     b96:	759a      	strb	r2, [r3, #22]
	hw->INTFLAG.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     b98:	3280      	adds	r2, #128	; 0x80
     b9a:	761a      	strb	r2, [r3, #24]
	if (module->mode == SPI_MODE_SLAVE) {
     b9c:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
     b9e:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
     ba0:	2a00      	cmp	r2, #0
     ba2:	d1e3      	bne.n	b6c <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ba4:	3202      	adds	r2, #2
     ba6:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ba8:	759a      	strb	r2, [r3, #22]
     baa:	e7df      	b.n	b6c <spi_transceive_buffer_job+0x8>

00000bac <_spi_interrupt_handler>:

extern volatile bool spi_reset_1 ;


void _spi_interrupt_handler(uint8_t instance)
{
     bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	
	//*PORT_SET	=  G2_RGB;
	
	/* Get device instance from the look-up table */
	struct spi_module *module = (struct spi_module *)_sercom_instances[instance];
     bae:	0080      	lsls	r0, r0, #2
     bb0:	4b5c      	ldr	r3, [pc, #368]	; (d24 <_spi_interrupt_handler+0x178>)
     bb2:	58c5      	ldr	r5, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     bb4:	682e      	ldr	r6, [r5, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback & module->registered_callback;
     bb6:	2337      	movs	r3, #55	; 0x37
     bb8:	5cef      	ldrb	r7, [r5, r3]
     bba:	2236      	movs	r2, #54	; 0x36
     bbc:	5caa      	ldrb	r2, [r5, r2]
     bbe:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     bc0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     bc2:	7db4      	ldrb	r4, [r6, #22]
     bc4:	401c      	ands	r4, r3
	
	/* Data register empty interrupt */ 
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) 
     bc6:	07e3      	lsls	r3, r4, #31
     bc8:	d514      	bpl.n	bf4 <_spi_interrupt_handler+0x48>
	{
		if((module->mode == SPI_MODE_SLAVE) &&(module->dir != SPI_DIRECTION_READ))
     bca:	796b      	ldrb	r3, [r5, #5]
     bcc:	2b00      	cmp	r3, #0
     bce:	d111      	bne.n	bf4 <_spi_interrupt_handler+0x48>
     bd0:	7a6b      	ldrb	r3, [r5, #9]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d00e      	beq.n	bf4 <_spi_interrupt_handler+0x48>
		 {
			//_spi_write(module);
			//*PORT_SET	=  B2_RGB;
			data_to_send = *(module->tx_buffer_ptr);
     bd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bd8:	781a      	ldrb	r2, [r3, #0]
			(module->tx_buffer_ptr)++;
     bda:	3301      	adds	r3, #1
     bdc:	62eb      	str	r3, [r5, #44]	; 0x2c
			spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     bde:	62b2      	str	r2, [r6, #40]	; 0x28
			(module->remaining_tx_buffer_length)--;
     be0:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     be2:	3b01      	subs	r3, #1
     be4:	b29b      	uxth	r3, r3
     be6:	86ab      	strh	r3, [r5, #52]	; 0x34
		
			if (module->remaining_tx_buffer_length == 0) 
     be8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     bea:	b29b      	uxth	r3, r3
     bec:	2b00      	cmp	r3, #0
     bee:	d101      	bne.n	bf4 <_spi_interrupt_handler+0x48>
			{
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     bf0:	3301      	adds	r3, #1
     bf2:	7533      	strb	r3, [r6, #20]
			//*PORT_CLEAR	=  B2_RGB;
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     bf4:	0763      	lsls	r3, r4, #29
     bf6:	d505      	bpl.n	c04 <_spi_interrupt_handler+0x58>
		/* Check for overflow */
		//*PORT_SET	=  B2_RGB;
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) 
     bf8:	8b73      	ldrh	r3, [r6, #26]
     bfa:	075b      	lsls	r3, r3, #29
     bfc:	d520      	bpl.n	c40 <_spi_interrupt_handler+0x94>
		{
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     bfe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     c00:	2304      	movs	r3, #4
     c02:	8373      	strh	r3, [r6, #26]
			}
			//*PORT_CLEAR	=  B2_RGB;
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     c04:	07a3      	lsls	r3, r4, #30
     c06:	d50b      	bpl.n	c20 <_spi_interrupt_handler+0x74>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     c08:	796b      	ldrb	r3, [r5, #5]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d113      	bne.n	c36 <_spi_interrupt_handler+0x8a>
			
			spi_reset_1 = true;
     c0e:	2201      	movs	r2, #1
     c10:	4b45      	ldr	r3, [pc, #276]	; (d28 <_spi_interrupt_handler+0x17c>)
     c12:	701a      	strb	r2, [r3, #0]
			if(module->dir == SPI_DIRECTION_BOTH) {
     c14:	7a6b      	ldrb	r3, [r5, #9]
     c16:	2b02      	cmp	r3, #2
     c18:	d100      	bne.n	c1c <_spi_interrupt_handler+0x70>
     c1a:	e06d      	b.n	cf8 <_spi_interrupt_handler+0x14c>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
					
				}
			}
			//*PORT_SET	=  B2_RGB;
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c1c:	2302      	movs	r3, #2
     c1e:	7633      	strb	r3, [r6, #24]

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
        
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     c20:	0723      	lsls	r3, r4, #28
     c22:	d508      	bpl.n	c36 <_spi_interrupt_handler+0x8a>
			if (module->mode == SPI_MODE_SLAVE) {
     c24:	796b      	ldrb	r3, [r5, #5]
     c26:	2b00      	cmp	r3, #0
     c28:	d105      	bne.n	c36 <_spi_interrupt_handler+0x8a>
				//*PORT_SET	=  B2_RGB;
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     c2a:	3308      	adds	r3, #8
     c2c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     c2e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     c30:	06bb      	lsls	r3, r7, #26
     c32:	d500      	bpl.n	c36 <_spi_interrupt_handler+0x8a>
     c34:	e067      	b.n	d06 <_spi_interrupt_handler+0x15a>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     c36:	b264      	sxtb	r4, r4
     c38:	2c00      	cmp	r4, #0
     c3a:	da00      	bge.n	c3e <_spi_interrupt_handler+0x92>
     c3c:	e067      	b.n	d0e <_spi_interrupt_handler+0x162>
	}
#  endif
	
	//*PORT_CLEAR	=  G2_RGB;
  
}
     c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     c40:	6ab3      	ldr	r3, [r6, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     c42:	b2db      	uxtb	r3, r3
     c44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c46:	7013      	strb	r3, [r2, #0]
				module->rx_buffer_ptr += 1;
     c48:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     c4a:	1c4b      	adds	r3, r1, #1
     c4c:	62ab      	str	r3, [r5, #40]	; 0x28
				module->remaining_rx_buffer_length--;
     c4e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     c50:	3b01      	subs	r3, #1
     c52:	b29b      	uxth	r3, r3
     c54:	862b      	strh	r3, [r5, #48]	; 0x30
				buffer_length++;
     c56:	4a35      	ldr	r2, [pc, #212]	; (d2c <_spi_interrupt_handler+0x180>)
     c58:	7813      	ldrb	r3, [r2, #0]
     c5a:	3301      	adds	r3, #1
     c5c:	b2db      	uxtb	r3, r3
     c5e:	7013      	strb	r3, [r2, #0]
				if(buffer_length == 1)
     c60:	2b01      	cmp	r3, #1
     c62:	d01d      	beq.n	ca0 <_spi_interrupt_handler+0xf4>
				if (module->remaining_rx_buffer_length == 0) 
     c64:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     c66:	b29b      	uxth	r3, r3
     c68:	2b00      	cmp	r3, #0
     c6a:	d1cb      	bne.n	c04 <_spi_interrupt_handler+0x58>
					buffer_length = 0;
     c6c:	4a2f      	ldr	r2, [pc, #188]	; (d2c <_spi_interrupt_handler+0x180>)
     c6e:	7013      	strb	r3, [r2, #0]
					transcation_start = false;
     c70:	4a2f      	ldr	r2, [pc, #188]	; (d30 <_spi_interrupt_handler+0x184>)
     c72:	7013      	strb	r3, [r2, #0]
					firmware_check = false;
     c74:	4a2f      	ldr	r2, [pc, #188]	; (d34 <_spi_interrupt_handler+0x188>)
     c76:	7013      	strb	r3, [r2, #0]
					serial_timeout = false;
     c78:	4a2f      	ldr	r2, [pc, #188]	; (d38 <_spi_interrupt_handler+0x18c>)
     c7a:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ;
     c7c:	4a2f      	ldr	r2, [pc, #188]	; (d3c <_spi_interrupt_handler+0x190>)
     c7e:	7013      	strb	r3, [r2, #0]
					module->status = STATUS_OK;
     c80:	2238      	movs	r2, #56	; 0x38
     c82:	54ab      	strb	r3, [r5, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     c84:	3304      	adds	r3, #4
     c86:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     c88:	7a6b      	ldrb	r3, [r5, #9]
     c8a:	2b02      	cmp	r3, #2
     c8c:	d02d      	beq.n	cea <_spi_interrupt_handler+0x13e>
					} else if (module->dir == SPI_DIRECTION_READ) {
     c8e:	7a6b      	ldrb	r3, [r5, #9]
     c90:	2b00      	cmp	r3, #0
     c92:	d1b7      	bne.n	c04 <_spi_interrupt_handler+0x58>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     c94:	07bb      	lsls	r3, r7, #30
     c96:	d5b5      	bpl.n	c04 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     c98:	0028      	movs	r0, r5
     c9a:	692b      	ldr	r3, [r5, #16]
     c9c:	4798      	blx	r3
     c9e:	e7b1      	b.n	c04 <_spi_interrupt_handler+0x58>
					transcation_start = true;
     ca0:	2201      	movs	r2, #1
     ca2:	4b23      	ldr	r3, [pc, #140]	; (d30 <_spi_interrupt_handler+0x184>)
     ca4:	701a      	strb	r2, [r3, #0]
					serial_timeout = false;
     ca6:	2300      	movs	r3, #0
     ca8:	4a23      	ldr	r2, [pc, #140]	; (d38 <_spi_interrupt_handler+0x18c>)
     caa:	7013      	strb	r3, [r2, #0]
					serial_timeout_count = 0 ; 
     cac:	4a23      	ldr	r2, [pc, #140]	; (d3c <_spi_interrupt_handler+0x190>)
     cae:	7013      	strb	r3, [r2, #0]
					if ((*(module->rx_buffer_ptr-1) == WR_SPI_INT_SET_ALL || *(module->rx_buffer_ptr-1) == WR_SPI_INT_RECEIVE_ALL)) 
     cb0:	780b      	ldrb	r3, [r1, #0]
     cb2:	b2db      	uxtb	r3, r3
     cb4:	2bca      	cmp	r3, #202	; 0xca
     cb6:	d00f      	beq.n	cd8 <_spi_interrupt_handler+0x12c>
     cb8:	780b      	ldrb	r3, [r1, #0]
     cba:	b2db      	uxtb	r3, r3
     cbc:	2bcc      	cmp	r3, #204	; 0xcc
     cbe:	d00b      	beq.n	cd8 <_spi_interrupt_handler+0x12c>
					else if(*(module->rx_buffer_ptr-1) == DEVICE_VERSION)
     cc0:	780b      	ldrb	r3, [r1, #0]
     cc2:	b2db      	uxtb	r3, r3
     cc4:	2b8c      	cmp	r3, #140	; 0x8c
     cc6:	d1cd      	bne.n	c64 <_spi_interrupt_handler+0xb8>
						*(module->tx_buffer_ptr)      =	DEVICE_ID_HARDWARE ;
     cc8:	3b8b      	subs	r3, #139	; 0x8b
     cca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     ccc:	7013      	strb	r3, [r2, #0]
						*(module->tx_buffer_ptr + 1)  = DEVICE_ID_FIRMWARE ;
     cce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     cd0:	7053      	strb	r3, [r2, #1]
						firmware_check				  = true;
     cd2:	4a18      	ldr	r2, [pc, #96]	; (d34 <_spi_interrupt_handler+0x188>)
     cd4:	7013      	strb	r3, [r2, #0]
     cd6:	e7c5      	b.n	c64 <_spi_interrupt_handler+0xb8>
						module->remaining_tx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
     cd8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     cda:	3309      	adds	r3, #9
     cdc:	b29b      	uxth	r3, r3
     cde:	86ab      	strh	r3, [r5, #52]	; 0x34
						module->remaining_rx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
     ce0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
     ce2:	3309      	adds	r3, #9
     ce4:	b29b      	uxth	r3, r3
     ce6:	862b      	strh	r3, [r5, #48]	; 0x30
     ce8:	e7bc      	b.n	c64 <_spi_interrupt_handler+0xb8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     cea:	077b      	lsls	r3, r7, #29
     cec:	d400      	bmi.n	cf0 <_spi_interrupt_handler+0x144>
     cee:	e789      	b.n	c04 <_spi_interrupt_handler+0x58>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     cf0:	0028      	movs	r0, r5
     cf2:	696b      	ldr	r3, [r5, #20]
     cf4:	4798      	blx	r3
     cf6:	e785      	b.n	c04 <_spi_interrupt_handler+0x58>
				if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     cf8:	077b      	lsls	r3, r7, #29
     cfa:	d400      	bmi.n	cfe <_spi_interrupt_handler+0x152>
     cfc:	e78e      	b.n	c1c <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     cfe:	0028      	movs	r0, r5
     d00:	696b      	ldr	r3, [r5, #20]
     d02:	4798      	blx	r3
     d04:	e78a      	b.n	c1c <_spi_interrupt_handler+0x70>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     d06:	0028      	movs	r0, r5
     d08:	6a2b      	ldr	r3, [r5, #32]
     d0a:	4798      	blx	r3
     d0c:	e793      	b.n	c36 <_spi_interrupt_handler+0x8a>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d0e:	2380      	movs	r3, #128	; 0x80
     d10:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d12:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     d14:	067b      	lsls	r3, r7, #25
     d16:	d400      	bmi.n	d1a <_spi_interrupt_handler+0x16e>
     d18:	e791      	b.n	c3e <_spi_interrupt_handler+0x92>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d1c:	0028      	movs	r0, r5
     d1e:	4798      	blx	r3
}
     d20:	e78d      	b.n	c3e <_spi_interrupt_handler+0x92>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	200003b0 	.word	0x200003b0
     d28:	200001ed 	.word	0x200001ed
     d2c:	20000090 	.word	0x20000090
     d30:	200001ee 	.word	0x200001ee
     d34:	200001e9 	.word	0x200001e9
     d38:	200001eb 	.word	0x200001eb
     d3c:	200001ec 	.word	0x200001ec

00000d40 <check_timeout>:
#include "super_servo_control.h"

#define   APP

void check_timeout()
{
     d40:	b510      	push	{r4, lr}
	if(transcation_start == true)
     d42:	4b0e      	ldr	r3, [pc, #56]	; (d7c <check_timeout+0x3c>)
     d44:	781b      	ldrb	r3, [r3, #0]
     d46:	2b00      	cmp	r3, #0
     d48:	d003      	beq.n	d52 <check_timeout+0x12>
	{
		if(serial_timeout == true)
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <check_timeout+0x40>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2b00      	cmp	r3, #0
     d50:	d100      	bne.n	d54 <check_timeout+0x14>
			spi_slave_init();
			spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
		}
	}
	
}
     d52:	bd10      	pop	{r4, pc}
			serial_timeout_count = 0;
     d54:	2300      	movs	r3, #0
     d56:	4a0b      	ldr	r2, [pc, #44]	; (d84 <check_timeout+0x44>)
     d58:	7013      	strb	r3, [r2, #0]
			serial_timeout = false;
     d5a:	4a09      	ldr	r2, [pc, #36]	; (d80 <check_timeout+0x40>)
     d5c:	7013      	strb	r3, [r2, #0]
			transcation_start = false;
     d5e:	4a07      	ldr	r2, [pc, #28]	; (d7c <check_timeout+0x3c>)
     d60:	7013      	strb	r3, [r2, #0]
			spi_reset(&spi_slave_instance);
     d62:	4c09      	ldr	r4, [pc, #36]	; (d88 <check_timeout+0x48>)
     d64:	0020      	movs	r0, r4
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <check_timeout+0x4c>)
     d68:	4798      	blx	r3
			spi_slave_init();
     d6a:	4b09      	ldr	r3, [pc, #36]	; (d90 <check_timeout+0x50>)
     d6c:	4798      	blx	r3
			spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     d6e:	2304      	movs	r3, #4
     d70:	4a08      	ldr	r2, [pc, #32]	; (d94 <check_timeout+0x54>)
     d72:	4909      	ldr	r1, [pc, #36]	; (d98 <check_timeout+0x58>)
     d74:	0020      	movs	r0, r4
     d76:	4c09      	ldr	r4, [pc, #36]	; (d9c <check_timeout+0x5c>)
     d78:	47a0      	blx	r4
}
     d7a:	e7ea      	b.n	d52 <check_timeout+0x12>
     d7c:	200001ee 	.word	0x200001ee
     d80:	200001eb 	.word	0x200001eb
     d84:	200001ec 	.word	0x200001ec
     d88:	200001fc 	.word	0x200001fc
     d8c:	000008ed 	.word	0x000008ed
     d90:	00001051 	.word	0x00001051
     d94:	200003dc 	.word	0x200003dc
     d98:	200003f0 	.word	0x200003f0
     d9c:	00000b65 	.word	0x00000b65

00000da0 <spi_main_loop>:




void spi_main_loop()
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46c6      	mov	lr, r8
     da4:	b500      	push	{lr}
     da6:	b086      	sub	sp, #24
	
	volatile enum status_code error_code = 0x10;
     da8:	2210      	movs	r2, #16
     daa:	2317      	movs	r3, #23
     dac:	446b      	add	r3, sp
     dae:	701a      	strb	r2, [r3, #0]

	uint8_t i    = 0;
	uint8_t rw   = 0;
	uint8_t mode = 0;
	static bool test = true;
	transmit_value[0] = 0x88;
     db0:	4b45      	ldr	r3, [pc, #276]	; (ec8 <spi_main_loop+0x128>)
     db2:	3278      	adds	r2, #120	; 0x78
     db4:	701a      	strb	r2, [r3, #0]
	transmit_value[1] = 0xAA;
     db6:	3222      	adds	r2, #34	; 0x22
     db8:	705a      	strb	r2, [r3, #1]
	transmit_value[2] = 0xBB;
     dba:	3211      	adds	r2, #17
     dbc:	709a      	strb	r2, [r3, #2]
	transmit_value[3] = 0xCC;
     dbe:	3211      	adds	r2, #17
     dc0:	70da      	strb	r2, [r3, #3]
	check_timeout();
     dc2:	4b42      	ldr	r3, [pc, #264]	; (ecc <spi_main_loop+0x12c>)
     dc4:	4798      	blx	r3
	if(transfer_complete_spi_slave == true)
     dc6:	4b42      	ldr	r3, [pc, #264]	; (ed0 <spi_main_loop+0x130>)
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	2b00      	cmp	r3, #0
     dcc:	d009      	beq.n	de2 <spi_main_loop+0x42>
	{
		rw   = temp_receive[0] & MASK_RW ;
     dce:	4a41      	ldr	r2, [pc, #260]	; (ed4 <spi_main_loop+0x134>)
     dd0:	7813      	ldrb	r3, [r2, #0]
		mode = temp_receive[0] & MASK_MODE;
     dd2:	7812      	ldrb	r2, [r2, #0]
     dd4:	b2d2      	uxtb	r2, r2
		if(rw == WRITE_SPI)
     dd6:	213f      	movs	r1, #63	; 0x3f
     dd8:	438b      	bics	r3, r1
     dda:	2bc0      	cmp	r3, #192	; 0xc0
     ddc:	d005      	beq.n	dea <spi_main_loop+0x4a>
		}
		else if(rw == READ_SPI)
		{
			
		}
		check_buffer();		
     dde:	4b3e      	ldr	r3, [pc, #248]	; (ed8 <spi_main_loop+0x138>)
     de0:	4798      	blx	r3
	}
	
}		
     de2:	b006      	add	sp, #24
     de4:	bc04      	pop	{r2}
     de6:	4690      	mov	r8, r2
     de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mode = temp_receive[0] & MASK_MODE;
     dea:	3b81      	subs	r3, #129	; 0x81
     dec:	401a      	ands	r2, r3
			switch(mode)
     dee:	b2d3      	uxtb	r3, r2
     df0:	2b0b      	cmp	r3, #11
     df2:	d8f4      	bhi.n	dde <spi_main_loop+0x3e>
     df4:	0092      	lsls	r2, r2, #2
     df6:	4b39      	ldr	r3, [pc, #228]	; (edc <spi_main_loop+0x13c>)
     df8:	589b      	ldr	r3, [r3, r2]
     dfa:	469f      	mov	pc, r3
					update_LEDS_single(LED1_NO,temp_receive[1]);
     dfc:	4b35      	ldr	r3, [pc, #212]	; (ed4 <spi_main_loop+0x134>)
     dfe:	7859      	ldrb	r1, [r3, #1]
     e00:	b2c9      	uxtb	r1, r1
     e02:	2031      	movs	r0, #49	; 0x31
     e04:	4b36      	ldr	r3, [pc, #216]	; (ee0 <spi_main_loop+0x140>)
     e06:	4798      	blx	r3
					break;
     e08:	e7e9      	b.n	dde <spi_main_loop+0x3e>
					update_LEDS_single(LED2_NO,temp_receive[1]);
     e0a:	4b32      	ldr	r3, [pc, #200]	; (ed4 <spi_main_loop+0x134>)
     e0c:	7859      	ldrb	r1, [r3, #1]
     e0e:	b2c9      	uxtb	r1, r1
     e10:	2032      	movs	r0, #50	; 0x32
     e12:	4b33      	ldr	r3, [pc, #204]	; (ee0 <spi_main_loop+0x140>)
     e14:	4798      	blx	r3
					break;
     e16:	e7e2      	b.n	dde <spi_main_loop+0x3e>
				    update_ORB_single(RGB1_NO , temp_receive[1] , temp_receive[2] , temp_receive[3]);
     e18:	4b2e      	ldr	r3, [pc, #184]	; (ed4 <spi_main_loop+0x134>)
     e1a:	7859      	ldrb	r1, [r3, #1]
     e1c:	b2c9      	uxtb	r1, r1
     e1e:	789a      	ldrb	r2, [r3, #2]
     e20:	b2d2      	uxtb	r2, r2
     e22:	78db      	ldrb	r3, [r3, #3]
     e24:	b2db      	uxtb	r3, r3
     e26:	2031      	movs	r0, #49	; 0x31
     e28:	4c2e      	ldr	r4, [pc, #184]	; (ee4 <spi_main_loop+0x144>)
     e2a:	47a0      	blx	r4
					break;
     e2c:	e7d7      	b.n	dde <spi_main_loop+0x3e>
					update_ORB_single(RGB2_NO , temp_receive[1] , temp_receive[2] , temp_receive[3]);
     e2e:	4b29      	ldr	r3, [pc, #164]	; (ed4 <spi_main_loop+0x134>)
     e30:	7859      	ldrb	r1, [r3, #1]
     e32:	b2c9      	uxtb	r1, r1
     e34:	789a      	ldrb	r2, [r3, #2]
     e36:	b2d2      	uxtb	r2, r2
     e38:	78db      	ldrb	r3, [r3, #3]
     e3a:	b2db      	uxtb	r3, r3
     e3c:	2032      	movs	r0, #50	; 0x32
     e3e:	4c29      	ldr	r4, [pc, #164]	; (ee4 <spi_main_loop+0x144>)
     e40:	47a0      	blx	r4
					break;
     e42:	e7cc      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO1_NO,temp_receive[1]);
     e44:	4b23      	ldr	r3, [pc, #140]	; (ed4 <spi_main_loop+0x134>)
     e46:	7859      	ldrb	r1, [r3, #1]
     e48:	b2c9      	uxtb	r1, r1
     e4a:	2031      	movs	r0, #49	; 0x31
     e4c:	4b26      	ldr	r3, [pc, #152]	; (ee8 <spi_main_loop+0x148>)
     e4e:	4798      	blx	r3
					break;
     e50:	e7c5      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO2_NO,temp_receive[1]);
     e52:	4b20      	ldr	r3, [pc, #128]	; (ed4 <spi_main_loop+0x134>)
     e54:	7859      	ldrb	r1, [r3, #1]
     e56:	b2c9      	uxtb	r1, r1
     e58:	2032      	movs	r0, #50	; 0x32
     e5a:	4b23      	ldr	r3, [pc, #140]	; (ee8 <spi_main_loop+0x148>)
     e5c:	4798      	blx	r3
					break;
     e5e:	e7be      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO3_NO,temp_receive[1]);
     e60:	4b1c      	ldr	r3, [pc, #112]	; (ed4 <spi_main_loop+0x134>)
     e62:	7859      	ldrb	r1, [r3, #1]
     e64:	b2c9      	uxtb	r1, r1
     e66:	2033      	movs	r0, #51	; 0x33
     e68:	4b1f      	ldr	r3, [pc, #124]	; (ee8 <spi_main_loop+0x148>)
     e6a:	4798      	blx	r3
					break;
     e6c:	e7b7      	b.n	dde <spi_main_loop+0x3e>
					update_super_servo_single(SERVO4_NO,temp_receive[1]);
     e6e:	4b19      	ldr	r3, [pc, #100]	; (ed4 <spi_main_loop+0x134>)
     e70:	7859      	ldrb	r1, [r3, #1]
     e72:	b2c9      	uxtb	r1, r1
     e74:	2034      	movs	r0, #52	; 0x34
     e76:	4b1c      	ldr	r3, [pc, #112]	; (ee8 <spi_main_loop+0x148>)
     e78:	4798      	blx	r3
					break;
     e7a:	e7b0      	b.n	dde <spi_main_loop+0x3e>
					update_ORB_LED(temp_receive[3],temp_receive[4] ,temp_receive[5] ,temp_receive[6] ,temp_receive[7] ,temp_receive[8],temp_receive[1],temp_receive[2]);
     e7c:	4c15      	ldr	r4, [pc, #84]	; (ed4 <spi_main_loop+0x134>)
     e7e:	78e0      	ldrb	r0, [r4, #3]
     e80:	b2c0      	uxtb	r0, r0
     e82:	7921      	ldrb	r1, [r4, #4]
     e84:	b2c9      	uxtb	r1, r1
     e86:	7962      	ldrb	r2, [r4, #5]
     e88:	b2d2      	uxtb	r2, r2
     e8a:	79a3      	ldrb	r3, [r4, #6]
     e8c:	b2db      	uxtb	r3, r3
     e8e:	4698      	mov	r8, r3
     e90:	79e5      	ldrb	r5, [r4, #7]
     e92:	7a26      	ldrb	r6, [r4, #8]
     e94:	7867      	ldrb	r7, [r4, #1]
     e96:	78a3      	ldrb	r3, [r4, #2]
     e98:	9303      	str	r3, [sp, #12]
     e9a:	9702      	str	r7, [sp, #8]
     e9c:	9601      	str	r6, [sp, #4]
     e9e:	9500      	str	r5, [sp, #0]
     ea0:	4643      	mov	r3, r8
     ea2:	4d12      	ldr	r5, [pc, #72]	; (eec <spi_main_loop+0x14c>)
     ea4:	47a8      	blx	r5
					update_super_servo(temp_receive[9] , temp_receive[10] , temp_receive[11], temp_receive[12]);
     ea6:	7a60      	ldrb	r0, [r4, #9]
     ea8:	b2c0      	uxtb	r0, r0
     eaa:	7aa1      	ldrb	r1, [r4, #10]
     eac:	b2c9      	uxtb	r1, r1
     eae:	7ae2      	ldrb	r2, [r4, #11]
     eb0:	b2d2      	uxtb	r2, r2
     eb2:	7b23      	ldrb	r3, [r4, #12]
     eb4:	b2db      	uxtb	r3, r3
     eb6:	4c0e      	ldr	r4, [pc, #56]	; (ef0 <spi_main_loop+0x150>)
     eb8:	47a0      	blx	r4
					break;
     eba:	e790      	b.n	dde <spi_main_loop+0x3e>
					switch_off_ORB_LED();
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <spi_main_loop+0x154>)
     ebe:	4798      	blx	r3
					switch_off_servos();
     ec0:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <spi_main_loop+0x158>)
     ec2:	4798      	blx	r3
					break;
     ec4:	e78b      	b.n	dde <spi_main_loop+0x3e>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	20000430 	.word	0x20000430
     ecc:	00000d41 	.word	0x00000d41
     ed0:	200001ef 	.word	0x200001ef
     ed4:	2000040c 	.word	0x2000040c
     ed8:	00000fa1 	.word	0x00000fa1
     edc:	00003a30 	.word	0x00003a30
     ee0:	0000198d 	.word	0x0000198d
     ee4:	00001935 	.word	0x00001935
     ee8:	00001e71 	.word	0x00001e71
     eec:	000018c1 	.word	0x000018c1
     ef0:	00001d9d 	.word	0x00001d9d
     ef4:	000019e1 	.word	0x000019e1
     ef8:	00001e5d 	.word	0x00001e5d

00000efc <configure_spi_slave>:
extern volatile bool spi_reset_1 ;

#define LENGTH_SET_ALL 13
#define LENGTH_SINGLE   4


     efc:	b570      	push	{r4, r5, r6, lr}
     efe:	b08e      	sub	sp, #56	; 0x38
	config->data_order       = SPI_DATA_ORDER_MSB;
     f00:	2400      	movs	r4, #0
     f02:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     f04:	9402      	str	r4, [sp, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     f06:	23c0      	movs	r3, #192	; 0xc0
     f08:	039b      	lsls	r3, r3, #14
     f0a:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     f0c:	466b      	mov	r3, sp
     f0e:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     f10:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     f12:	2501      	movs	r5, #1
     f14:	749d      	strb	r5, [r3, #18]
	config->select_slave_low_detect_enable= true;
     f16:	74dd      	strb	r5, [r3, #19]
	config->master_slave_select_enable= false;
     f18:	751c      	strb	r4, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
     f1a:	2324      	movs	r3, #36	; 0x24
     f1c:	466a      	mov	r2, sp
     f1e:	54d4      	strb	r4, [r2, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     f20:	220c      	movs	r2, #12
     f22:	2100      	movs	r1, #0
     f24:	a806      	add	r0, sp, #24
     f26:	4b14      	ldr	r3, [pc, #80]	; (f78 <configure_spi_slave+0x7c>)
     f28:	4798      	blx	r3
void configure_spi_slave(void)
{
	struct spi_config config_spi_slave;
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_slave);
     f2a:	466b      	mov	r3, sp
     f2c:	701c      	strb	r4, [r3, #0]
	config_spi_slave.transfer_mode = SPI_TRANSFER_MODE_0;
     f2e:	2320      	movs	r3, #32
     f30:	466a      	mov	r2, sp
     f32:	54d5      	strb	r5, [r2, r3]
	config_spi_slave.mode = SPI_MODE_SLAVE;
     f34:	9406      	str	r4, [sp, #24]
	config_spi_slave.mode_specific.slave.preload_enable = true;
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
	//config_spi_slave.data_order =  SPI_DATA_ORDER_LSB;
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <configure_spi_slave+0x80>)
     f38:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.mux_setting = SPI_SLAVE_MUX_SETTING;
     f3a:	4b11      	ldr	r3, [pc, #68]	; (f80 <configure_spi_slave+0x84>)
     f3c:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad0 = SPI_SLAVE_PINMUX_PAD0;
     f3e:	4b11      	ldr	r3, [pc, #68]	; (f84 <configure_spi_slave+0x88>)
     f40:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad1 = SPI_SLAVE_PINMUX_PAD1;
     f42:	4b11      	ldr	r3, [pc, #68]	; (f88 <configure_spi_slave+0x8c>)
     f44:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_slave.pinmux_pad2 = SPI_SLAVE_PINMUX_PAD2;
     f46:	4e11      	ldr	r6, [pc, #68]	; (f8c <configure_spi_slave+0x90>)
     f48:	4911      	ldr	r1, [pc, #68]	; (f90 <configure_spi_slave+0x94>)
     f4a:	0030      	movs	r0, r6
     f4c:	4b11      	ldr	r3, [pc, #68]	; (f94 <configure_spi_slave+0x98>)
     f4e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     f50:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     f52:	0020      	movs	r0, r4
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <configure_spi_slave+0x9c>)
     f56:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f58:	231f      	movs	r3, #31
     f5a:	4018      	ands	r0, r3
     f5c:	4085      	lsls	r5, r0
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <configure_spi_slave+0xa0>)
     f60:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f62:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     f64:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     f66:	2b00      	cmp	r3, #0
     f68:	d1fc      	bne.n	f64 <configure_spi_slave+0x68>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     f6a:	6823      	ldr	r3, [r4, #0]
     f6c:	2202      	movs	r2, #2
     f6e:	4313      	orrs	r3, r2
     f70:	6023      	str	r3, [r4, #0]
	config_spi_slave.pinmux_pad3 = SPI_SLAVE_PINMUX_PAD3;
	spi_init(&spi_slave_instance,  SLAVE_SPI_MODULE, &config_spi_slave);
	spi_enable(&spi_slave_instance);
     f72:	b00e      	add	sp, #56	; 0x38
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	0000393b 	.word	0x0000393b
     f7c:	00160002 	.word	0x00160002
     f80:	00170002 	.word	0x00170002
     f84:	00180002 	.word	0x00180002
     f88:	00190002 	.word	0x00190002
     f8c:	200001fc 	.word	0x200001fc
     f90:	42000c00 	.word	0x42000c00
     f94:	00000939 	.word	0x00000939
     f98:	00002acd 	.word	0x00002acd
     f9c:	e000e100 	.word	0xe000e100

00000fa0 <check_buffer>:
	
}



     fa0:	b510      	push	{r4, lr}
void check_buffer()
{
     fa2:	4b1c      	ldr	r3, [pc, #112]	; (1014 <check_buffer+0x74>)
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	4a1c      	ldr	r2, [pc, #112]	; (1018 <check_buffer+0x78>)
     fa8:	7812      	ldrb	r2, [r2, #0]
     faa:	b2db      	uxtb	r3, r3
     fac:	4293      	cmp	r3, r2
     fae:	d018      	beq.n	fe2 <check_buffer+0x42>
	{
		transfer_complete_spi_slave = false;
		tail_pointer = 0;
		head_pointer = 0;
	}
	else if((head_pointer >490) || (tail_pointer > 490))
     fb0:	4b18      	ldr	r3, [pc, #96]	; (1014 <check_buffer+0x74>)
     fb2:	781b      	ldrb	r3, [r3, #0]
     fb4:	b2db      	uxtb	r3, r3
     fb6:	4a19      	ldr	r2, [pc, #100]	; (101c <check_buffer+0x7c>)
     fb8:	5cd3      	ldrb	r3, [r2, r3]
     fba:	b2db      	uxtb	r3, r3
     fbc:	2200      	movs	r2, #0
     fbe:	2bca      	cmp	r3, #202	; 0xca
     fc0:	d017      	beq.n	ff2 <check_buffer+0x52>
	{	
		for(i=0; i<LENGTH_SET_ALL;i++)
		{
			temp_receive[i] = ring_buffer[tail_pointer];
			tail_pointer++;
		}
     fc2:	4914      	ldr	r1, [pc, #80]	; (1014 <check_buffer+0x74>)
     fc4:	4c15      	ldr	r4, [pc, #84]	; (101c <check_buffer+0x7c>)
     fc6:	4816      	ldr	r0, [pc, #88]	; (1020 <check_buffer+0x80>)
     fc8:	780b      	ldrb	r3, [r1, #0]
     fca:	b2db      	uxtb	r3, r3
     fcc:	5ce3      	ldrb	r3, [r4, r3]
     fce:	b2db      	uxtb	r3, r3
     fd0:	5483      	strb	r3, [r0, r2]
	}
     fd2:	780b      	ldrb	r3, [r1, #0]
     fd4:	3301      	adds	r3, #1
     fd6:	b2db      	uxtb	r3, r3
     fd8:	700b      	strb	r3, [r1, #0]
     fda:	3201      	adds	r2, #1
			temp_receive[i] = ring_buffer[tail_pointer];
     fdc:	2a04      	cmp	r2, #4
     fde:	d1f3      	bne.n	fc8 <check_buffer+0x28>
	else
	{
		for(i=0; i<LENGTH_SINGLE;i++)
		{
			temp_receive[i] = ring_buffer[tail_pointer];
     fe0:	bd10      	pop	{r4, pc}
	
     fe2:	2300      	movs	r3, #0
     fe4:	4a0f      	ldr	r2, [pc, #60]	; (1024 <check_buffer+0x84>)
     fe6:	7013      	strb	r3, [r2, #0]
	if(tail_pointer == head_pointer)
     fe8:	4a0a      	ldr	r2, [pc, #40]	; (1014 <check_buffer+0x74>)
     fea:	7013      	strb	r3, [r2, #0]
	{
     fec:	4a0a      	ldr	r2, [pc, #40]	; (1018 <check_buffer+0x78>)
     fee:	7013      	strb	r3, [r2, #0]
     ff0:	e7f6      	b.n	fe0 <check_buffer+0x40>
	}
     ff2:	4908      	ldr	r1, [pc, #32]	; (1014 <check_buffer+0x74>)
     ff4:	4c09      	ldr	r4, [pc, #36]	; (101c <check_buffer+0x7c>)
     ff6:	480a      	ldr	r0, [pc, #40]	; (1020 <check_buffer+0x80>)
     ff8:	780b      	ldrb	r3, [r1, #0]
     ffa:	b2db      	uxtb	r3, r3
     ffc:	5ce3      	ldrb	r3, [r4, r3]
     ffe:	b2db      	uxtb	r3, r3
    1000:	5483      	strb	r3, [r0, r2]
	//Transfer receive
    1002:	780b      	ldrb	r3, [r1, #0]
    1004:	3301      	adds	r3, #1
    1006:	b2db      	uxtb	r3, r3
    1008:	700b      	strb	r3, [r1, #0]
    100a:	3201      	adds	r2, #1
		head_pointer = 0;
    100c:	2a0d      	cmp	r2, #13
    100e:	d1f3      	bne.n	ff8 <check_buffer+0x58>
    1010:	e7e6      	b.n	fe0 <check_buffer+0x40>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	20000092 	.word	0x20000092
    1018:	20000091 	.word	0x20000091
    101c:	20000238 	.word	0x20000238
    1020:	2000040c 	.word	0x2000040c
    1024:	200001ef 	.word	0x200001ef

00001028 <configure_spi_slave_callbacks>:
		else
		{
			for(i=0 ; i<LENGTH_SINGLE;i++)
			{
				ring_buffer[head_pointer] = received_value[i];
				head_pointer++;
    1028:	b510      	push	{r4, lr}
			}
    102a:	4c06      	ldr	r4, [pc, #24]	; (1044 <configure_spi_slave_callbacks+0x1c>)
    102c:	2202      	movs	r2, #2
    102e:	4906      	ldr	r1, [pc, #24]	; (1048 <configure_spi_slave_callbacks+0x20>)
    1030:	0020      	movs	r0, r4
    1032:	4b06      	ldr	r3, [pc, #24]	; (104c <configure_spi_slave_callbacks+0x24>)
    1034:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    1036:	2237      	movs	r2, #55	; 0x37
    1038:	5ca3      	ldrb	r3, [r4, r2]
    103a:	2104      	movs	r1, #4
    103c:	430b      	orrs	r3, r1
    103e:	54a3      	strb	r3, [r4, r2]
		}
		
    1040:	bd10      	pop	{r4, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	200001fc 	.word	0x200001fc
    1048:	0000109d 	.word	0x0000109d
    104c:	00000b4d 	.word	0x00000b4d

00001050 <spi_slave_init>:
		flash_status_LED = false;
		spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
	}
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	b083      	sub	sp, #12
	
    1054:	2210      	movs	r2, #16
    1056:	466b      	mov	r3, sp
    1058:	71da      	strb	r2, [r3, #7]
}
    105a:	4b0a      	ldr	r3, [pc, #40]	; (1084 <spi_slave_init+0x34>)
    105c:	4798      	blx	r3

    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <spi_slave_init+0x38>)
    1060:	4798      	blx	r3


void configure_spi_slave_callbacks(void)
    1062:	4e0a      	ldr	r6, [pc, #40]	; (108c <spi_slave_init+0x3c>)
    1064:	4d0a      	ldr	r5, [pc, #40]	; (1090 <spi_slave_init+0x40>)
    1066:	4c0b      	ldr	r4, [pc, #44]	; (1094 <spi_slave_init+0x44>)
    1068:	2304      	movs	r3, #4
    106a:	0032      	movs	r2, r6
    106c:	0029      	movs	r1, r5
    106e:	0020      	movs	r0, r4
    1070:	4f09      	ldr	r7, [pc, #36]	; (1098 <spi_slave_init+0x48>)
    1072:	47b8      	blx	r7
    1074:	466b      	mov	r3, sp
    1076:	71d8      	strb	r0, [r3, #7]
    1078:	3307      	adds	r3, #7
{
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	2b00      	cmp	r3, #0
    107e:	d1f3      	bne.n	1068 <spi_slave_init+0x18>
	spi_register_callback(&spi_slave_instance, spi_slave_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    1080:	b003      	add	sp, #12
    1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1084:	00000efd 	.word	0x00000efd
    1088:	00001029 	.word	0x00001029
    108c:	200003dc 	.word	0x200003dc
    1090:	200003f0 	.word	0x200003f0
    1094:	200001fc 	.word	0x200001fc
    1098:	00000b65 	.word	0x00000b65

0000109c <spi_slave_callback>:
	if(tail_pointer == head_pointer)
    109c:	b570      	push	{r4, r5, r6, lr}
		transfer_complete_spi_slave = false;
    109e:	2201      	movs	r2, #1
    10a0:	4b23      	ldr	r3, [pc, #140]	; (1130 <spi_slave_callback+0x94>)
    10a2:	701a      	strb	r2, [r3, #0]
		tail_pointer = 0;
    10a4:	2200      	movs	r2, #0
    10a6:	4b23      	ldr	r3, [pc, #140]	; (1134 <spi_slave_callback+0x98>)
    10a8:	701a      	strb	r2, [r3, #0]
		head_pointer = 0;
    10aa:	4b23      	ldr	r3, [pc, #140]	; (1138 <spi_slave_callback+0x9c>)
    10ac:	781b      	ldrb	r3, [r3, #0]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d11e      	bne.n	10f0 <spi_slave_callback+0x54>
	transfer_complete_spi_slave = true;
    10b2:	4b22      	ldr	r3, [pc, #136]	; (113c <spi_slave_callback+0xa0>)
    10b4:	781b      	ldrb	r3, [r3, #0]
    10b6:	b2db      	uxtb	r3, r3
    10b8:	2200      	movs	r2, #0
    10ba:	2bca      	cmp	r3, #202	; 0xca
    10bc:	d027      	beq.n	110e <spi_slave_callback+0x72>
		{
    10be:	4820      	ldr	r0, [pc, #128]	; (1140 <spi_slave_callback+0xa4>)
    10c0:	4d1e      	ldr	r5, [pc, #120]	; (113c <spi_slave_callback+0xa0>)
    10c2:	4c20      	ldr	r4, [pc, #128]	; (1144 <spi_slave_callback+0xa8>)
    10c4:	7803      	ldrb	r3, [r0, #0]
    10c6:	b2db      	uxtb	r3, r3
    10c8:	5ca9      	ldrb	r1, [r5, r2]
    10ca:	b2c9      	uxtb	r1, r1
    10cc:	54e1      	strb	r1, [r4, r3]
			for(i=0; i<LENGTH_SET_ALL;i++)
    10ce:	7803      	ldrb	r3, [r0, #0]
    10d0:	3301      	adds	r3, #1
    10d2:	b2db      	uxtb	r3, r3
    10d4:	7003      	strb	r3, [r0, #0]
    10d6:	3201      	adds	r2, #1
	{
    10d8:	2a04      	cmp	r2, #4
    10da:	d1f3      	bne.n	10c4 <spi_slave_callback+0x28>
				head_pointer++;
    10dc:	2200      	movs	r2, #0
    10de:	4b1a      	ldr	r3, [pc, #104]	; (1148 <spi_slave_callback+0xac>)
    10e0:	701a      	strb	r2, [r3, #0]
			}
    10e2:	2304      	movs	r3, #4
    10e4:	4a15      	ldr	r2, [pc, #84]	; (113c <spi_slave_callback+0xa0>)
    10e6:	4919      	ldr	r1, [pc, #100]	; (114c <spi_slave_callback+0xb0>)
    10e8:	4819      	ldr	r0, [pc, #100]	; (1150 <spi_slave_callback+0xb4>)
    10ea:	4c1a      	ldr	r4, [pc, #104]	; (1154 <spi_slave_callback+0xb8>)
    10ec:	47a0      	blx	r4
		else
    10ee:	bd70      	pop	{r4, r5, r6, pc}

    10f0:	4b11      	ldr	r3, [pc, #68]	; (1138 <spi_slave_callback+0x9c>)
    10f2:	701a      	strb	r2, [r3, #0]
}
    10f4:	4c16      	ldr	r4, [pc, #88]	; (1150 <spi_slave_callback+0xb4>)
    10f6:	0020      	movs	r0, r4
    10f8:	4b17      	ldr	r3, [pc, #92]	; (1158 <spi_slave_callback+0xbc>)
    10fa:	4798      	blx	r3

    10fc:	4b17      	ldr	r3, [pc, #92]	; (115c <spi_slave_callback+0xc0>)
    10fe:	4798      	blx	r3

    1100:	2304      	movs	r3, #4
    1102:	4a0e      	ldr	r2, [pc, #56]	; (113c <spi_slave_callback+0xa0>)
    1104:	4911      	ldr	r1, [pc, #68]	; (114c <spi_slave_callback+0xb0>)
    1106:	0020      	movs	r0, r4
    1108:	4c12      	ldr	r4, [pc, #72]	; (1154 <spi_slave_callback+0xb8>)
    110a:	47a0      	blx	r4
    110c:	e7ef      	b.n	10ee <spi_slave_callback+0x52>
	{
    110e:	480c      	ldr	r0, [pc, #48]	; (1140 <spi_slave_callback+0xa4>)
    1110:	4d0a      	ldr	r5, [pc, #40]	; (113c <spi_slave_callback+0xa0>)
    1112:	4c0c      	ldr	r4, [pc, #48]	; (1144 <spi_slave_callback+0xa8>)
    1114:	7803      	ldrb	r3, [r0, #0]
    1116:	b2db      	uxtb	r3, r3
    1118:	5ca9      	ldrb	r1, [r5, r2]
    111a:	b2c9      	uxtb	r1, r1
    111c:	54e1      	strb	r1, [r4, r3]
		spi_reset_1 = false;
    111e:	7803      	ldrb	r3, [r0, #0]
    1120:	3301      	adds	r3, #1
    1122:	b2db      	uxtb	r3, r3
    1124:	7003      	strb	r3, [r0, #0]
    1126:	3201      	adds	r2, #1
	volatile uint8_t k =0;
    1128:	2a0d      	cmp	r2, #13
    112a:	d1f3      	bne.n	1114 <spi_slave_callback+0x78>
    112c:	e7d6      	b.n	10dc <spi_slave_callback+0x40>
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	200001ef 	.word	0x200001ef
    1134:	200001ec 	.word	0x200001ec
    1138:	200001ed 	.word	0x200001ed
    113c:	200003dc 	.word	0x200003dc
    1140:	20000091 	.word	0x20000091
    1144:	20000238 	.word	0x20000238
    1148:	2000000d 	.word	0x2000000d
    114c:	200003f0 	.word	0x200003f0
    1150:	200001fc 	.word	0x200001fc
    1154:	00000b65 	.word	0x00000b65
    1158:	000008ed 	.word	0x000008ed
    115c:	00001051 	.word	0x00001051

00001160 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1160:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1162:	2000      	movs	r0, #0
    1164:	4b08      	ldr	r3, [pc, #32]	; (1188 <delay_init+0x28>)
    1166:	4798      	blx	r3
    1168:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    116a:	4c08      	ldr	r4, [pc, #32]	; (118c <delay_init+0x2c>)
    116c:	21fa      	movs	r1, #250	; 0xfa
    116e:	0089      	lsls	r1, r1, #2
    1170:	47a0      	blx	r4
    1172:	4b07      	ldr	r3, [pc, #28]	; (1190 <delay_init+0x30>)
    1174:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1176:	4907      	ldr	r1, [pc, #28]	; (1194 <delay_init+0x34>)
    1178:	0028      	movs	r0, r5
    117a:	47a0      	blx	r4
    117c:	4b06      	ldr	r3, [pc, #24]	; (1198 <delay_init+0x38>)
    117e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1180:	2205      	movs	r2, #5
    1182:	4b06      	ldr	r3, [pc, #24]	; (119c <delay_init+0x3c>)
    1184:	601a      	str	r2, [r3, #0]
}
    1186:	bd70      	pop	{r4, r5, r6, pc}
    1188:	000031e1 	.word	0x000031e1
    118c:	000035e1 	.word	0x000035e1
    1190:	20000000 	.word	0x20000000
    1194:	000f4240 	.word	0x000f4240
    1198:	20000004 	.word	0x20000004
    119c:	e000e010 	.word	0xe000e010

000011a0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    11a0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    11a2:	2200      	movs	r2, #0
    11a4:	2300      	movs	r3, #0
    11a6:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    11a8:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    11aa:	2100      	movs	r1, #0
    11ac:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    11ae:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    11b0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    11b2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    11b4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    11b6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    11b8:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    11ba:	24c0      	movs	r4, #192	; 0xc0
    11bc:	0164      	lsls	r4, r4, #5
    11be:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    11c0:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    11c2:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    11c4:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    11c6:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    11c8:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    11ca:	242a      	movs	r4, #42	; 0x2a
    11cc:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    11ce:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    11d0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    11d2:	3c06      	subs	r4, #6
    11d4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    11d6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    11d8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    11da:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    11dc:	232b      	movs	r3, #43	; 0x2b
    11de:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    11e0:	3301      	adds	r3, #1
    11e2:	54c1      	strb	r1, [r0, r3]
}
    11e4:	bd10      	pop	{r4, pc}
	...

000011e8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    11e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ea:	46d6      	mov	lr, sl
    11ec:	464f      	mov	r7, r9
    11ee:	4646      	mov	r6, r8
    11f0:	b5c0      	push	{r6, r7, lr}
    11f2:	b096      	sub	sp, #88	; 0x58
    11f4:	0007      	movs	r7, r0
    11f6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    11f8:	6001      	str	r1, [r0, #0]
    11fa:	4ac6      	ldr	r2, [pc, #792]	; (1514 <adc_init+0x32c>)
    11fc:	6a10      	ldr	r0, [r2, #32]
    11fe:	2380      	movs	r3, #128	; 0x80
    1200:	005b      	lsls	r3, r3, #1
    1202:	4303      	orrs	r3, r0
    1204:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1206:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1208:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    120a:	07db      	lsls	r3, r3, #31
    120c:	d505      	bpl.n	121a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    120e:	b016      	add	sp, #88	; 0x58
    1210:	bc1c      	pop	{r2, r3, r4}
    1212:	4690      	mov	r8, r2
    1214:	4699      	mov	r9, r3
    1216:	46a2      	mov	sl, r4
    1218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    121a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    121c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    121e:	079b      	lsls	r3, r3, #30
    1220:	d4f5      	bmi.n	120e <adc_init+0x26>
	module_inst->reference = config->reference;
    1222:	7873      	ldrb	r3, [r6, #1]
    1224:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1226:	2b00      	cmp	r3, #0
    1228:	d104      	bne.n	1234 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    122a:	4abb      	ldr	r2, [pc, #748]	; (1518 <adc_init+0x330>)
    122c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    122e:	2104      	movs	r1, #4
    1230:	430b      	orrs	r3, r1
    1232:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1234:	2300      	movs	r3, #0
    1236:	60bb      	str	r3, [r7, #8]
    1238:	60fb      	str	r3, [r7, #12]
    123a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    123c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    123e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1240:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1242:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1244:	4bb5      	ldr	r3, [pc, #724]	; (151c <adc_init+0x334>)
    1246:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1248:	232a      	movs	r3, #42	; 0x2a
    124a:	5cf3      	ldrb	r3, [r6, r3]
    124c:	2b00      	cmp	r3, #0
    124e:	d105      	bne.n	125c <adc_init+0x74>
    1250:	7d33      	ldrb	r3, [r6, #20]
    1252:	2b00      	cmp	r3, #0
    1254:	d102      	bne.n	125c <adc_init+0x74>
		module_inst->software_trigger = true;
    1256:	3301      	adds	r3, #1
    1258:	777b      	strb	r3, [r7, #29]
    125a:	e001      	b.n	1260 <adc_init+0x78>
		module_inst->software_trigger = false;
    125c:	2300      	movs	r3, #0
    125e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1260:	683b      	ldr	r3, [r7, #0]
    1262:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1264:	7833      	ldrb	r3, [r6, #0]
    1266:	466a      	mov	r2, sp
    1268:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    126a:	4669      	mov	r1, sp
    126c:	2013      	movs	r0, #19
    126e:	4bac      	ldr	r3, [pc, #688]	; (1520 <adc_init+0x338>)
    1270:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1272:	2013      	movs	r0, #19
    1274:	4bab      	ldr	r3, [pc, #684]	; (1524 <adc_init+0x33c>)
    1276:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1278:	232c      	movs	r3, #44	; 0x2c
    127a:	5cf2      	ldrb	r2, [r6, r3]
    127c:	2a00      	cmp	r2, #0
    127e:	d054      	beq.n	132a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1280:	3b01      	subs	r3, #1
    1282:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1284:	7b33      	ldrb	r3, [r6, #12]
    1286:	18eb      	adds	r3, r5, r3
    1288:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    128a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    128c:	b2c9      	uxtb	r1, r1
    128e:	428b      	cmp	r3, r1
    1290:	d221      	bcs.n	12d6 <adc_init+0xee>
    1292:	1952      	adds	r2, r2, r5
    1294:	b2d3      	uxtb	r3, r2
    1296:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1298:	4ba3      	ldr	r3, [pc, #652]	; (1528 <adc_init+0x340>)
    129a:	469a      	mov	sl, r3
    129c:	e003      	b.n	12a6 <adc_init+0xbe>
			offset++;
    129e:	3501      	adds	r5, #1
    12a0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    12a2:	454d      	cmp	r5, r9
    12a4:	d017      	beq.n	12d6 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    12a6:	240f      	movs	r4, #15
    12a8:	402c      	ands	r4, r5
    12aa:	7b33      	ldrb	r3, [r6, #12]
    12ac:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    12ae:	2250      	movs	r2, #80	; 0x50
    12b0:	499e      	ldr	r1, [pc, #632]	; (152c <adc_init+0x344>)
    12b2:	a802      	add	r0, sp, #8
    12b4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    12b6:	2c09      	cmp	r4, #9
    12b8:	d8f1      	bhi.n	129e <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    12ba:	00a4      	lsls	r4, r4, #2
    12bc:	ab02      	add	r3, sp, #8
    12be:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12c0:	a901      	add	r1, sp, #4
    12c2:	2300      	movs	r3, #0
    12c4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    12c6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    12c8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    12ca:	3301      	adds	r3, #1
    12cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    12ce:	b2c0      	uxtb	r0, r0
    12d0:	4b97      	ldr	r3, [pc, #604]	; (1530 <adc_init+0x348>)
    12d2:	4798      	blx	r3
    12d4:	e7e3      	b.n	129e <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    12d6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    12d8:	2250      	movs	r2, #80	; 0x50
    12da:	4994      	ldr	r1, [pc, #592]	; (152c <adc_init+0x344>)
    12dc:	a802      	add	r0, sp, #8
    12de:	4b92      	ldr	r3, [pc, #584]	; (1528 <adc_init+0x340>)
    12e0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    12e2:	2c09      	cmp	r4, #9
    12e4:	d913      	bls.n	130e <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    12e6:	7d73      	ldrb	r3, [r6, #21]
    12e8:	009b      	lsls	r3, r3, #2
    12ea:	b2db      	uxtb	r3, r3
    12ec:	4642      	mov	r2, r8
    12ee:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    12f0:	7db3      	ldrb	r3, [r6, #22]
    12f2:	01db      	lsls	r3, r3, #7
    12f4:	7872      	ldrb	r2, [r6, #1]
    12f6:	4313      	orrs	r3, r2
    12f8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    12fa:	4642      	mov	r2, r8
    12fc:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    12fe:	7933      	ldrb	r3, [r6, #4]
    1300:	2b34      	cmp	r3, #52	; 0x34
    1302:	d900      	bls.n	1306 <adc_init+0x11e>
    1304:	e17b      	b.n	15fe <adc_init+0x416>
    1306:	009b      	lsls	r3, r3, #2
    1308:	4a8a      	ldr	r2, [pc, #552]	; (1534 <adc_init+0x34c>)
    130a:	58d3      	ldr	r3, [r2, r3]
    130c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    130e:	00a4      	lsls	r4, r4, #2
    1310:	ab02      	add	r3, sp, #8
    1312:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1314:	a901      	add	r1, sp, #4
    1316:	2300      	movs	r3, #0
    1318:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    131a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    131c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    131e:	3301      	adds	r3, #1
    1320:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1322:	b2c0      	uxtb	r0, r0
    1324:	4b82      	ldr	r3, [pc, #520]	; (1530 <adc_init+0x348>)
    1326:	4798      	blx	r3
    1328:	e7dd      	b.n	12e6 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    132a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    132c:	2250      	movs	r2, #80	; 0x50
    132e:	497f      	ldr	r1, [pc, #508]	; (152c <adc_init+0x344>)
    1330:	a802      	add	r0, sp, #8
    1332:	4b7d      	ldr	r3, [pc, #500]	; (1528 <adc_init+0x340>)
    1334:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1336:	2c09      	cmp	r4, #9
    1338:	d915      	bls.n	1366 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    133a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    133c:	2250      	movs	r2, #80	; 0x50
    133e:	497b      	ldr	r1, [pc, #492]	; (152c <adc_init+0x344>)
    1340:	a802      	add	r0, sp, #8
    1342:	4b79      	ldr	r3, [pc, #484]	; (1528 <adc_init+0x340>)
    1344:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1346:	2c09      	cmp	r4, #9
    1348:	d8cd      	bhi.n	12e6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    134a:	00a4      	lsls	r4, r4, #2
    134c:	ab02      	add	r3, sp, #8
    134e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1350:	a901      	add	r1, sp, #4
    1352:	2300      	movs	r3, #0
    1354:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1356:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1358:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    135a:	3301      	adds	r3, #1
    135c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    135e:	b2c0      	uxtb	r0, r0
    1360:	4b73      	ldr	r3, [pc, #460]	; (1530 <adc_init+0x348>)
    1362:	4798      	blx	r3
    1364:	e7bf      	b.n	12e6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1366:	00a4      	lsls	r4, r4, #2
    1368:	ab02      	add	r3, sp, #8
    136a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    136c:	a901      	add	r1, sp, #4
    136e:	2300      	movs	r3, #0
    1370:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1372:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1374:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1376:	3301      	adds	r3, #1
    1378:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    137a:	b2c0      	uxtb	r0, r0
    137c:	4b6c      	ldr	r3, [pc, #432]	; (1530 <adc_init+0x348>)
    137e:	4798      	blx	r3
    1380:	e7db      	b.n	133a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1382:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1384:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1386:	2102      	movs	r1, #2
    1388:	e01a      	b.n	13c0 <adc_init+0x1d8>
		adjres = config->divide_result;
    138a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    138c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    138e:	2410      	movs	r4, #16
    1390:	e016      	b.n	13c0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1392:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1394:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1396:	2101      	movs	r1, #1
    1398:	e012      	b.n	13c0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    139a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    139c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    139e:	2100      	movs	r1, #0
    13a0:	e00e      	b.n	13c0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13a2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    13a4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    13a6:	2100      	movs	r1, #0
    13a8:	e00a      	b.n	13c0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13aa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    13ac:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    13ae:	2100      	movs	r1, #0
    13b0:	e006      	b.n	13c0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    13b2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    13b4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    13b6:	2100      	movs	r1, #0
    13b8:	e002      	b.n	13c0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    13ba:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    13bc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    13be:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    13c0:	0109      	lsls	r1, r1, #4
    13c2:	2270      	movs	r2, #112	; 0x70
    13c4:	400a      	ands	r2, r1
    13c6:	4313      	orrs	r3, r2
    13c8:	4642      	mov	r2, r8
    13ca:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    13cc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    13ce:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    13d0:	2b3f      	cmp	r3, #63	; 0x3f
    13d2:	d900      	bls.n	13d6 <adc_init+0x1ee>
    13d4:	e71b      	b.n	120e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    13d6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    13d8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    13da:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    13dc:	b25b      	sxtb	r3, r3
    13de:	2b00      	cmp	r3, #0
    13e0:	dbfb      	blt.n	13da <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    13e2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13e4:	8872      	ldrh	r2, [r6, #2]
    13e6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    13e8:	2224      	movs	r2, #36	; 0x24
    13ea:	5cb2      	ldrb	r2, [r6, r2]
    13ec:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13ee:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    13f0:	7d32      	ldrb	r2, [r6, #20]
    13f2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    13f4:	4313      	orrs	r3, r2
    13f6:	7cb2      	ldrb	r2, [r6, #18]
    13f8:	0052      	lsls	r2, r2, #1
    13fa:	4313      	orrs	r3, r2
    13fc:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    13fe:	4642      	mov	r2, r8
    1400:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1402:	7e33      	ldrb	r3, [r6, #24]
    1404:	2b00      	cmp	r3, #0
    1406:	d020      	beq.n	144a <adc_init+0x262>
		switch (resolution) {
    1408:	2c10      	cmp	r4, #16
    140a:	d100      	bne.n	140e <adc_init+0x226>
    140c:	e0d9      	b.n	15c2 <adc_init+0x3da>
    140e:	d800      	bhi.n	1412 <adc_init+0x22a>
    1410:	e098      	b.n	1544 <adc_init+0x35c>
    1412:	2c20      	cmp	r4, #32
    1414:	d100      	bne.n	1418 <adc_init+0x230>
    1416:	e0b6      	b.n	1586 <adc_init+0x39e>
    1418:	2c30      	cmp	r4, #48	; 0x30
    141a:	d116      	bne.n	144a <adc_init+0x262>
			if (config->differential_mode &&
    141c:	7cf2      	ldrb	r2, [r6, #19]
    141e:	2a00      	cmp	r2, #0
    1420:	d00a      	beq.n	1438 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1422:	69f2      	ldr	r2, [r6, #28]
    1424:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1426:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1428:	2aff      	cmp	r2, #255	; 0xff
    142a:	d900      	bls.n	142e <adc_init+0x246>
    142c:	e6ef      	b.n	120e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    142e:	6a32      	ldr	r2, [r6, #32]
    1430:	3280      	adds	r2, #128	; 0x80
    1432:	2aff      	cmp	r2, #255	; 0xff
    1434:	d900      	bls.n	1438 <adc_init+0x250>
    1436:	e6ea      	b.n	120e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1438:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    143a:	69f2      	ldr	r2, [r6, #28]
    143c:	2aff      	cmp	r2, #255	; 0xff
    143e:	dd00      	ble.n	1442 <adc_init+0x25a>
    1440:	e6e5      	b.n	120e <adc_init+0x26>
    1442:	6a32      	ldr	r2, [r6, #32]
    1444:	2aff      	cmp	r2, #255	; 0xff
    1446:	dd00      	ble.n	144a <adc_init+0x262>
    1448:	e6e1      	b.n	120e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    144a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    144c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    144e:	b252      	sxtb	r2, r2
    1450:	2a00      	cmp	r2, #0
    1452:	dbfb      	blt.n	144c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1454:	4642      	mov	r2, r8
    1456:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1458:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    145a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    145c:	b25b      	sxtb	r3, r3
    145e:	2b00      	cmp	r3, #0
    1460:	dbfb      	blt.n	145a <adc_init+0x272>
	adc_module->WINLT.reg =
    1462:	8bb3      	ldrh	r3, [r6, #28]
    1464:	4642      	mov	r2, r8
    1466:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1468:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    146a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    146c:	b25b      	sxtb	r3, r3
    146e:	2b00      	cmp	r3, #0
    1470:	dbfb      	blt.n	146a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1472:	8c33      	ldrh	r3, [r6, #32]
    1474:	4642      	mov	r2, r8
    1476:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1478:	232c      	movs	r3, #44	; 0x2c
    147a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    147c:	2b00      	cmp	r3, #0
    147e:	d005      	beq.n	148c <adc_init+0x2a4>
		inputs_to_scan--;
    1480:	3b01      	subs	r3, #1
    1482:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1484:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1486:	2b0f      	cmp	r3, #15
    1488:	d900      	bls.n	148c <adc_init+0x2a4>
    148a:	e6c0      	b.n	120e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    148c:	222b      	movs	r2, #43	; 0x2b
    148e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1490:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1492:	290f      	cmp	r1, #15
    1494:	d900      	bls.n	1498 <adc_init+0x2b0>
    1496:	e6ba      	b.n	120e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1498:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    149a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    149c:	b252      	sxtb	r2, r2
    149e:	2a00      	cmp	r2, #0
    14a0:	dbfb      	blt.n	149a <adc_init+0x2b2>
			config->negative_input |
    14a2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    14a4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    14a6:	4302      	orrs	r2, r0
    14a8:	68b0      	ldr	r0, [r6, #8]
    14aa:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    14ac:	0509      	lsls	r1, r1, #20
			config->negative_input |
    14ae:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    14b0:	041b      	lsls	r3, r3, #16
			config->negative_input |
    14b2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    14b4:	4642      	mov	r2, r8
    14b6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    14b8:	232a      	movs	r3, #42	; 0x2a
    14ba:	5cf3      	ldrb	r3, [r6, r3]
    14bc:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    14be:	230f      	movs	r3, #15
    14c0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    14c2:	3315      	adds	r3, #21
    14c4:	5cf3      	ldrb	r3, [r6, r3]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d012      	beq.n	14f0 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14ca:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    14cc:	4a1a      	ldr	r2, [pc, #104]	; (1538 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    14ce:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    14d0:	4293      	cmp	r3, r2
    14d2:	d900      	bls.n	14d6 <adc_init+0x2ee>
    14d4:	e69b      	b.n	120e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    14d6:	4642      	mov	r2, r8
    14d8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    14da:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    14dc:	2380      	movs	r3, #128	; 0x80
    14de:	011b      	lsls	r3, r3, #4
    14e0:	18d3      	adds	r3, r2, r3
    14e2:	4915      	ldr	r1, [pc, #84]	; (1538 <adc_init+0x350>)
    14e4:	b29b      	uxth	r3, r3
    14e6:	428b      	cmp	r3, r1
    14e8:	d900      	bls.n	14ec <adc_init+0x304>
    14ea:	e690      	b.n	120e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    14ec:	4643      	mov	r3, r8
    14ee:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    14f0:	4b12      	ldr	r3, [pc, #72]	; (153c <adc_init+0x354>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	015b      	lsls	r3, r3, #5
    14f6:	22e0      	movs	r2, #224	; 0xe0
    14f8:	00d2      	lsls	r2, r2, #3
    14fa:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    14fc:	4a10      	ldr	r2, [pc, #64]	; (1540 <adc_init+0x358>)
    14fe:	6851      	ldr	r1, [r2, #4]
    1500:	0149      	lsls	r1, r1, #5
    1502:	6812      	ldr	r2, [r2, #0]
    1504:	0ed2      	lsrs	r2, r2, #27
    1506:	430a      	orrs	r2, r1
    1508:	b2d2      	uxtb	r2, r2
			) |
    150a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    150c:	4642      	mov	r2, r8
    150e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1510:	2000      	movs	r0, #0
    1512:	e67c      	b.n	120e <adc_init+0x26>
    1514:	40000400 	.word	0x40000400
    1518:	40000800 	.word	0x40000800
    151c:	20000300 	.word	0x20000300
    1520:	000032f9 	.word	0x000032f9
    1524:	0000326d 	.word	0x0000326d
    1528:	00003929 	.word	0x00003929
    152c:	00003b34 	.word	0x00003b34
    1530:	000033f1 	.word	0x000033f1
    1534:	00003a60 	.word	0x00003a60
    1538:	00000fff 	.word	0x00000fff
    153c:	00806024 	.word	0x00806024
    1540:	00806020 	.word	0x00806020
		switch (resolution) {
    1544:	2c00      	cmp	r4, #0
    1546:	d000      	beq.n	154a <adc_init+0x362>
    1548:	e77f      	b.n	144a <adc_init+0x262>
			if (config->differential_mode &&
    154a:	7cf2      	ldrb	r2, [r6, #19]
    154c:	2a00      	cmp	r2, #0
    154e:	d00f      	beq.n	1570 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1550:	69f2      	ldr	r2, [r6, #28]
    1552:	2180      	movs	r1, #128	; 0x80
    1554:	0109      	lsls	r1, r1, #4
    1556:	468c      	mov	ip, r1
    1558:	4462      	add	r2, ip
			if (config->differential_mode &&
    155a:	492a      	ldr	r1, [pc, #168]	; (1604 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    155c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    155e:	428a      	cmp	r2, r1
    1560:	d900      	bls.n	1564 <adc_init+0x37c>
    1562:	e654      	b.n	120e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1564:	6a32      	ldr	r2, [r6, #32]
    1566:	4462      	add	r2, ip
    1568:	4926      	ldr	r1, [pc, #152]	; (1604 <adc_init+0x41c>)
    156a:	428a      	cmp	r2, r1
    156c:	d900      	bls.n	1570 <adc_init+0x388>
    156e:	e64e      	b.n	120e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1570:	4a24      	ldr	r2, [pc, #144]	; (1604 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1572:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1574:	69f1      	ldr	r1, [r6, #28]
    1576:	4291      	cmp	r1, r2
    1578:	dd00      	ble.n	157c <adc_init+0x394>
    157a:	e648      	b.n	120e <adc_init+0x26>
    157c:	6a31      	ldr	r1, [r6, #32]
    157e:	4291      	cmp	r1, r2
    1580:	dd00      	ble.n	1584 <adc_init+0x39c>
    1582:	e644      	b.n	120e <adc_init+0x26>
    1584:	e761      	b.n	144a <adc_init+0x262>
			if (config->differential_mode &&
    1586:	7cf2      	ldrb	r2, [r6, #19]
    1588:	2a00      	cmp	r2, #0
    158a:	d00f      	beq.n	15ac <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    158c:	69f2      	ldr	r2, [r6, #28]
    158e:	2180      	movs	r1, #128	; 0x80
    1590:	0089      	lsls	r1, r1, #2
    1592:	468c      	mov	ip, r1
    1594:	4462      	add	r2, ip
			if (config->differential_mode &&
    1596:	491c      	ldr	r1, [pc, #112]	; (1608 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1598:	2017      	movs	r0, #23
			if (config->differential_mode &&
    159a:	428a      	cmp	r2, r1
    159c:	d900      	bls.n	15a0 <adc_init+0x3b8>
    159e:	e636      	b.n	120e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    15a0:	6a32      	ldr	r2, [r6, #32]
    15a2:	4462      	add	r2, ip
    15a4:	4918      	ldr	r1, [pc, #96]	; (1608 <adc_init+0x420>)
    15a6:	428a      	cmp	r2, r1
    15a8:	d900      	bls.n	15ac <adc_init+0x3c4>
    15aa:	e630      	b.n	120e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    15ac:	4a16      	ldr	r2, [pc, #88]	; (1608 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    15ae:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    15b0:	69f1      	ldr	r1, [r6, #28]
    15b2:	4291      	cmp	r1, r2
    15b4:	dd00      	ble.n	15b8 <adc_init+0x3d0>
    15b6:	e62a      	b.n	120e <adc_init+0x26>
    15b8:	6a31      	ldr	r1, [r6, #32]
    15ba:	4291      	cmp	r1, r2
    15bc:	dd00      	ble.n	15c0 <adc_init+0x3d8>
    15be:	e626      	b.n	120e <adc_init+0x26>
    15c0:	e743      	b.n	144a <adc_init+0x262>
			if (config->differential_mode &&
    15c2:	7cf2      	ldrb	r2, [r6, #19]
    15c4:	2a00      	cmp	r2, #0
    15c6:	d00f      	beq.n	15e8 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    15c8:	69f2      	ldr	r2, [r6, #28]
    15ca:	2180      	movs	r1, #128	; 0x80
    15cc:	0209      	lsls	r1, r1, #8
    15ce:	468c      	mov	ip, r1
    15d0:	4462      	add	r2, ip
			if (config->differential_mode &&
    15d2:	490e      	ldr	r1, [pc, #56]	; (160c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15d4:	2017      	movs	r0, #23
			if (config->differential_mode &&
    15d6:	428a      	cmp	r2, r1
    15d8:	d900      	bls.n	15dc <adc_init+0x3f4>
    15da:	e618      	b.n	120e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    15dc:	6a32      	ldr	r2, [r6, #32]
    15de:	4462      	add	r2, ip
    15e0:	490a      	ldr	r1, [pc, #40]	; (160c <adc_init+0x424>)
    15e2:	428a      	cmp	r2, r1
    15e4:	d900      	bls.n	15e8 <adc_init+0x400>
    15e6:	e612      	b.n	120e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    15e8:	4a08      	ldr	r2, [pc, #32]	; (160c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    15ea:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    15ec:	69f1      	ldr	r1, [r6, #28]
    15ee:	4291      	cmp	r1, r2
    15f0:	dd00      	ble.n	15f4 <adc_init+0x40c>
    15f2:	e60c      	b.n	120e <adc_init+0x26>
    15f4:	6a31      	ldr	r1, [r6, #32]
    15f6:	4291      	cmp	r1, r2
    15f8:	dd00      	ble.n	15fc <adc_init+0x414>
    15fa:	e608      	b.n	120e <adc_init+0x26>
    15fc:	e725      	b.n	144a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    15fe:	2017      	movs	r0, #23
    1600:	e605      	b.n	120e <adc_init+0x26>
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00000fff 	.word	0x00000fff
    1608:	000003ff 	.word	0x000003ff
    160c:	0000ffff 	.word	0x0000ffff

00001610 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1610:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1612:	4b2e      	ldr	r3, [pc, #184]	; (16cc <ADC_Handler+0xbc>)
    1614:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    1616:	6823      	ldr	r3, [r4, #0]
    1618:	7e1d      	ldrb	r5, [r3, #24]
    161a:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    161c:	07ea      	lsls	r2, r5, #31
    161e:	d505      	bpl.n	162c <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    1620:	7ee2      	ldrb	r2, [r4, #27]
    1622:	07d2      	lsls	r2, r2, #31
    1624:	d502      	bpl.n	162c <ADC_Handler+0x1c>
    1626:	7ea2      	ldrb	r2, [r4, #26]
    1628:	07d2      	lsls	r2, r2, #31
    162a:	d416      	bmi.n	165a <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    162c:	076b      	lsls	r3, r5, #29
    162e:	d508      	bpl.n	1642 <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1630:	2304      	movs	r3, #4
    1632:	6822      	ldr	r2, [r4, #0]
    1634:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1636:	7ee3      	ldrb	r3, [r4, #27]
    1638:	079b      	lsls	r3, r3, #30
    163a:	d502      	bpl.n	1642 <ADC_Handler+0x32>
    163c:	7ea3      	ldrb	r3, [r4, #26]
    163e:	079b      	lsls	r3, r3, #30
    1640:	d43c      	bmi.n	16bc <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1642:	07ab      	lsls	r3, r5, #30
    1644:	d508      	bpl.n	1658 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1646:	2302      	movs	r3, #2
    1648:	6822      	ldr	r2, [r4, #0]
    164a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    164c:	7ee3      	ldrb	r3, [r4, #27]
    164e:	075b      	lsls	r3, r3, #29
    1650:	d502      	bpl.n	1658 <ADC_Handler+0x48>
    1652:	7ea3      	ldrb	r3, [r4, #26]
    1654:	075b      	lsls	r3, r3, #29
    1656:	d435      	bmi.n	16c4 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    1658:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    165a:	2201      	movs	r2, #1
    165c:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    165e:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1660:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    1662:	b25b      	sxtb	r3, r3
    1664:	2b00      	cmp	r3, #0
    1666:	dbfb      	blt.n	1660 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    1668:	6961      	ldr	r1, [r4, #20]
    166a:	1c8b      	adds	r3, r1, #2
    166c:	6163      	str	r3, [r4, #20]
    166e:	8b53      	ldrh	r3, [r2, #26]
    1670:	b29b      	uxth	r3, r3
    1672:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    1674:	8b23      	ldrh	r3, [r4, #24]
    1676:	3b01      	subs	r3, #1
    1678:	b29b      	uxth	r3, r3
    167a:	8323      	strh	r3, [r4, #24]
    167c:	2b00      	cmp	r3, #0
    167e:	d011      	beq.n	16a4 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    1680:	7f63      	ldrb	r3, [r4, #29]
    1682:	2b00      	cmp	r3, #0
    1684:	d0d2      	beq.n	162c <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1686:	6822      	ldr	r2, [r4, #0]
    1688:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    168a:	b25b      	sxtb	r3, r3
    168c:	2b00      	cmp	r3, #0
    168e:	dbfb      	blt.n	1688 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1690:	7b13      	ldrb	r3, [r2, #12]
    1692:	2102      	movs	r1, #2
    1694:	430b      	orrs	r3, r1
    1696:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1698:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    169a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    169c:	b25b      	sxtb	r3, r3
    169e:	2b00      	cmp	r3, #0
    16a0:	dbfb      	blt.n	169a <ADC_Handler+0x8a>
    16a2:	e7c3      	b.n	162c <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    16a4:	7f23      	ldrb	r3, [r4, #28]
    16a6:	2b05      	cmp	r3, #5
    16a8:	d1c0      	bne.n	162c <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    16aa:	2300      	movs	r3, #0
    16ac:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    16ae:	3301      	adds	r3, #1
    16b0:	6822      	ldr	r2, [r4, #0]
    16b2:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    16b4:	0020      	movs	r0, r4
    16b6:	68a3      	ldr	r3, [r4, #8]
    16b8:	4798      	blx	r3
    16ba:	e7b7      	b.n	162c <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    16bc:	0020      	movs	r0, r4
    16be:	68e3      	ldr	r3, [r4, #12]
    16c0:	4798      	blx	r3
    16c2:	e7be      	b.n	1642 <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    16c4:	6923      	ldr	r3, [r4, #16]
    16c6:	0020      	movs	r0, r4
    16c8:	4798      	blx	r3
}
    16ca:	e7c5      	b.n	1658 <ADC_Handler+0x48>
    16cc:	20000300 	.word	0x20000300

000016d0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    16d0:	4a04      	ldr	r2, [pc, #16]	; (16e4 <_extint_enable+0x14>)
    16d2:	7813      	ldrb	r3, [r2, #0]
    16d4:	2102      	movs	r1, #2
    16d6:	430b      	orrs	r3, r1
    16d8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    16da:	7853      	ldrb	r3, [r2, #1]
    16dc:	b25b      	sxtb	r3, r3
    16de:	2b00      	cmp	r3, #0
    16e0:	dbfb      	blt.n	16da <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    16e2:	4770      	bx	lr
    16e4:	40001800 	.word	0x40001800

000016e8 <_system_extint_init>:
{
    16e8:	b500      	push	{lr}
    16ea:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    16ec:	4a12      	ldr	r2, [pc, #72]	; (1738 <_system_extint_init+0x50>)
    16ee:	6993      	ldr	r3, [r2, #24]
    16f0:	2140      	movs	r1, #64	; 0x40
    16f2:	430b      	orrs	r3, r1
    16f4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    16f6:	a901      	add	r1, sp, #4
    16f8:	2300      	movs	r3, #0
    16fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    16fc:	2005      	movs	r0, #5
    16fe:	4b0f      	ldr	r3, [pc, #60]	; (173c <_system_extint_init+0x54>)
    1700:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1702:	2005      	movs	r0, #5
    1704:	4b0e      	ldr	r3, [pc, #56]	; (1740 <_system_extint_init+0x58>)
    1706:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1708:	4a0e      	ldr	r2, [pc, #56]	; (1744 <_system_extint_init+0x5c>)
    170a:	7813      	ldrb	r3, [r2, #0]
    170c:	2101      	movs	r1, #1
    170e:	430b      	orrs	r3, r1
    1710:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1712:	7853      	ldrb	r3, [r2, #1]
    1714:	b25b      	sxtb	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	dbfb      	blt.n	1712 <_system_extint_init+0x2a>
    171a:	4b0b      	ldr	r3, [pc, #44]	; (1748 <_system_extint_init+0x60>)
    171c:	0019      	movs	r1, r3
    171e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1720:	2200      	movs	r2, #0
    1722:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1724:	4299      	cmp	r1, r3
    1726:	d1fc      	bne.n	1722 <_system_extint_init+0x3a>
    1728:	2210      	movs	r2, #16
    172a:	4b08      	ldr	r3, [pc, #32]	; (174c <_system_extint_init+0x64>)
    172c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    172e:	4b08      	ldr	r3, [pc, #32]	; (1750 <_system_extint_init+0x68>)
    1730:	4798      	blx	r3
}
    1732:	b003      	add	sp, #12
    1734:	bd00      	pop	{pc}
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	40000400 	.word	0x40000400
    173c:	000032f9 	.word	0x000032f9
    1740:	0000326d 	.word	0x0000326d
    1744:	40001800 	.word	0x40001800
    1748:	20000304 	.word	0x20000304
    174c:	e000e100 	.word	0xe000e100
    1750:	000016d1 	.word	0x000016d1

00001754 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1754:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1756:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1758:	2340      	movs	r3, #64	; 0x40
    175a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    175c:	4281      	cmp	r1, r0
    175e:	d202      	bcs.n	1766 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1760:	0018      	movs	r0, r3
    1762:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1764:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1766:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1768:	1c63      	adds	r3, r4, #1
    176a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    176c:	4288      	cmp	r0, r1
    176e:	d9f9      	bls.n	1764 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1770:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1772:	2cff      	cmp	r4, #255	; 0xff
    1774:	d8f4      	bhi.n	1760 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1776:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1778:	2300      	movs	r3, #0
    177a:	e7f1      	b.n	1760 <_sercom_get_sync_baud_val+0xc>

0000177c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    177c:	b510      	push	{r4, lr}
    177e:	b082      	sub	sp, #8
    1780:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1782:	4b0e      	ldr	r3, [pc, #56]	; (17bc <sercom_set_gclk_generator+0x40>)
    1784:	781b      	ldrb	r3, [r3, #0]
    1786:	2b00      	cmp	r3, #0
    1788:	d007      	beq.n	179a <sercom_set_gclk_generator+0x1e>
    178a:	2900      	cmp	r1, #0
    178c:	d105      	bne.n	179a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    178e:	4b0b      	ldr	r3, [pc, #44]	; (17bc <sercom_set_gclk_generator+0x40>)
    1790:	785b      	ldrb	r3, [r3, #1]
    1792:	4283      	cmp	r3, r0
    1794:	d010      	beq.n	17b8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1796:	201d      	movs	r0, #29
    1798:	e00c      	b.n	17b4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    179a:	a901      	add	r1, sp, #4
    179c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    179e:	200d      	movs	r0, #13
    17a0:	4b07      	ldr	r3, [pc, #28]	; (17c0 <sercom_set_gclk_generator+0x44>)
    17a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    17a4:	200d      	movs	r0, #13
    17a6:	4b07      	ldr	r3, [pc, #28]	; (17c4 <sercom_set_gclk_generator+0x48>)
    17a8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <sercom_set_gclk_generator+0x40>)
    17ac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    17ae:	2201      	movs	r2, #1
    17b0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    17b2:	2000      	movs	r0, #0
}
    17b4:	b002      	add	sp, #8
    17b6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    17b8:	2000      	movs	r0, #0
    17ba:	e7fb      	b.n	17b4 <sercom_set_gclk_generator+0x38>
    17bc:	20000094 	.word	0x20000094
    17c0:	000032f9 	.word	0x000032f9
    17c4:	0000326d 	.word	0x0000326d

000017c8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    17c8:	4b20      	ldr	r3, [pc, #128]	; (184c <_sercom_get_default_pad+0x84>)
    17ca:	4298      	cmp	r0, r3
    17cc:	d017      	beq.n	17fe <_sercom_get_default_pad+0x36>
    17ce:	4b20      	ldr	r3, [pc, #128]	; (1850 <_sercom_get_default_pad+0x88>)
    17d0:	4298      	cmp	r0, r3
    17d2:	d024      	beq.n	181e <_sercom_get_default_pad+0x56>
    17d4:	4b1f      	ldr	r3, [pc, #124]	; (1854 <_sercom_get_default_pad+0x8c>)
    17d6:	4298      	cmp	r0, r3
    17d8:	d001      	beq.n	17de <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    17da:	2000      	movs	r0, #0
}
    17dc:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17de:	2901      	cmp	r1, #1
    17e0:	d007      	beq.n	17f2 <_sercom_get_default_pad+0x2a>
    17e2:	2900      	cmp	r1, #0
    17e4:	d02b      	beq.n	183e <_sercom_get_default_pad+0x76>
    17e6:	2902      	cmp	r1, #2
    17e8:	d005      	beq.n	17f6 <_sercom_get_default_pad+0x2e>
    17ea:	2903      	cmp	r1, #3
    17ec:	d005      	beq.n	17fa <_sercom_get_default_pad+0x32>
	return 0;
    17ee:	2000      	movs	r0, #0
    17f0:	e7f4      	b.n	17dc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17f2:	4819      	ldr	r0, [pc, #100]	; (1858 <_sercom_get_default_pad+0x90>)
    17f4:	e7f2      	b.n	17dc <_sercom_get_default_pad+0x14>
    17f6:	4819      	ldr	r0, [pc, #100]	; (185c <_sercom_get_default_pad+0x94>)
    17f8:	e7f0      	b.n	17dc <_sercom_get_default_pad+0x14>
    17fa:	4819      	ldr	r0, [pc, #100]	; (1860 <_sercom_get_default_pad+0x98>)
    17fc:	e7ee      	b.n	17dc <_sercom_get_default_pad+0x14>
    17fe:	2901      	cmp	r1, #1
    1800:	d007      	beq.n	1812 <_sercom_get_default_pad+0x4a>
    1802:	2900      	cmp	r1, #0
    1804:	d01d      	beq.n	1842 <_sercom_get_default_pad+0x7a>
    1806:	2902      	cmp	r1, #2
    1808:	d005      	beq.n	1816 <_sercom_get_default_pad+0x4e>
    180a:	2903      	cmp	r1, #3
    180c:	d005      	beq.n	181a <_sercom_get_default_pad+0x52>
	return 0;
    180e:	2000      	movs	r0, #0
    1810:	e7e4      	b.n	17dc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1812:	4814      	ldr	r0, [pc, #80]	; (1864 <_sercom_get_default_pad+0x9c>)
    1814:	e7e2      	b.n	17dc <_sercom_get_default_pad+0x14>
    1816:	4814      	ldr	r0, [pc, #80]	; (1868 <_sercom_get_default_pad+0xa0>)
    1818:	e7e0      	b.n	17dc <_sercom_get_default_pad+0x14>
    181a:	4814      	ldr	r0, [pc, #80]	; (186c <_sercom_get_default_pad+0xa4>)
    181c:	e7de      	b.n	17dc <_sercom_get_default_pad+0x14>
    181e:	2901      	cmp	r1, #1
    1820:	d007      	beq.n	1832 <_sercom_get_default_pad+0x6a>
    1822:	2900      	cmp	r1, #0
    1824:	d00f      	beq.n	1846 <_sercom_get_default_pad+0x7e>
    1826:	2902      	cmp	r1, #2
    1828:	d005      	beq.n	1836 <_sercom_get_default_pad+0x6e>
    182a:	2903      	cmp	r1, #3
    182c:	d005      	beq.n	183a <_sercom_get_default_pad+0x72>
	return 0;
    182e:	2000      	movs	r0, #0
    1830:	e7d4      	b.n	17dc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1832:	480f      	ldr	r0, [pc, #60]	; (1870 <_sercom_get_default_pad+0xa8>)
    1834:	e7d2      	b.n	17dc <_sercom_get_default_pad+0x14>
    1836:	480f      	ldr	r0, [pc, #60]	; (1874 <_sercom_get_default_pad+0xac>)
    1838:	e7d0      	b.n	17dc <_sercom_get_default_pad+0x14>
    183a:	480f      	ldr	r0, [pc, #60]	; (1878 <_sercom_get_default_pad+0xb0>)
    183c:	e7ce      	b.n	17dc <_sercom_get_default_pad+0x14>
    183e:	480f      	ldr	r0, [pc, #60]	; (187c <_sercom_get_default_pad+0xb4>)
    1840:	e7cc      	b.n	17dc <_sercom_get_default_pad+0x14>
    1842:	480f      	ldr	r0, [pc, #60]	; (1880 <_sercom_get_default_pad+0xb8>)
    1844:	e7ca      	b.n	17dc <_sercom_get_default_pad+0x14>
    1846:	480f      	ldr	r0, [pc, #60]	; (1884 <_sercom_get_default_pad+0xbc>)
    1848:	e7c8      	b.n	17dc <_sercom_get_default_pad+0x14>
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	42000c00 	.word	0x42000c00
    1850:	42001000 	.word	0x42001000
    1854:	42000800 	.word	0x42000800
    1858:	00050003 	.word	0x00050003
    185c:	00060003 	.word	0x00060003
    1860:	00070003 	.word	0x00070003
    1864:	00170002 	.word	0x00170002
    1868:	001e0003 	.word	0x001e0003
    186c:	001f0003 	.word	0x001f0003
    1870:	00170003 	.word	0x00170003
    1874:	00100003 	.word	0x00100003
    1878:	00190003 	.word	0x00190003
    187c:	00040003 	.word	0x00040003
    1880:	00160002 	.word	0x00160002
    1884:	00160003 	.word	0x00160003

00001888 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1888:	b530      	push	{r4, r5, lr}
    188a:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    188c:	aa01      	add	r2, sp, #4
    188e:	4b0b      	ldr	r3, [pc, #44]	; (18bc <_sercom_get_sercom_inst_index+0x34>)
    1890:	cb32      	ldmia	r3!, {r1, r4, r5}
    1892:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1894:	0003      	movs	r3, r0
    1896:	9a01      	ldr	r2, [sp, #4]
    1898:	4282      	cmp	r2, r0
    189a:	d00c      	beq.n	18b6 <_sercom_get_sercom_inst_index+0x2e>
    189c:	9a02      	ldr	r2, [sp, #8]
    189e:	4282      	cmp	r2, r0
    18a0:	d007      	beq.n	18b2 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18a2:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18a4:	9a03      	ldr	r2, [sp, #12]
    18a6:	429a      	cmp	r2, r3
    18a8:	d001      	beq.n	18ae <_sercom_get_sercom_inst_index+0x26>
}
    18aa:	b005      	add	sp, #20
    18ac:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18ae:	3002      	adds	r0, #2
    18b0:	e002      	b.n	18b8 <_sercom_get_sercom_inst_index+0x30>
    18b2:	2001      	movs	r0, #1
    18b4:	e000      	b.n	18b8 <_sercom_get_sercom_inst_index+0x30>
    18b6:	2000      	movs	r0, #0
			return i;
    18b8:	b2c0      	uxtb	r0, r0
    18ba:	e7f6      	b.n	18aa <_sercom_get_sercom_inst_index+0x22>
    18bc:	00003b84 	.word	0x00003b84

000018c0 <update_ORB_LED>:
#include "ORB.h"
#define PORT_CLEAR_REGISTER_ADD     0x41004414UL
#define PORT_SET_REGISTER_ADD		0x41004418UL

void update_ORB_LED(uint8_t r1 ,uint8_t g1 ,uint8_t b1 ,uint8_t r2 ,uint8_t g2 ,uint8_t b2 ,uint8_t l1 , uint8_t l4 )
{
    18c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18c2:	ac06      	add	r4, sp, #24
    18c4:	7827      	ldrb	r7, [r4, #0]
    18c6:	ac07      	add	r4, sp, #28
    18c8:	7826      	ldrb	r6, [r4, #0]
    18ca:	ac08      	add	r4, sp, #32
    18cc:	7825      	ldrb	r5, [r4, #0]
    18ce:	ac09      	add	r4, sp, #36	; 0x24
    18d0:	7824      	ldrb	r4, [r4, #0]
    18d2:	46a4      	mov	ip, r4
	
 	temp_compare_array_2[0] = 255-r1;//Left -- R
    18d4:	43c0      	mvns	r0, r0
    18d6:	b2c0      	uxtb	r0, r0
    18d8:	4c11      	ldr	r4, [pc, #68]	; (1920 <update_ORB_LED+0x60>)
    18da:	7020      	strb	r0, [r4, #0]
 	temp_compare_array_2[1] = 255-g1;//Left  -- G
    18dc:	43c9      	mvns	r1, r1
    18de:	b2c9      	uxtb	r1, r1
    18e0:	7061      	strb	r1, [r4, #1]
 	temp_compare_array_2[2] = 255-b1;//Left  -- B
    18e2:	43d2      	mvns	r2, r2
    18e4:	b2d2      	uxtb	r2, r2
    18e6:	70a2      	strb	r2, [r4, #2]
 	temp_compare_array_2[3] = 255-r2;//Right -- R
    18e8:	43db      	mvns	r3, r3
    18ea:	b2db      	uxtb	r3, r3
    18ec:	70e3      	strb	r3, [r4, #3]
 	temp_compare_array_2[4] = 255-g2;//Right  -- G
    18ee:	43fb      	mvns	r3, r7
    18f0:	b2db      	uxtb	r3, r3
    18f2:	7123      	strb	r3, [r4, #4]
 	temp_compare_array_2[5] = 255-b2;//Right -- B
    18f4:	43f3      	mvns	r3, r6
    18f6:	b2db      	uxtb	r3, r3
    18f8:	7163      	strb	r3, [r4, #5]
	temp_compare_array_2[6] = 255-l1;//led1
    18fa:	43eb      	mvns	r3, r5
    18fc:	b2db      	uxtb	r3, r3
    18fe:	71a3      	strb	r3, [r4, #6]
	if(status_battery == false)
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <update_ORB_LED+0x64>)
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	2b00      	cmp	r3, #0
    1906:	d103      	bne.n	1910 <update_ORB_LED+0x50>
	{
		temp_compare_array_2[7] = 255-l4;//led4 
    1908:	4663      	mov	r3, ip
    190a:	43db      	mvns	r3, r3
    190c:	b2db      	uxtb	r3, r3
    190e:	71e3      	strb	r3, [r4, #7]
	}  
	 
	
	initializing_pin_array();
    1910:	4b05      	ldr	r3, [pc, #20]	; (1928 <update_ORB_LED+0x68>)
    1912:	4798      	blx	r3
	increasing_sort_tag();
    1914:	4b05      	ldr	r3, [pc, #20]	; (192c <update_ORB_LED+0x6c>)
    1916:	4798      	blx	r3
	
	update_compare_array = true;
    1918:	2201      	movs	r2, #1
    191a:	4b05      	ldr	r3, [pc, #20]	; (1930 <update_ORB_LED+0x70>)
    191c:	701a      	strb	r2, [r3, #0]

}
    191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1920:	20000444 	.word	0x20000444
    1924:	2000000e 	.word	0x2000000e
    1928:	00002dbd 	.word	0x00002dbd
    192c:	00002b99 	.word	0x00002b99
    1930:	200001f0 	.word	0x200001f0

00001934 <update_ORB_single>:


void update_ORB_single(uint8_t port_no , uint8_t r , uint8_t g , uint8_t b)
{
    1934:	b510      	push	{r4, lr}
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR			  = PORT_CLEAR_REGISTER_ADD;
	uint32_t B2_RGB = 0x08000000;
	
	if(port_no == '1') //ASCII 1
    1936:	2831      	cmp	r0, #49	; 0x31
    1938:	d009      	beq.n	194e <update_ORB_single+0x1a>
	{
		temp_compare_array_2[0] = 255-r;//Left -- R
		temp_compare_array_2[1] = 255-g;//Left  -- G
		temp_compare_array_2[2] = 255-b;//Left  -- B
	}
	else if(port_no == '2')//ASCII 2
    193a:	2832      	cmp	r0, #50	; 0x32
    193c:	d012      	beq.n	1964 <update_ORB_single+0x30>
	{
		temp_compare_array_2[3] = 255-r;//Right -- R
		temp_compare_array_2[4] = 255-g;//Right  -- G
		temp_compare_array_2[5] = 255-b;//Right -- B
	}
	initializing_pin_array();
    193e:	4b0f      	ldr	r3, [pc, #60]	; (197c <update_ORB_single+0x48>)
    1940:	4798      	blx	r3
	increasing_sort_tag();
    1942:	4b0f      	ldr	r3, [pc, #60]	; (1980 <update_ORB_single+0x4c>)
    1944:	4798      	blx	r3

	update_compare_array = true;
    1946:	2201      	movs	r2, #1
    1948:	4b0e      	ldr	r3, [pc, #56]	; (1984 <update_ORB_single+0x50>)
    194a:	701a      	strb	r2, [r3, #0]
}
    194c:	bd10      	pop	{r4, pc}
		temp_compare_array_2[0] = 255-r;//Left -- R
    194e:	43c9      	mvns	r1, r1
    1950:	b2c9      	uxtb	r1, r1
    1952:	480d      	ldr	r0, [pc, #52]	; (1988 <update_ORB_single+0x54>)
    1954:	7001      	strb	r1, [r0, #0]
		temp_compare_array_2[1] = 255-g;//Left  -- G
    1956:	43d2      	mvns	r2, r2
    1958:	b2d2      	uxtb	r2, r2
    195a:	7042      	strb	r2, [r0, #1]
		temp_compare_array_2[2] = 255-b;//Left  -- B
    195c:	43db      	mvns	r3, r3
    195e:	b2db      	uxtb	r3, r3
    1960:	7083      	strb	r3, [r0, #2]
    1962:	e7ec      	b.n	193e <update_ORB_single+0xa>
		temp_compare_array_2[3] = 255-r;//Right -- R
    1964:	43c9      	mvns	r1, r1
    1966:	b2c9      	uxtb	r1, r1
    1968:	4807      	ldr	r0, [pc, #28]	; (1988 <update_ORB_single+0x54>)
    196a:	70c1      	strb	r1, [r0, #3]
		temp_compare_array_2[4] = 255-g;//Right  -- G
    196c:	43d2      	mvns	r2, r2
    196e:	b2d2      	uxtb	r2, r2
    1970:	7102      	strb	r2, [r0, #4]
		temp_compare_array_2[5] = 255-b;//Right -- B
    1972:	43db      	mvns	r3, r3
    1974:	b2db      	uxtb	r3, r3
    1976:	7143      	strb	r3, [r0, #5]
    1978:	e7e1      	b.n	193e <update_ORB_single+0xa>
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	00002dbd 	.word	0x00002dbd
    1980:	00002b99 	.word	0x00002b99
    1984:	200001f0 	.word	0x200001f0
    1988:	20000444 	.word	0x20000444

0000198c <update_LEDS_single>:

void update_LEDS_single(uint8_t port_no, uint8_t led)
{
    198c:	b510      	push	{r4, lr}
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR           = PORT_CLEAR_REGISTER_ADD;
	uint32_t B2_RGB = 0x08000000;
	if(led == 0xff)
    198e:	29ff      	cmp	r1, #255	; 0xff
    1990:	d00b      	beq.n	19aa <update_LEDS_single+0x1e>
	{
		led = 0xfe;
	}
	switch (port_no)
    1992:	2831      	cmp	r0, #49	; 0x31
    1994:	d00b      	beq.n	19ae <update_LEDS_single+0x22>
    1996:	2832      	cmp	r0, #50	; 0x32
    1998:	d00e      	beq.n	19b8 <update_LEDS_single+0x2c>
			}
			break;
		default:
			break;
	}
	initializing_pin_array();
    199a:	4b0c      	ldr	r3, [pc, #48]	; (19cc <update_LEDS_single+0x40>)
    199c:	4798      	blx	r3
	increasing_sort_tag();
    199e:	4b0c      	ldr	r3, [pc, #48]	; (19d0 <update_LEDS_single+0x44>)
    19a0:	4798      	blx	r3
	update_compare_array = true;
    19a2:	2201      	movs	r2, #1
    19a4:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <update_LEDS_single+0x48>)
    19a6:	701a      	strb	r2, [r3, #0]

}
    19a8:	bd10      	pop	{r4, pc}
		led = 0xfe;
    19aa:	3901      	subs	r1, #1
    19ac:	e7f1      	b.n	1992 <update_LEDS_single+0x6>
			temp_compare_array_2[6] = 255 - led;//Led1
    19ae:	43c9      	mvns	r1, r1
    19b0:	b2c9      	uxtb	r1, r1
    19b2:	4b09      	ldr	r3, [pc, #36]	; (19d8 <update_LEDS_single+0x4c>)
    19b4:	7199      	strb	r1, [r3, #6]
			break;
    19b6:	e7f0      	b.n	199a <update_LEDS_single+0xe>
		    if(status_battery == false)
    19b8:	4b08      	ldr	r3, [pc, #32]	; (19dc <update_LEDS_single+0x50>)
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	2b00      	cmp	r3, #0
    19be:	d1ec      	bne.n	199a <update_LEDS_single+0xe>
				temp_compare_array_2[7] = 255  -led;//Led2
    19c0:	43c9      	mvns	r1, r1
    19c2:	b2c9      	uxtb	r1, r1
    19c4:	4b04      	ldr	r3, [pc, #16]	; (19d8 <update_LEDS_single+0x4c>)
    19c6:	71d9      	strb	r1, [r3, #7]
    19c8:	e7e7      	b.n	199a <update_LEDS_single+0xe>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	00002dbd 	.word	0x00002dbd
    19d0:	00002b99 	.word	0x00002b99
    19d4:	200001f0 	.word	0x200001f0
    19d8:	20000444 	.word	0x20000444
    19dc:	2000000e 	.word	0x2000000e

000019e0 <switch_off_ORB_LED>:


void switch_off_ORB_LED()
{
    19e0:	b510      	push	{r4, lr}
	temp_compare_array_2[0] = 255;//Left  -- R
    19e2:	4b09      	ldr	r3, [pc, #36]	; (1a08 <switch_off_ORB_LED+0x28>)
    19e4:	22ff      	movs	r2, #255	; 0xff
    19e6:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    19e8:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    19ea:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 255;//Right -- R
    19ec:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right -- G
    19ee:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    19f0:	715a      	strb	r2, [r3, #5]
	temp_compare_array_2[6] = 255;//Led1
    19f2:	719a      	strb	r2, [r3, #6]
	temp_compare_array_2[7] = 255;//Led4
    19f4:	71da      	strb	r2, [r3, #7]
	initializing_pin_array();
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <switch_off_ORB_LED+0x2c>)
    19f8:	4798      	blx	r3
	increasing_sort_tag();
    19fa:	4b05      	ldr	r3, [pc, #20]	; (1a10 <switch_off_ORB_LED+0x30>)
    19fc:	4798      	blx	r3
	update_compare_array = true;
    19fe:	2201      	movs	r2, #1
    1a00:	4b04      	ldr	r3, [pc, #16]	; (1a14 <switch_off_ORB_LED+0x34>)
    1a02:	701a      	strb	r2, [r3, #0]
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	20000444 	.word	0x20000444
    1a0c:	00002dbd 	.word	0x00002dbd
    1a10:	00002b99 	.word	0x00002b99
    1a14:	200001f0 	.word	0x200001f0

00001a18 <filter_volatge_monitor>:
	output_single_adc = adc_start_read_result(sensor_analog_inputs[sensor_no]);
	return output_single_adc;
}

uint8_t filter_volatge_monitor(uint8_t sensor_input)
{
    1a18:	b570      	push	{r4, r5, r6, lr}
    1a1a:	0004      	movs	r4, r0
	uint8_t sensor_output = 0;
	static uint8_t sensor_output_inf_filter = 0;
	static uint8_t init = false; 
	static uint8_t out_range = 0;
	if(init == false)
    1a1c:	4b1b      	ldr	r3, [pc, #108]	; (1a8c <filter_volatge_monitor+0x74>)
    1a1e:	781b      	ldrb	r3, [r3, #0]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d104      	bne.n	1a2e <filter_volatge_monitor+0x16>
	{
		init = true;
    1a24:	2201      	movs	r2, #1
    1a26:	4b19      	ldr	r3, [pc, #100]	; (1a8c <filter_volatge_monitor+0x74>)
    1a28:	701a      	strb	r2, [r3, #0]
		sensor_output_inf_filter = sensor_input;
    1a2a:	4b19      	ldr	r3, [pc, #100]	; (1a90 <filter_volatge_monitor+0x78>)
    1a2c:	7018      	strb	r0, [r3, #0]
	}
	sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a2e:	4e18      	ldr	r6, [pc, #96]	; (1a90 <filter_volatge_monitor+0x78>)
    1a30:	7833      	ldrb	r3, [r6, #0]
    1a32:	00d8      	lsls	r0, r3, #3
    1a34:	18c0      	adds	r0, r0, r3
    1a36:	1900      	adds	r0, r0, r4
    1a38:	210a      	movs	r1, #10
    1a3a:	4b16      	ldr	r3, [pc, #88]	; (1a94 <filter_volatge_monitor+0x7c>)
    1a3c:	4798      	blx	r3
    1a3e:	7030      	strb	r0, [r6, #0]
    1a40:	23ff      	movs	r3, #255	; 0xff
    1a42:	4018      	ands	r0, r3
	
	if((sensor_input < (sensor_output_inf_filter + THRESHOLD_NOISE)) && (sensor_input > (sensor_output_inf_filter - THRESHOLD_NOISE)))
    1a44:	1d43      	adds	r3, r0, #5
    1a46:	429c      	cmp	r4, r3
    1a48:	da02      	bge.n	1a50 <filter_volatge_monitor+0x38>
    1a4a:	1f43      	subs	r3, r0, #5
    1a4c:	429c      	cmp	r4, r3
    1a4e:	dc09      	bgt.n	1a64 <filter_volatge_monitor+0x4c>
		sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
		out_range = 0;
	}
	else
	{
		out_range++;
    1a50:	4a11      	ldr	r2, [pc, #68]	; (1a98 <filter_volatge_monitor+0x80>)
    1a52:	7813      	ldrb	r3, [r2, #0]
    1a54:	3301      	adds	r3, #1
    1a56:	b2db      	uxtb	r3, r3
    1a58:	7013      	strb	r3, [r2, #0]
		if(out_range == THRESHOLD_OUT_RANGE)
    1a5a:	2b03      	cmp	r3, #3
    1a5c:	d00d      	beq.n	1a7a <filter_volatge_monitor+0x62>
			sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
		}
	}
	
	sensor_output   = sensor_output_inf_filter;
	return sensor_output;
    1a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <filter_volatge_monitor+0x78>)
    1a60:	7818      	ldrb	r0, [r3, #0]
}
    1a62:	bd70      	pop	{r4, r5, r6, pc}
		sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a64:	00c3      	lsls	r3, r0, #3
    1a66:	1818      	adds	r0, r3, r0
    1a68:	1900      	adds	r0, r0, r4
    1a6a:	210a      	movs	r1, #10
    1a6c:	4b09      	ldr	r3, [pc, #36]	; (1a94 <filter_volatge_monitor+0x7c>)
    1a6e:	4798      	blx	r3
    1a70:	7030      	strb	r0, [r6, #0]
		out_range = 0;
    1a72:	2200      	movs	r2, #0
    1a74:	4b08      	ldr	r3, [pc, #32]	; (1a98 <filter_volatge_monitor+0x80>)
    1a76:	701a      	strb	r2, [r3, #0]
    1a78:	e7f1      	b.n	1a5e <filter_volatge_monitor+0x46>
			sensor_output_inf_filter = (9*sensor_output_inf_filter + sensor_input)/10;
    1a7a:	00c3      	lsls	r3, r0, #3
    1a7c:	1818      	adds	r0, r3, r0
    1a7e:	1900      	adds	r0, r0, r4
    1a80:	210a      	movs	r1, #10
    1a82:	4b04      	ldr	r3, [pc, #16]	; (1a94 <filter_volatge_monitor+0x7c>)
    1a84:	4798      	blx	r3
    1a86:	4b02      	ldr	r3, [pc, #8]	; (1a90 <filter_volatge_monitor+0x78>)
    1a88:	7018      	strb	r0, [r3, #0]
    1a8a:	e7e8      	b.n	1a5e <filter_volatge_monitor+0x46>
    1a8c:	20000097 	.word	0x20000097
    1a90:	2000009d 	.word	0x2000009d
    1a94:	000036f5 	.word	0x000036f5
    1a98:	20000099 	.word	0x20000099

00001a9c <read_all_sensors>:

void read_all_sensors()
{
    1a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9e:	b083      	sub	sp, #12
    1aa0:	2400      	movs	r4, #0
	
	uint8_t i = 0;
	
	for(i= 0; i< NO_SENSORS; i++)
	{
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    1aa2:	4e2d      	ldr	r6, [pc, #180]	; (1b58 <read_all_sensors+0xbc>)
    1aa4:	4f2d      	ldr	r7, [pc, #180]	; (1b5c <read_all_sensors+0xc0>)
    1aa6:	e02a      	b.n	1afe <read_all_sensors+0x62>
		if(i==BATTERY_MONITOR_SENSOR_VALUE)
		{
			//total_sum += filter_volatge_monitor(temp_sensor_outputs[i]);
			max_value = filter_volatge_monitor(temp_sensor_outputs[i]);
    1aa8:	4b2d      	ldr	r3, [pc, #180]	; (1b60 <read_all_sensors+0xc4>)
    1aaa:	4798      	blx	r3
			if(overall_max_value <= max_value)
    1aac:	4b2d      	ldr	r3, [pc, #180]	; (1b64 <read_all_sensors+0xc8>)
    1aae:	781b      	ldrb	r3, [r3, #0]
    1ab0:	4298      	cmp	r0, r3
    1ab2:	d304      	bcc.n	1abe <read_all_sensors+0x22>
			{
				if(overall_max_value == max_value)
    1ab4:	d11a      	bne.n	1aec <read_all_sensors+0x50>
				{
					count_max_value++;
    1ab6:	4a2c      	ldr	r2, [pc, #176]	; (1b68 <read_all_sensors+0xcc>)
    1ab8:	7813      	ldrb	r3, [r2, #0]
    1aba:	3301      	adds	r3, #1
    1abc:	7013      	strb	r3, [r2, #0]
					count_max_value = 0;
					overall_max_value = max_value;
				}
			}
			
			if(init == false)
    1abe:	4b2b      	ldr	r3, [pc, #172]	; (1b6c <read_all_sensors+0xd0>)
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d003      	beq.n	1ace <read_all_sensors+0x32>
			{
				temp_sensor_outputs[i] = temp_sensor_outputs[i] ;
			}
			else
			{
				temp_sensor_outputs[i] = battery_voltage ;
    1ac6:	4b2a      	ldr	r3, [pc, #168]	; (1b70 <read_all_sensors+0xd4>)
    1ac8:	781a      	ldrb	r2, [r3, #0]
    1aca:	ab01      	add	r3, sp, #4
    1acc:	70da      	strb	r2, [r3, #3]
			}				
		}
		if(firmware_check == false)
    1ace:	4b29      	ldr	r3, [pc, #164]	; (1b74 <read_all_sensors+0xd8>)
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d020      	beq.n	1b18 <read_all_sensors+0x7c>
		{
			sensor_outputs[i]      = temp_sensor_outputs[i] ;
		}
		
	}
	test_count++;
    1ad6:	4a28      	ldr	r2, [pc, #160]	; (1b78 <read_all_sensors+0xdc>)
    1ad8:	8813      	ldrh	r3, [r2, #0]
    1ada:	3301      	adds	r3, #1
    1adc:	b29b      	uxth	r3, r3
    1ade:	8013      	strh	r3, [r2, #0]
	if(test_count == 1000)
    1ae0:	22fa      	movs	r2, #250	; 0xfa
    1ae2:	0092      	lsls	r2, r2, #2
    1ae4:	4293      	cmp	r3, r2
    1ae6:	d01c      	beq.n	1b22 <read_all_sensors+0x86>
			overall_count = 0;
		}
		
	}
	
}
    1ae8:	b003      	add	sp, #12
    1aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
					count_max_value = 0;
    1aec:	2200      	movs	r2, #0
    1aee:	4b1e      	ldr	r3, [pc, #120]	; (1b68 <read_all_sensors+0xcc>)
    1af0:	701a      	strb	r2, [r3, #0]
					overall_max_value = max_value;
    1af2:	4b1c      	ldr	r3, [pc, #112]	; (1b64 <read_all_sensors+0xc8>)
    1af4:	7018      	strb	r0, [r3, #0]
    1af6:	e7e2      	b.n	1abe <read_all_sensors+0x22>
    1af8:	3401      	adds	r4, #1
	for(i= 0; i< NO_SENSORS; i++)
    1afa:	2c04      	cmp	r4, #4
    1afc:	d0eb      	beq.n	1ad6 <read_all_sensors+0x3a>
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    1afe:	0025      	movs	r5, r4
    1b00:	5da0      	ldrb	r0, [r4, r6]
    1b02:	47b8      	blx	r7
    1b04:	b2c0      	uxtb	r0, r0
    1b06:	ab01      	add	r3, sp, #4
    1b08:	54e0      	strb	r0, [r4, r3]
		if(i==BATTERY_MONITOR_SENSOR_VALUE)
    1b0a:	b2e3      	uxtb	r3, r4
    1b0c:	2b03      	cmp	r3, #3
    1b0e:	d0cb      	beq.n	1aa8 <read_all_sensors+0xc>
		if(firmware_check == false)
    1b10:	4b18      	ldr	r3, [pc, #96]	; (1b74 <read_all_sensors+0xd8>)
    1b12:	781b      	ldrb	r3, [r3, #0]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d1ef      	bne.n	1af8 <read_all_sensors+0x5c>
			sensor_outputs[i]      = temp_sensor_outputs[i] ;
    1b18:	ab01      	add	r3, sp, #4
    1b1a:	5ce3      	ldrb	r3, [r4, r3]
    1b1c:	4a17      	ldr	r2, [pc, #92]	; (1b7c <read_all_sensors+0xe0>)
    1b1e:	5553      	strb	r3, [r2, r5]
    1b20:	e7ea      	b.n	1af8 <read_all_sensors+0x5c>
		init			=	true ;
    1b22:	2201      	movs	r2, #1
    1b24:	4b11      	ldr	r3, [pc, #68]	; (1b6c <read_all_sensors+0xd0>)
    1b26:	701a      	strb	r2, [r3, #0]
		battery_voltage = overall_max_value;
    1b28:	4b0e      	ldr	r3, [pc, #56]	; (1b64 <read_all_sensors+0xc8>)
    1b2a:	7819      	ldrb	r1, [r3, #0]
    1b2c:	4a10      	ldr	r2, [pc, #64]	; (1b70 <read_all_sensors+0xd4>)
    1b2e:	7011      	strb	r1, [r2, #0]
		test_count		=	0;
    1b30:	2000      	movs	r0, #0
    1b32:	4911      	ldr	r1, [pc, #68]	; (1b78 <read_all_sensors+0xdc>)
    1b34:	8008      	strh	r0, [r1, #0]
		overall_max_value = 0;
    1b36:	2100      	movs	r1, #0
    1b38:	7019      	strb	r1, [r3, #0]
		overall_count++ ;
    1b3a:	4911      	ldr	r1, [pc, #68]	; (1b80 <read_all_sensors+0xe4>)
    1b3c:	880b      	ldrh	r3, [r1, #0]
    1b3e:	3301      	adds	r3, #1
    1b40:	b29b      	uxth	r3, r3
    1b42:	800b      	strh	r3, [r1, #0]
		sensor_output_temp[overall_count]  = battery_voltage;
    1b44:	7812      	ldrb	r2, [r2, #0]
    1b46:	b2d2      	uxtb	r2, r2
    1b48:	490e      	ldr	r1, [pc, #56]	; (1b84 <read_all_sensors+0xe8>)
    1b4a:	54ca      	strb	r2, [r1, r3]
		if(overall_count == 200)
    1b4c:	2bc8      	cmp	r3, #200	; 0xc8
    1b4e:	d1cb      	bne.n	1ae8 <read_all_sensors+0x4c>
			overall_count = 0;
    1b50:	2200      	movs	r2, #0
    1b52:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <read_all_sensors+0xe4>)
    1b54:	801a      	strh	r2, [r3, #0]
}
    1b56:	e7c7      	b.n	1ae8 <read_all_sensors+0x4c>
    1b58:	00003b90 	.word	0x00003b90
    1b5c:	00001c15 	.word	0x00001c15
    1b60:	00001a19 	.word	0x00001a19
    1b64:	2000009c 	.word	0x2000009c
    1b68:	20000096 	.word	0x20000096
    1b6c:	20000098 	.word	0x20000098
    1b70:	200001e8 	.word	0x200001e8
    1b74:	200001e9 	.word	0x200001e9
    1b78:	2000019a 	.word	0x2000019a
    1b7c:	200003f0 	.word	0x200003f0
    1b80:	2000009a 	.word	0x2000009a
    1b84:	200000a0 	.word	0x200000a0

00001b88 <configure_adc>:
struct adc_module adc_instance;
uint16_t* adc_result = NULL;


void configure_adc()
{
    1b88:	b510      	push	{r4, lr}
    1b8a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1b8c:	4668      	mov	r0, sp
    1b8e:	4b1a      	ldr	r3, [pc, #104]	; (1bf8 <configure_adc+0x70>)
    1b90:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    1b92:	2002      	movs	r0, #2
    1b94:	4b19      	ldr	r3, [pc, #100]	; (1bfc <configure_adc+0x74>)
    1b96:	4798      	blx	r3
    1b98:	4b19      	ldr	r3, [pc, #100]	; (1c00 <configure_adc+0x78>)
    1b9a:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1b9c:	2301      	movs	r3, #1
    1b9e:	466a      	mov	r2, sp
    1ba0:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV16;
    1ba2:	2280      	movs	r2, #128	; 0x80
    1ba4:	0092      	lsls	r2, r2, #2
    1ba6:	4669      	mov	r1, sp
    1ba8:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1baa:	3afb      	subs	r2, #251	; 0xfb
    1bac:	3aff      	subs	r2, #255	; 0xff
    1bae:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1bb0:	22c0      	movs	r2, #192	; 0xc0
    1bb2:	0152      	lsls	r2, r2, #5
    1bb4:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    1bb6:	2230      	movs	r2, #48	; 0x30
    1bb8:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    1bba:	466a      	mov	r2, sp
    1bbc:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    1bbe:	4c11      	ldr	r4, [pc, #68]	; (1c04 <configure_adc+0x7c>)
    1bc0:	4911      	ldr	r1, [pc, #68]	; (1c08 <configure_adc+0x80>)
    1bc2:	0020      	movs	r0, r4
    1bc4:	4b11      	ldr	r3, [pc, #68]	; (1c0c <configure_adc+0x84>)
    1bc6:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1bc8:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bca:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1bcc:	b25b      	sxtb	r3, r3
    1bce:	2b00      	cmp	r3, #0
    1bd0:	dbfb      	blt.n	1bca <configure_adc+0x42>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bd2:	2180      	movs	r1, #128	; 0x80
    1bd4:	0209      	lsls	r1, r1, #8
    1bd6:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <configure_adc+0x88>)
    1bd8:	6019      	str	r1, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1bda:	230f      	movs	r3, #15
    1bdc:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1bde:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1be0:	7813      	ldrb	r3, [r2, #0]
    1be2:	2102      	movs	r1, #2
    1be4:	430b      	orrs	r3, r1
    1be6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1be8:	4b06      	ldr	r3, [pc, #24]	; (1c04 <configure_adc+0x7c>)
    1bea:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1bec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1bee:	b25b      	sxtb	r3, r3
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	dbfb      	blt.n	1bec <configure_adc+0x64>
	adc_enable(&adc_instance);
}
    1bf4:	b00c      	add	sp, #48	; 0x30
    1bf6:	bd10      	pop	{r4, pc}
    1bf8:	000011a1 	.word	0x000011a1
    1bfc:	00003915 	.word	0x00003915
    1c00:	2000019c 	.word	0x2000019c
    1c04:	20000344 	.word	0x20000344
    1c08:	42002000 	.word	0x42002000
    1c0c:	000011e9 	.word	0x000011e9
    1c10:	e000e100 	.word	0xe000e100

00001c14 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    1c14:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1c16:	4b2d      	ldr	r3, [pc, #180]	; (1ccc <adc_start_read_result+0xb8>)
    1c18:	6819      	ldr	r1, [r3, #0]
    1c1a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    1c1c:	b25b      	sxtb	r3, r3
    1c1e:	2b00      	cmp	r3, #0
    1c20:	dbfb      	blt.n	1c1a <adc_start_read_result+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1c22:	690b      	ldr	r3, [r1, #16]
    1c24:	221f      	movs	r2, #31
    1c26:	4393      	bics	r3, r2
    1c28:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1c2a:	6108      	str	r0, [r1, #16]
    1c2c:	7e4b      	ldrb	r3, [r1, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    1c2e:	b25b      	sxtb	r3, r3
    1c30:	2b00      	cmp	r3, #0
    1c32:	dbfb      	blt.n	1c2c <adc_start_read_result+0x18>
    1c34:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c36:	b25b      	sxtb	r3, r3
    1c38:	2b00      	cmp	r3, #0
    1c3a:	dbfb      	blt.n	1c34 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1c3c:	7b0b      	ldrb	r3, [r1, #12]
    1c3e:	2202      	movs	r2, #2
    1c40:	4313      	orrs	r3, r2
    1c42:	730b      	strb	r3, [r1, #12]
    1c44:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c46:	b25b      	sxtb	r3, r3
    1c48:	2b00      	cmp	r3, #0
    1c4a:	dbfb      	blt.n	1c44 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c4c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c4e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1c50:	2402      	movs	r4, #2
    1c52:	e001      	b.n	1c58 <adc_start_read_result+0x44>
	
	uint16_t temp = 0;
	
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1c54:	4210      	tst	r0, r2
    1c56:	d10a      	bne.n	1c6e <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1c58:	7e0b      	ldrb	r3, [r1, #24]
    1c5a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c5c:	0002      	movs	r2, r0
    1c5e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c60:	421d      	tst	r5, r3
    1c62:	d000      	beq.n	1c66 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1c64:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1c66:	421c      	tst	r4, r3
    1c68:	d0f4      	beq.n	1c54 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    1c6a:	432a      	orrs	r2, r5
    1c6c:	e7f2      	b.n	1c54 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1c6e:	7e0a      	ldrb	r2, [r1, #24]
    1c70:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1c72:	2301      	movs	r3, #1
    1c74:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1c76:	0750      	lsls	r0, r2, #29
    1c78:	d501      	bpl.n	1c7e <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    1c7a:	2002      	movs	r0, #2
    1c7c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1c7e:	0792      	lsls	r2, r2, #30
    1c80:	d501      	bpl.n	1c86 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    1c82:	2204      	movs	r2, #4
    1c84:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1c86:	07db      	lsls	r3, r3, #31
    1c88:	d403      	bmi.n	1c92 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1c8a:	4b11      	ldr	r3, [pc, #68]	; (1cd0 <adc_start_read_result+0xbc>)
    1c8c:	681b      	ldr	r3, [r3, #0]

 	return temp;
    1c8e:	8818      	ldrh	r0, [r3, #0]
}
    1c90:	bd30      	pop	{r4, r5, pc}
    1c92:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c94:	b25b      	sxtb	r3, r3
    1c96:	2b00      	cmp	r3, #0
    1c98:	dbfb      	blt.n	1c92 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    1c9a:	4b0d      	ldr	r3, [pc, #52]	; (1cd0 <adc_start_read_result+0xbc>)
    1c9c:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1c9e:	8b4a      	ldrh	r2, [r1, #26]
    1ca0:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1ca2:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <adc_start_read_result+0xb8>)
    1ca4:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1ca6:	2301      	movs	r3, #1
    1ca8:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1caa:	7e0a      	ldrb	r2, [r1, #24]
    1cac:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1cae:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1cb0:	0750      	lsls	r0, r2, #29
    1cb2:	d501      	bpl.n	1cb8 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    1cb4:	2002      	movs	r0, #2
    1cb6:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1cb8:	0792      	lsls	r2, r2, #30
    1cba:	d501      	bpl.n	1cc0 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    1cbc:	2204      	movs	r2, #4
    1cbe:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1cc0:	075b      	lsls	r3, r3, #29
    1cc2:	d5e2      	bpl.n	1c8a <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    1cc4:	2302      	movs	r3, #2
    1cc6:	760b      	strb	r3, [r1, #24]
    1cc8:	e7df      	b.n	1c8a <adc_start_read_result+0x76>
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	20000344 	.word	0x20000344
    1cd0:	2000019c 	.word	0x2000019c

00001cd4 <sensor_init>:
	port_pin_set_config(SENSOR3, &config_port_pin);
	
}

void sensor_init()
{
    1cd4:	b510      	push	{r4, lr}
	//Enable Analog input 
	//Pull ADC inputs low
	configure_adc();
    1cd6:	4b01      	ldr	r3, [pc, #4]	; (1cdc <sensor_init+0x8>)
    1cd8:	4798      	blx	r3
    1cda:	bd10      	pop	{r4, pc}
    1cdc:	00001b89 	.word	0x00001b89

00001ce0 <enable_super_servo>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1ce0:	4b05      	ldr	r3, [pc, #20]	; (1cf8 <enable_super_servo+0x18>)
    1ce2:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1ce4:	2102      	movs	r1, #2
    1ce6:	6893      	ldr	r3, [r2, #8]
    1ce8:	4219      	tst	r1, r3
    1cea:	d1fc      	bne.n	1ce6 <enable_super_servo+0x6>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1cec:	6813      	ldr	r3, [r2, #0]
    1cee:	2102      	movs	r1, #2
    1cf0:	430b      	orrs	r3, r1
    1cf2:	6013      	str	r3, [r2, #0]
struct tcc_module tcc_ss_instance0;

void enable_super_servo()
{
	tcc_enable(&tcc_ss_instance0);
}
    1cf4:	4770      	bx	lr
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	20000364 	.word	0x20000364

00001cfc <super_servo_tcc_init>:
{
	tcc_disable(&tcc_ss_instance0);
}

void super_servo_tcc_init()
{
    1cfc:	b530      	push	{r4, r5, lr}
    1cfe:	b0ab      	sub	sp, #172	; 0xac
	struct tcc_config config_tcc_ss;
	tcc_get_config_defaults(&config_tcc_ss, TCC0);
    1d00:	4d1a      	ldr	r5, [pc, #104]	; (1d6c <super_servo_tcc_init+0x70>)
    1d02:	ac01      	add	r4, sp, #4
    1d04:	0029      	movs	r1, r5
    1d06:	0020      	movs	r0, r4
    1d08:	4b19      	ldr	r3, [pc, #100]	; (1d70 <super_servo_tcc_init+0x74>)
    1d0a:	4798      	blx	r3
	
	
	config_tcc_ss.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
    1d0c:	2302      	movs	r3, #2
    1d0e:	72e3      	strb	r3, [r4, #11]
	config_tcc_ss.counter.period = 0x9C40;
    1d10:	4a18      	ldr	r2, [pc, #96]	; (1d74 <super_servo_tcc_init+0x78>)
    1d12:	6062      	str	r2, [r4, #4]
	config_tcc_ss.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1d14:	7623      	strb	r3, [r4, #24]
	
	config_tcc_ss.compare.wave_polarity[SERVO_1_CH] = TCC_WAVE_POLARITY_0;
    1d16:	2300      	movs	r3, #0
    1d18:	7523      	strb	r3, [r4, #20]
	config_tcc_ss.compare.wave_polarity[SERVO_2_CH] = TCC_WAVE_POLARITY_0;
    1d1a:	7563      	strb	r3, [r4, #21]
	config_tcc_ss.compare.wave_polarity[SERVO_3_CH] = TCC_WAVE_POLARITY_0;
    1d1c:	75a3      	strb	r3, [r4, #22]
	config_tcc_ss.compare.wave_polarity[SERVO_4_CH] = TCC_WAVE_POLARITY_0;
    1d1e:	75e3      	strb	r3, [r4, #23]
	
	
	config_tcc_ss.compare.match[SERVO_1_CH] = 0;
    1d20:	61e3      	str	r3, [r4, #28]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_1_WO] = true;
    1d22:	2201      	movs	r2, #1
    1d24:	2198      	movs	r1, #152	; 0x98
    1d26:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_1_WO]        = PIN_PA04F_TCC0_WO0; //this is no longer correct--- should be now
    1d28:	3994      	subs	r1, #148	; 0x94
    1d2a:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_1_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    1d2c:	4912      	ldr	r1, [pc, #72]	; (1d78 <super_servo_tcc_init+0x7c>)
    1d2e:	67a1      	str	r1, [r4, #120]	; 0x78
	
	
	config_tcc_ss.compare.match[SERVO_2_CH] = 0;
    1d30:	6223      	str	r3, [r4, #32]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_2_WO] = true;
    1d32:	2199      	movs	r1, #153	; 0x99
    1d34:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_2_WO]        = PIN_PA05F_TCC0_WO1; //this is no longer correct--- should be now
    1d36:	3994      	subs	r1, #148	; 0x94
    1d38:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_2_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    1d3a:	4910      	ldr	r1, [pc, #64]	; (1d7c <super_servo_tcc_init+0x80>)
    1d3c:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	
	config_tcc_ss.compare.match[SERVO_3_CH] = 0;
    1d3e:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_3_WO] = true;
    1d40:	219a      	movs	r1, #154	; 0x9a
    1d42:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_3_WO]        = PIN_PA06F_TCC0_WO2; //this is no longer correct--- should be now
    1d44:	3994      	subs	r1, #148	; 0x94
    1d46:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_3_WO]    = PINMUX_PA06F_TCC0_WO2; // this is no longer correct --- should be now
    1d48:	480d      	ldr	r0, [pc, #52]	; (1d80 <super_servo_tcc_init+0x84>)
    1d4a:	317a      	adds	r1, #122	; 0x7a
    1d4c:	5060      	str	r0, [r4, r1]
	
	
	config_tcc_ss.compare.match[SERVO_4_CH] = 0;
    1d4e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_4_WO] = true;
    1d50:	339b      	adds	r3, #155	; 0x9b
    1d52:	54e2      	strb	r2, [r4, r3]
	config_tcc_ss.pins.wave_out_pin[SERVO_4_WO]        = PIN_PA07F_TCC0_WO3; //this is no longer correct--- should be now
    1d54:	3b94      	subs	r3, #148	; 0x94
    1d56:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_4_WO]    = PINMUX_PA07F_TCC0_WO3; // this is no longer correct --- should be now
    1d58:	4a0a      	ldr	r2, [pc, #40]	; (1d84 <super_servo_tcc_init+0x88>)
    1d5a:	337d      	adds	r3, #125	; 0x7d
    1d5c:	50e2      	str	r2, [r4, r3]
	
	
	tcc_init(&tcc_ss_instance0, TCC0, &config_tcc_ss);
    1d5e:	0022      	movs	r2, r4
    1d60:	0029      	movs	r1, r5
    1d62:	4809      	ldr	r0, [pc, #36]	; (1d88 <super_servo_tcc_init+0x8c>)
    1d64:	4b09      	ldr	r3, [pc, #36]	; (1d8c <super_servo_tcc_init+0x90>)
    1d66:	4798      	blx	r3
	
}
    1d68:	b02b      	add	sp, #172	; 0xac
    1d6a:	bd30      	pop	{r4, r5, pc}
    1d6c:	42001400 	.word	0x42001400
    1d70:	00001f91 	.word	0x00001f91
    1d74:	00009c40 	.word	0x00009c40
    1d78:	00040005 	.word	0x00040005
    1d7c:	00050005 	.word	0x00050005
    1d80:	00060005 	.word	0x00060005
    1d84:	00070005 	.word	0x00070005
    1d88:	20000364 	.word	0x20000364
    1d8c:	000020cd 	.word	0x000020cd

00001d90 <super_servo_init>:

void super_servo_init()
{
    1d90:	b510      	push	{r4, lr}
	super_servo_tcc_init();
    1d92:	4b01      	ldr	r3, [pc, #4]	; (1d98 <super_servo_init+0x8>)
    1d94:	4798      	blx	r3
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	00001cfd 	.word	0x00001cfd

00001d9c <update_super_servo>:
{
	update_super_servo(SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE);
}
#define PORT_CLEAR_REGISTER_ADD     0x41004414UL
#define PORT_SET_REGISTER_ADD		0x41004418UL
void update_super_servo(uint8_t servo1 , uint8_t servo2 , uint8_t servo3, uint8_t servo4)
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	000e      	movs	r6, r1
    1da0:	0015      	movs	r5, r2
    1da2:	001c      	movs	r4, r3
{
	static uint8_t prev_servo1 = 0;
    1da4:	28ff      	cmp	r0, #255	; 0xff
    1da6:	d03a      	beq.n	1e1e <update_super_servo+0x82>
	static uint8_t prev_servo2 = 0;
	static uint8_t prev_servo3 = 0;
    1da8:	23dc      	movs	r3, #220	; 0xdc
    1daa:	011b      	lsls	r3, r3, #4
    1dac:	4358      	muls	r0, r3
    1dae:	21fe      	movs	r1, #254	; 0xfe
    1db0:	4b27      	ldr	r3, [pc, #156]	; (1e50 <update_super_servo+0xb4>)
    1db2:	4798      	blx	r3
    1db4:	23a0      	movs	r3, #160	; 0xa0
    1db6:	00db      	lsls	r3, r3, #3
    1db8:	18c2      	adds	r2, r0, r3
    1dba:	2100      	movs	r1, #0
    1dbc:	4825      	ldr	r0, [pc, #148]	; (1e54 <update_super_servo+0xb8>)
    1dbe:	4b26      	ldr	r3, [pc, #152]	; (1e58 <update_super_servo+0xbc>)
    1dc0:	4798      	blx	r3
	if(servo1  != prev_servo1)
	{
		if(servo1 != 255)
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*servo1)/254) + 1280));
		}
    1dc2:	2eff      	cmp	r6, #255	; 0xff
    1dc4:	d031      	beq.n	1e2a <update_super_servo+0x8e>
		else
		{
    1dc6:	20dc      	movs	r0, #220	; 0xdc
    1dc8:	0100      	lsls	r0, r0, #4
    1dca:	4370      	muls	r0, r6
    1dcc:	21fe      	movs	r1, #254	; 0xfe
    1dce:	4b20      	ldr	r3, [pc, #128]	; (1e50 <update_super_servo+0xb4>)
    1dd0:	4798      	blx	r3
    1dd2:	23a0      	movs	r3, #160	; 0xa0
    1dd4:	00db      	lsls	r3, r3, #3
    1dd6:	18c2      	adds	r2, r0, r3
    1dd8:	2101      	movs	r1, #1
    1dda:	481e      	ldr	r0, [pc, #120]	; (1e54 <update_super_servo+0xb8>)
    1ddc:	4b1e      	ldr	r3, [pc, #120]	; (1e58 <update_super_servo+0xbc>)
    1dde:	4798      	blx	r3
		prev_servo1 = servo1;
	}
	
	//Servo--2
	if(servo2  != prev_servo2)
	{
    1de0:	2dff      	cmp	r5, #255	; 0xff
    1de2:	d028      	beq.n	1e36 <update_super_servo+0x9a>
		if(servo2 != 255)
		{
    1de4:	20dc      	movs	r0, #220	; 0xdc
    1de6:	0100      	lsls	r0, r0, #4
    1de8:	4368      	muls	r0, r5
    1dea:	21fe      	movs	r1, #254	; 0xfe
    1dec:	4b18      	ldr	r3, [pc, #96]	; (1e50 <update_super_servo+0xb4>)
    1dee:	4798      	blx	r3
    1df0:	23a0      	movs	r3, #160	; 0xa0
    1df2:	00db      	lsls	r3, r3, #3
    1df4:	18c2      	adds	r2, r0, r3
    1df6:	2102      	movs	r1, #2
    1df8:	4816      	ldr	r0, [pc, #88]	; (1e54 <update_super_servo+0xb8>)
    1dfa:	4b17      	ldr	r3, [pc, #92]	; (1e58 <update_super_servo+0xbc>)
    1dfc:	4798      	blx	r3
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
		}
		prev_servo2 = servo2;
	}
    1dfe:	2cff      	cmp	r4, #255	; 0xff
    1e00:	d01f      	beq.n	1e42 <update_super_servo+0xa6>
	//Servo--3
	if(servo3  != prev_servo3)
    1e02:	20dc      	movs	r0, #220	; 0xdc
    1e04:	0100      	lsls	r0, r0, #4
    1e06:	4360      	muls	r0, r4
    1e08:	21fe      	movs	r1, #254	; 0xfe
    1e0a:	4b11      	ldr	r3, [pc, #68]	; (1e50 <update_super_servo+0xb4>)
    1e0c:	4798      	blx	r3
    1e0e:	23a0      	movs	r3, #160	; 0xa0
    1e10:	00db      	lsls	r3, r3, #3
    1e12:	18c2      	adds	r2, r0, r3
    1e14:	2103      	movs	r1, #3
    1e16:	480f      	ldr	r0, [pc, #60]	; (1e54 <update_super_servo+0xb8>)
    1e18:	4b0f      	ldr	r3, [pc, #60]	; (1e58 <update_super_servo+0xbc>)
    1e1a:	4798      	blx	r3
		if(servo3 != 255)
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*servo3)/254) + 1280));
		}
		else
		{
    1e1c:	bd70      	pop	{r4, r5, r6, pc}
	if(servo1  != prev_servo1)
    1e1e:	2200      	movs	r2, #0
    1e20:	2100      	movs	r1, #0
    1e22:	480c      	ldr	r0, [pc, #48]	; (1e54 <update_super_servo+0xb8>)
    1e24:	4b0c      	ldr	r3, [pc, #48]	; (1e58 <update_super_servo+0xbc>)
    1e26:	4798      	blx	r3
    1e28:	e7cb      	b.n	1dc2 <update_super_servo+0x26>
	}
    1e2a:	2200      	movs	r2, #0
    1e2c:	2101      	movs	r1, #1
    1e2e:	4809      	ldr	r0, [pc, #36]	; (1e54 <update_super_servo+0xb8>)
    1e30:	4b09      	ldr	r3, [pc, #36]	; (1e58 <update_super_servo+0xbc>)
    1e32:	4798      	blx	r3
    1e34:	e7d4      	b.n	1de0 <update_super_servo+0x44>
		{
    1e36:	2200      	movs	r2, #0
    1e38:	2102      	movs	r1, #2
    1e3a:	4806      	ldr	r0, [pc, #24]	; (1e54 <update_super_servo+0xb8>)
    1e3c:	4b06      	ldr	r3, [pc, #24]	; (1e58 <update_super_servo+0xbc>)
    1e3e:	4798      	blx	r3
    1e40:	e7dd      	b.n	1dfe <update_super_servo+0x62>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*servo3)/254) + 1280));
    1e42:	2200      	movs	r2, #0
    1e44:	2103      	movs	r1, #3
    1e46:	4803      	ldr	r0, [pc, #12]	; (1e54 <update_super_servo+0xb8>)
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <update_super_servo+0xbc>)
    1e4a:	4798      	blx	r3
		{
    1e4c:	e7e6      	b.n	1e1c <update_super_servo+0x80>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	000036f5 	.word	0x000036f5
    1e54:	20000364 	.word	0x20000364
    1e58:	00002455 	.word	0x00002455

00001e5c <switch_off_servos>:
{
    1e5c:	b510      	push	{r4, lr}
	update_super_servo(SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE,SERVO_OFF_VALUE);
    1e5e:	23ff      	movs	r3, #255	; 0xff
    1e60:	22ff      	movs	r2, #255	; 0xff
    1e62:	21ff      	movs	r1, #255	; 0xff
    1e64:	20ff      	movs	r0, #255	; 0xff
    1e66:	4c01      	ldr	r4, [pc, #4]	; (1e6c <switch_off_servos+0x10>)
    1e68:	47a0      	blx	r4
}
    1e6a:	bd10      	pop	{r4, pc}
    1e6c:	00001d9d 	.word	0x00001d9d

00001e70 <update_super_servo_single>:
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
		}
		prev_servo3 = servo3;
    1e70:	b510      	push	{r4, lr}
	}
    1e72:	2832      	cmp	r0, #50	; 0x32
    1e74:	d02c      	beq.n	1ed0 <update_super_servo_single+0x60>
    1e76:	d913      	bls.n	1ea0 <update_super_servo_single+0x30>
    1e78:	2833      	cmp	r0, #51	; 0x33
    1e7a:	d03f      	beq.n	1efc <update_super_servo_single+0x8c>
    1e7c:	2834      	cmp	r0, #52	; 0x34
    1e7e:	d120      	bne.n	1ec2 <update_super_servo_single+0x52>
				else
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
				}
				break;
		case '2':
    1e80:	29ff      	cmp	r1, #255	; 0xff
    1e82:	d051      	beq.n	1f28 <update_super_servo_single+0xb8>
				
				//*PORT_SET           = B2_RGB;
    1e84:	20dc      	movs	r0, #220	; 0xdc
    1e86:	0100      	lsls	r0, r0, #4
    1e88:	4348      	muls	r0, r1
    1e8a:	21fe      	movs	r1, #254	; 0xfe
    1e8c:	4b29      	ldr	r3, [pc, #164]	; (1f34 <update_super_servo_single+0xc4>)
    1e8e:	4798      	blx	r3
    1e90:	23a0      	movs	r3, #160	; 0xa0
    1e92:	00db      	lsls	r3, r3, #3
    1e94:	18c2      	adds	r2, r0, r3
    1e96:	2103      	movs	r1, #3
    1e98:	4827      	ldr	r0, [pc, #156]	; (1f38 <update_super_servo_single+0xc8>)
    1e9a:	4b28      	ldr	r3, [pc, #160]	; (1f3c <update_super_servo_single+0xcc>)
    1e9c:	4798      	blx	r3
    1e9e:	e010      	b.n	1ec2 <update_super_servo_single+0x52>
	}
    1ea0:	2831      	cmp	r0, #49	; 0x31
    1ea2:	d10e      	bne.n	1ec2 <update_super_servo_single+0x52>
	{
    1ea4:	29ff      	cmp	r1, #255	; 0xff
    1ea6:	d00d      	beq.n	1ec4 <update_super_servo_single+0x54>
		{
    1ea8:	20dc      	movs	r0, #220	; 0xdc
    1eaa:	0100      	lsls	r0, r0, #4
    1eac:	4348      	muls	r0, r1
    1eae:	21fe      	movs	r1, #254	; 0xfe
    1eb0:	4b20      	ldr	r3, [pc, #128]	; (1f34 <update_super_servo_single+0xc4>)
    1eb2:	4798      	blx	r3
    1eb4:	23a0      	movs	r3, #160	; 0xa0
    1eb6:	00db      	lsls	r3, r3, #3
    1eb8:	18c2      	adds	r2, r0, r3
    1eba:	2100      	movs	r1, #0
    1ebc:	481e      	ldr	r0, [pc, #120]	; (1f38 <update_super_servo_single+0xc8>)
    1ebe:	4b1f      	ldr	r3, [pc, #124]	; (1f3c <update_super_servo_single+0xcc>)
    1ec0:	4798      	blx	r3
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
				}
				//*PORT_CLEAR_REGISTER            = B2_RGB;
				break;
		case '3':
    1ec2:	bd10      	pop	{r4, pc}
		{
    1ec4:	2200      	movs	r2, #0
    1ec6:	2100      	movs	r1, #0
    1ec8:	481b      	ldr	r0, [pc, #108]	; (1f38 <update_super_servo_single+0xc8>)
    1eca:	4b1c      	ldr	r3, [pc, #112]	; (1f3c <update_super_servo_single+0xcc>)
    1ecc:	4798      	blx	r3
    1ece:	e7f8      	b.n	1ec2 <update_super_servo_single+0x52>
	}
    1ed0:	29ff      	cmp	r1, #255	; 0xff
    1ed2:	d00d      	beq.n	1ef0 <update_super_servo_single+0x80>

    1ed4:	20dc      	movs	r0, #220	; 0xdc
    1ed6:	0100      	lsls	r0, r0, #4
    1ed8:	4348      	muls	r0, r1
    1eda:	21fe      	movs	r1, #254	; 0xfe
    1edc:	4b15      	ldr	r3, [pc, #84]	; (1f34 <update_super_servo_single+0xc4>)
    1ede:	4798      	blx	r3
    1ee0:	23a0      	movs	r3, #160	; 0xa0
    1ee2:	00db      	lsls	r3, r3, #3
    1ee4:	18c2      	adds	r2, r0, r3
    1ee6:	2101      	movs	r1, #1
    1ee8:	4813      	ldr	r0, [pc, #76]	; (1f38 <update_super_servo_single+0xc8>)
    1eea:	4b14      	ldr	r3, [pc, #80]	; (1f3c <update_super_servo_single+0xcc>)
    1eec:	4798      	blx	r3
    1eee:	e7e8      	b.n	1ec2 <update_super_servo_single+0x52>
	uint32_t G2_RGB = 0x00000200;
    1ef0:	2200      	movs	r2, #0
    1ef2:	2101      	movs	r1, #1
    1ef4:	4810      	ldr	r0, [pc, #64]	; (1f38 <update_super_servo_single+0xc8>)
    1ef6:	4b11      	ldr	r3, [pc, #68]	; (1f3c <update_super_servo_single+0xcc>)
    1ef8:	4798      	blx	r3
    1efa:	e7e2      	b.n	1ec2 <update_super_servo_single+0x52>
	{
    1efc:	29ff      	cmp	r1, #255	; 0xff
    1efe:	d00d      	beq.n	1f1c <update_super_servo_single+0xac>
				if(super_servo != 255)
    1f00:	20dc      	movs	r0, #220	; 0xdc
    1f02:	0100      	lsls	r0, r0, #4
    1f04:	4348      	muls	r0, r1
    1f06:	21fe      	movs	r1, #254	; 0xfe
    1f08:	4b0a      	ldr	r3, [pc, #40]	; (1f34 <update_super_servo_single+0xc4>)
    1f0a:	4798      	blx	r3
    1f0c:	23a0      	movs	r3, #160	; 0xa0
    1f0e:	00db      	lsls	r3, r3, #3
    1f10:	18c2      	adds	r2, r0, r3
    1f12:	2102      	movs	r1, #2
    1f14:	4808      	ldr	r0, [pc, #32]	; (1f38 <update_super_servo_single+0xc8>)
    1f16:	4b09      	ldr	r3, [pc, #36]	; (1f3c <update_super_servo_single+0xcc>)
    1f18:	4798      	blx	r3
    1f1a:	e7d2      	b.n	1ec2 <update_super_servo_single+0x52>
				{
    1f1c:	2200      	movs	r2, #0
    1f1e:	2102      	movs	r1, #2
    1f20:	4805      	ldr	r0, [pc, #20]	; (1f38 <update_super_servo_single+0xc8>)
    1f22:	4b06      	ldr	r3, [pc, #24]	; (1f3c <update_super_servo_single+0xcc>)
    1f24:	4798      	blx	r3
    1f26:	e7cc      	b.n	1ec2 <update_super_servo_single+0x52>
				}
    1f28:	2200      	movs	r2, #0
    1f2a:	2103      	movs	r1, #3
    1f2c:	4802      	ldr	r0, [pc, #8]	; (1f38 <update_super_servo_single+0xc8>)
    1f2e:	4b03      	ldr	r3, [pc, #12]	; (1f3c <update_super_servo_single+0xcc>)
    1f30:	4798      	blx	r3
		case '3':
    1f32:	e7c6      	b.n	1ec2 <update_super_servo_single+0x52>
    1f34:	000036f5 	.word	0x000036f5
    1f38:	20000364 	.word	0x20000364
    1f3c:	00002455 	.word	0x00002455

00001f40 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1f40:	2000      	movs	r0, #0
    1f42:	4770      	bx	lr

00001f44 <_tcc_set_compare_value>:

#define PORT_CLEAR_REGISTER_ADD     0x41004414UL
#define PORT_SET_REGISTER_ADD		0x41004418UL
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
    1f44:	b530      	push	{r4, r5, lr}
    1f46:	0004      	movs	r4, r0
	Assert(module_inst->hw);
	uint32_t B2_RGB = 0x08000000;
	uint32_t G2_RGB = 0x00000200;
	volatile uint32_t* const  PORT_SET		      = PORT_SET_REGISTER_ADD;
	volatile uint32_t* const PORT_CLEAR_REGISTER  = PORT_CLEAR_REGISTER_ADD;
	
    1f48:	2017      	movs	r0, #23
	volatile uint32_t* const PORT_CLEAR_REGISTER  = PORT_CLEAR_REGISTER_ADD;
    1f4a:	2903      	cmp	r1, #3
    1f4c:	d900      	bls.n	1f50 <_tcc_set_compare_value+0xc>
		}
		*/
		*PORT_SET            = B2_RGB;
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
    1f4e:	bd30      	pop	{r4, r5, pc}
	/* Check index */
    1f50:	4d0e      	ldr	r5, [pc, #56]	; (1f8c <_tcc_set_compare_value+0x48>)
    1f52:	42aa      	cmp	r2, r5
    1f54:	d8fb      	bhi.n	1f4e <_tcc_set_compare_value+0xa>
	Assert(module_inst);
    1f56:	6820      	ldr	r0, [r4, #0]

    1f58:	2b00      	cmp	r3, #0
    1f5a:	d00a      	beq.n	1f72 <_tcc_set_compare_value+0x2e>
		tcc_module->CCBUF[channel_index].reg = compare;
    1f5c:	2480      	movs	r4, #128	; 0x80
    1f5e:	0324      	lsls	r4, r4, #12
    1f60:	408c      	lsls	r4, r1
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
    1f62:	6883      	ldr	r3, [r0, #8]
    1f64:	421c      	tst	r4, r3
    1f66:	d1fc      	bne.n	1f62 <_tcc_set_compare_value+0x1e>
		/*
    1f68:	311c      	adds	r1, #28
    1f6a:	0089      	lsls	r1, r1, #2
    1f6c:	500a      	str	r2, [r1, r0]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1f6e:	2000      	movs	r0, #0
    1f70:	e7ed      	b.n	1f4e <_tcc_set_compare_value+0xa>
			
    1f72:	2480      	movs	r4, #128	; 0x80
    1f74:	0064      	lsls	r4, r4, #1
    1f76:	408c      	lsls	r4, r1
    1f78:	6883      	ldr	r3, [r0, #8]
    1f7a:	421c      	tst	r4, r3
    1f7c:	d1fc      	bne.n	1f78 <_tcc_set_compare_value+0x34>
		*PORT_SET            = B2_RGB;
    1f7e:	3110      	adds	r1, #16
    1f80:	0089      	lsls	r1, r1, #2
    1f82:	1841      	adds	r1, r0, r1
    1f84:	604a      	str	r2, [r1, #4]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1f86:	2000      	movs	r0, #0
    1f88:	e7e1      	b.n	1f4e <_tcc_set_compare_value+0xa>
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	00ffffff 	.word	0x00ffffff

00001f90 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    1f90:	2300      	movs	r3, #0
    1f92:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    1f94:	4a4c      	ldr	r2, [pc, #304]	; (20c8 <tcc_get_config_defaults+0x138>)
    1f96:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1f98:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1f9a:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1f9c:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1f9e:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1fa0:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1fa2:	61c3      	str	r3, [r0, #28]
    1fa4:	6203      	str	r3, [r0, #32]
    1fa6:	6243      	str	r3, [r0, #36]	; 0x24
    1fa8:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1faa:	7503      	strb	r3, [r0, #20]
    1fac:	7543      	strb	r3, [r0, #21]
    1fae:	7583      	strb	r3, [r0, #22]
    1fb0:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1fb2:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1fb4:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1fb6:	7403      	strb	r3, [r0, #16]
    1fb8:	7443      	strb	r3, [r0, #17]
    1fba:	7483      	strb	r3, [r0, #18]
    1fbc:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1fbe:	222c      	movs	r2, #44	; 0x2c
    1fc0:	5483      	strb	r3, [r0, r2]
    1fc2:	3201      	adds	r2, #1
    1fc4:	5483      	strb	r3, [r0, r2]
    1fc6:	3201      	adds	r2, #1
    1fc8:	5483      	strb	r3, [r0, r2]
    1fca:	3201      	adds	r2, #1
    1fcc:	5483      	strb	r3, [r0, r2]
    1fce:	3201      	adds	r2, #1
    1fd0:	5483      	strb	r3, [r0, r2]
    1fd2:	3201      	adds	r2, #1
    1fd4:	5483      	strb	r3, [r0, r2]
    1fd6:	3201      	adds	r2, #1
    1fd8:	5483      	strb	r3, [r0, r2]
    1fda:	3201      	adds	r2, #1
    1fdc:	5483      	strb	r3, [r0, r2]
    1fde:	3201      	adds	r2, #1
    1fe0:	5483      	strb	r3, [r0, r2]
    1fe2:	3201      	adds	r2, #1
    1fe4:	5483      	strb	r3, [r0, r2]
    1fe6:	3201      	adds	r2, #1
    1fe8:	5483      	strb	r3, [r0, r2]
    1fea:	3201      	adds	r2, #1
    1fec:	5483      	strb	r3, [r0, r2]
    1fee:	3201      	adds	r2, #1
    1ff0:	5483      	strb	r3, [r0, r2]
    1ff2:	3201      	adds	r2, #1
    1ff4:	5483      	strb	r3, [r0, r2]
    1ff6:	3201      	adds	r2, #1
    1ff8:	5483      	strb	r3, [r0, r2]
    1ffa:	3201      	adds	r2, #1
    1ffc:	5483      	strb	r3, [r0, r2]
    1ffe:	3201      	adds	r2, #1
    2000:	5483      	strb	r3, [r0, r2]
    2002:	3201      	adds	r2, #1
    2004:	5483      	strb	r3, [r0, r2]
    2006:	3201      	adds	r2, #1
    2008:	5483      	strb	r3, [r0, r2]
    200a:	3201      	adds	r2, #1
    200c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    200e:	3201      	adds	r2, #1
    2010:	5483      	strb	r3, [r0, r2]
    2012:	3201      	adds	r2, #1
    2014:	5483      	strb	r3, [r0, r2]
    2016:	3201      	adds	r2, #1
    2018:	5483      	strb	r3, [r0, r2]
    201a:	3201      	adds	r2, #1
    201c:	5483      	strb	r3, [r0, r2]
    201e:	3201      	adds	r2, #1
    2020:	5483      	strb	r3, [r0, r2]
    2022:	3201      	adds	r2, #1
    2024:	5483      	strb	r3, [r0, r2]
    2026:	3201      	adds	r2, #1
    2028:	5483      	strb	r3, [r0, r2]
    202a:	3201      	adds	r2, #1
    202c:	5483      	strb	r3, [r0, r2]
    202e:	3201      	adds	r2, #1
    2030:	5483      	strb	r3, [r0, r2]
    2032:	3201      	adds	r2, #1
    2034:	5483      	strb	r3, [r0, r2]
    2036:	3201      	adds	r2, #1
    2038:	5483      	strb	r3, [r0, r2]
    203a:	3201      	adds	r2, #1
    203c:	5483      	strb	r3, [r0, r2]
    203e:	3201      	adds	r2, #1
    2040:	5483      	strb	r3, [r0, r2]
    2042:	3201      	adds	r2, #1
    2044:	5483      	strb	r3, [r0, r2]
    2046:	3201      	adds	r2, #1
    2048:	5483      	strb	r3, [r0, r2]
    204a:	3201      	adds	r2, #1
    204c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    204e:	3201      	adds	r2, #1
    2050:	5483      	strb	r3, [r0, r2]
    2052:	3201      	adds	r2, #1
    2054:	5483      	strb	r3, [r0, r2]
    2056:	3201      	adds	r2, #1
    2058:	5483      	strb	r3, [r0, r2]
    205a:	3201      	adds	r2, #1
    205c:	5483      	strb	r3, [r0, r2]
    205e:	3201      	adds	r2, #1
    2060:	5483      	strb	r3, [r0, r2]
    2062:	3201      	adds	r2, #1
    2064:	5483      	strb	r3, [r0, r2]
    2066:	3201      	adds	r2, #1
    2068:	5483      	strb	r3, [r0, r2]
    206a:	3201      	adds	r2, #1
    206c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    206e:	3241      	adds	r2, #65	; 0x41
    2070:	5483      	strb	r3, [r0, r2]
    2072:	6583      	str	r3, [r0, #88]	; 0x58
    2074:	6783      	str	r3, [r0, #120]	; 0x78
    2076:	3201      	adds	r2, #1
    2078:	5483      	strb	r3, [r0, r2]
    207a:	65c3      	str	r3, [r0, #92]	; 0x5c
    207c:	67c3      	str	r3, [r0, #124]	; 0x7c
    207e:	3201      	adds	r2, #1
    2080:	5483      	strb	r3, [r0, r2]
    2082:	6603      	str	r3, [r0, #96]	; 0x60
    2084:	3a1a      	subs	r2, #26
    2086:	5083      	str	r3, [r0, r2]
    2088:	321b      	adds	r2, #27
    208a:	5483      	strb	r3, [r0, r2]
    208c:	6643      	str	r3, [r0, #100]	; 0x64
    208e:	3a17      	subs	r2, #23
    2090:	5083      	str	r3, [r0, r2]
    2092:	3218      	adds	r2, #24
    2094:	5483      	strb	r3, [r0, r2]
    2096:	6683      	str	r3, [r0, #104]	; 0x68
    2098:	3a14      	subs	r2, #20
    209a:	5083      	str	r3, [r0, r2]
    209c:	3215      	adds	r2, #21
    209e:	5483      	strb	r3, [r0, r2]
    20a0:	66c3      	str	r3, [r0, #108]	; 0x6c
    20a2:	3a11      	subs	r2, #17
    20a4:	5083      	str	r3, [r0, r2]
    20a6:	3212      	adds	r2, #18
    20a8:	5483      	strb	r3, [r0, r2]
    20aa:	6703      	str	r3, [r0, #112]	; 0x70
    20ac:	3a0e      	subs	r2, #14
    20ae:	5083      	str	r3, [r0, r2]
    20b0:	320f      	adds	r2, #15
    20b2:	5483      	strb	r3, [r0, r2]
    20b4:	6743      	str	r3, [r0, #116]	; 0x74
    20b6:	3a0b      	subs	r2, #11
    20b8:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    20ba:	2101      	movs	r1, #1
    20bc:	320c      	adds	r2, #12
    20be:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    20c0:	3201      	adds	r2, #1
    20c2:	5483      	strb	r3, [r0, r2]
}
    20c4:	4770      	bx	lr
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	00ffffff 	.word	0x00ffffff

000020cc <tcc_init>:
{
    20cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ce:	46de      	mov	lr, fp
    20d0:	4657      	mov	r7, sl
    20d2:	464e      	mov	r6, r9
    20d4:	4645      	mov	r5, r8
    20d6:	b5e0      	push	{r5, r6, r7, lr}
    20d8:	b08d      	sub	sp, #52	; 0x34
    20da:	0006      	movs	r6, r0
    20dc:	000c      	movs	r4, r1
    20de:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    20e0:	0008      	movs	r0, r1
    20e2:	4bcd      	ldr	r3, [pc, #820]	; (2418 <tcc_init+0x34c>)
    20e4:	4798      	blx	r3
    20e6:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    20e8:	49cc      	ldr	r1, [pc, #816]	; (241c <tcc_init+0x350>)
    20ea:	6a0a      	ldr	r2, [r1, #32]
    20ec:	2020      	movs	r0, #32
    20ee:	4302      	orrs	r2, r0
    20f0:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    20f2:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    20f4:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    20f6:	0792      	lsls	r2, r2, #30
    20f8:	d506      	bpl.n	2108 <tcc_init+0x3c>
}
    20fa:	b00d      	add	sp, #52	; 0x34
    20fc:	bc3c      	pop	{r2, r3, r4, r5}
    20fe:	4690      	mov	r8, r2
    2100:	4699      	mov	r9, r3
    2102:	46a2      	mov	sl, r4
    2104:	46ab      	mov	fp, r5
    2106:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2108:	6822      	ldr	r2, [r4, #0]
    210a:	2701      	movs	r7, #1
    210c:	4017      	ands	r7, r2
    210e:	d1f4      	bne.n	20fa <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    2110:	4ac3      	ldr	r2, [pc, #780]	; (2420 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    2112:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    2114:	6829      	ldr	r1, [r5, #0]
    2116:	4291      	cmp	r1, r2
    2118:	d8ef      	bhi.n	20fa <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    211a:	6869      	ldr	r1, [r5, #4]
    211c:	4291      	cmp	r1, r2
    211e:	d8ec      	bhi.n	20fa <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    2120:	69e9      	ldr	r1, [r5, #28]
    2122:	4291      	cmp	r1, r2
    2124:	d900      	bls.n	2128 <tcc_init+0x5c>
    2126:	e18b      	b.n	2440 <tcc_init+0x374>
    2128:	6a29      	ldr	r1, [r5, #32]
    212a:	4291      	cmp	r1, r2
    212c:	d900      	bls.n	2130 <tcc_init+0x64>
    212e:	e189      	b.n	2444 <tcc_init+0x378>
    2130:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2132:	4291      	cmp	r1, r2
    2134:	d900      	bls.n	2138 <tcc_init+0x6c>
    2136:	e187      	b.n	2448 <tcc_init+0x37c>
    2138:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    213a:	4291      	cmp	r1, r2
    213c:	d900      	bls.n	2140 <tcc_init+0x74>
    213e:	e185      	b.n	244c <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    2140:	7c2a      	ldrb	r2, [r5, #16]
    2142:	3a01      	subs	r2, #1
    2144:	4250      	negs	r0, r2
    2146:	4150      	adcs	r0, r2
    2148:	0602      	lsls	r2, r0, #24
    214a:	9201      	str	r2, [sp, #4]
    214c:	7c6a      	ldrb	r2, [r5, #17]
    214e:	2a01      	cmp	r2, #1
    2150:	d031      	beq.n	21b6 <tcc_init+0xea>
    2152:	7caa      	ldrb	r2, [r5, #18]
    2154:	2a01      	cmp	r2, #1
    2156:	d034      	beq.n	21c2 <tcc_init+0xf6>
    2158:	7cea      	ldrb	r2, [r5, #19]
    215a:	2a01      	cmp	r2, #1
    215c:	d037      	beq.n	21ce <tcc_init+0x102>
	if (config->run_in_standby) {
    215e:	22a1      	movs	r2, #161	; 0xa1
    2160:	5caa      	ldrb	r2, [r5, r2]
    2162:	2a00      	cmp	r2, #0
    2164:	d004      	beq.n	2170 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2166:	2280      	movs	r2, #128	; 0x80
    2168:	0112      	lsls	r2, r2, #4
    216a:	9901      	ldr	r1, [sp, #4]
    216c:	4311      	orrs	r1, r2
    216e:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    2170:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2172:	1e51      	subs	r1, r2, #1
    2174:	418a      	sbcs	r2, r1
    2176:	0092      	lsls	r2, r2, #2
    2178:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    217a:	7a6a      	ldrb	r2, [r5, #9]
    217c:	2a01      	cmp	r2, #1
    217e:	d02c      	beq.n	21da <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    2180:	2235      	movs	r2, #53	; 0x35
    2182:	5caa      	ldrb	r2, [r5, r2]
    2184:	2a03      	cmp	r2, #3
    2186:	d900      	bls.n	218a <tcc_init+0xbe>
    2188:	e162      	b.n	2450 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    218a:	212c      	movs	r1, #44	; 0x2c
    218c:	5c69      	ldrb	r1, [r5, r1]
    218e:	290f      	cmp	r1, #15
    2190:	d900      	bls.n	2194 <tcc_init+0xc8>
    2192:	e15d      	b.n	2450 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2194:	7b28      	ldrb	r0, [r5, #12]
    2196:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2198:	7ae8      	ldrb	r0, [r5, #11]
    219a:	9005      	str	r0, [sp, #20]
    219c:	202d      	movs	r0, #45	; 0x2d
    219e:	4682      	mov	sl, r0
    21a0:	44aa      	add	sl, r5
    21a2:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    21a4:	9702      	str	r7, [sp, #8]
    21a6:	4684      	mov	ip, r0
    21a8:	9606      	str	r6, [sp, #24]
    21aa:	000e      	movs	r6, r1
    21ac:	46a0      	mov	r8, r4
    21ae:	4654      	mov	r4, sl
    21b0:	46a9      	mov	r9, r5
    21b2:	9307      	str	r3, [sp, #28]
    21b4:	e047      	b.n	2246 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    21b6:	2280      	movs	r2, #128	; 0x80
    21b8:	0492      	lsls	r2, r2, #18
    21ba:	9901      	ldr	r1, [sp, #4]
    21bc:	4311      	orrs	r1, r2
    21be:	9101      	str	r1, [sp, #4]
    21c0:	e7c7      	b.n	2152 <tcc_init+0x86>
    21c2:	2280      	movs	r2, #128	; 0x80
    21c4:	04d2      	lsls	r2, r2, #19
    21c6:	9901      	ldr	r1, [sp, #4]
    21c8:	4311      	orrs	r1, r2
    21ca:	9101      	str	r1, [sp, #4]
    21cc:	e7c4      	b.n	2158 <tcc_init+0x8c>
    21ce:	2280      	movs	r2, #128	; 0x80
    21d0:	0512      	lsls	r2, r2, #20
    21d2:	9901      	ldr	r1, [sp, #4]
    21d4:	4311      	orrs	r1, r2
    21d6:	9101      	str	r1, [sp, #4]
    21d8:	e7c1      	b.n	215e <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    21da:	9903      	ldr	r1, [sp, #12]
    21dc:	4311      	orrs	r1, r2
    21de:	9103      	str	r1, [sp, #12]
    21e0:	e7ce      	b.n	2180 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    21e2:	0292      	lsls	r2, r2, #10
    21e4:	25c0      	movs	r5, #192	; 0xc0
    21e6:	012d      	lsls	r5, r5, #4
    21e8:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21ea:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    21ec:	790d      	ldrb	r5, [r1, #4]
    21ee:	2603      	movs	r6, #3
    21f0:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21f2:	4332      	orrs	r2, r6
    21f4:	4655      	mov	r5, sl
    21f6:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    21f8:	794e      	ldrb	r6, [r1, #5]
    21fa:	0176      	lsls	r6, r6, #5
    21fc:	2560      	movs	r5, #96	; 0x60
    21fe:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2200:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2202:	798d      	ldrb	r5, [r1, #6]
    2204:	022d      	lsls	r5, r5, #8
    2206:	26c0      	movs	r6, #192	; 0xc0
    2208:	00b6      	lsls	r6, r6, #2
    220a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    220c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    220e:	79cd      	ldrb	r5, [r1, #7]
    2210:	032d      	lsls	r5, r5, #12
    2212:	26e0      	movs	r6, #224	; 0xe0
    2214:	01f6      	lsls	r6, r6, #7
    2216:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2218:	432a      	orrs	r2, r5
    221a:	4310      	orrs	r0, r2
    221c:	4303      	orrs	r3, r0
    221e:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    2220:	ab08      	add	r3, sp, #32
    2222:	4662      	mov	r2, ip
    2224:	2008      	movs	r0, #8
    2226:	181b      	adds	r3, r3, r0
    2228:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    222a:	2a04      	cmp	r2, #4
    222c:	d028      	beq.n	2280 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    222e:	7c8a      	ldrb	r2, [r1, #18]
    2230:	2a03      	cmp	r2, #3
    2232:	d900      	bls.n	2236 <tcc_init+0x16a>
    2234:	e10c      	b.n	2450 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    2236:	7a4e      	ldrb	r6, [r1, #9]
    2238:	340a      	adds	r4, #10
    223a:	2304      	movs	r3, #4
    223c:	469a      	mov	sl, r3
    223e:	44d4      	add	ip, sl
    2240:	2e0f      	cmp	r6, #15
    2242:	d900      	bls.n	2246 <tcc_init+0x17a>
    2244:	e104      	b.n	2450 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2246:	0636      	lsls	r6, r6, #24
    2248:	23f0      	movs	r3, #240	; 0xf0
    224a:	051b      	lsls	r3, r3, #20
    224c:	401e      	ands	r6, r3
    224e:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2250:	7825      	ldrb	r5, [r4, #0]
    2252:	042d      	lsls	r5, r5, #16
    2254:	23ff      	movs	r3, #255	; 0xff
    2256:	041b      	lsls	r3, r3, #16
    2258:	401d      	ands	r5, r3
    225a:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    225c:	7863      	ldrb	r3, [r4, #1]
    225e:	2080      	movs	r0, #128	; 0x80
    2260:	2b00      	cmp	r3, #0
    2262:	d100      	bne.n	2266 <tcc_init+0x19a>
    2264:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2266:	788f      	ldrb	r7, [r1, #2]
    2268:	2308      	movs	r3, #8
    226a:	2f00      	cmp	r7, #0
    226c:	d100      	bne.n	2270 <tcc_init+0x1a4>
    226e:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2270:	78cf      	ldrb	r7, [r1, #3]
    2272:	46bb      	mov	fp, r7
    2274:	2710      	movs	r7, #16
    2276:	465d      	mov	r5, fp
    2278:	2d00      	cmp	r5, #0
    227a:	d1b2      	bne.n	21e2 <tcc_init+0x116>
    227c:	9f02      	ldr	r7, [sp, #8]
    227e:	e7b0      	b.n	21e2 <tcc_init+0x116>
    2280:	9e06      	ldr	r6, [sp, #24]
    2282:	4644      	mov	r4, r8
    2284:	464d      	mov	r5, r9
    2286:	9b07      	ldr	r3, [sp, #28]
    2288:	4648      	mov	r0, r9
    228a:	3050      	adds	r0, #80	; 0x50
    228c:	4649      	mov	r1, r9
    228e:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2290:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2292:	2780      	movs	r7, #128	; 0x80
    2294:	027f      	lsls	r7, r7, #9
    2296:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2298:	2701      	movs	r7, #1
    229a:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    229c:	2702      	movs	r7, #2
    229e:	37ff      	adds	r7, #255	; 0xff
    22a0:	46ba      	mov	sl, r7
    22a2:	001f      	movs	r7, r3
    22a4:	0013      	movs	r3, r2
    22a6:	46a0      	mov	r8, r4
    22a8:	003c      	movs	r4, r7
    22aa:	e007      	b.n	22bc <tcc_init+0x1f0>
    22ac:	4657      	mov	r7, sl
    22ae:	4097      	lsls	r7, r2
    22b0:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    22b2:	3201      	adds	r2, #1
    22b4:	3001      	adds	r0, #1
    22b6:	3102      	adds	r1, #2
    22b8:	2a08      	cmp	r2, #8
    22ba:	d00e      	beq.n	22da <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    22bc:	7807      	ldrb	r7, [r0, #0]
    22be:	2f00      	cmp	r7, #0
    22c0:	d002      	beq.n	22c8 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    22c2:	4667      	mov	r7, ip
    22c4:	4097      	lsls	r7, r2
    22c6:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    22c8:	780f      	ldrb	r7, [r1, #0]
    22ca:	2f00      	cmp	r7, #0
    22cc:	d0f1      	beq.n	22b2 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    22ce:	2f02      	cmp	r7, #2
    22d0:	d0ec      	beq.n	22ac <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    22d2:	464f      	mov	r7, r9
    22d4:	4097      	lsls	r7, r2
    22d6:	433b      	orrs	r3, r7
    22d8:	e7eb      	b.n	22b2 <tcc_init+0x1e6>
    22da:	0022      	movs	r2, r4
    22dc:	4644      	mov	r4, r8
    22de:	4698      	mov	r8, r3
    22e0:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    22e2:	7e6a      	ldrb	r2, [r5, #25]
    22e4:	0112      	lsls	r2, r2, #4
    22e6:	2130      	movs	r1, #48	; 0x30
    22e8:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    22ea:	7e28      	ldrb	r0, [r5, #24]
    22ec:	2207      	movs	r2, #7
    22ee:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    22f0:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    22f2:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    22f4:	2080      	movs	r0, #128	; 0x80
    22f6:	0240      	lsls	r0, r0, #9
    22f8:	000f      	movs	r7, r1
    22fa:	e002      	b.n	2302 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    22fc:	3201      	adds	r2, #1
    22fe:	2a04      	cmp	r2, #4
    2300:	d007      	beq.n	2312 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    2302:	18a9      	adds	r1, r5, r2
    2304:	7d09      	ldrb	r1, [r1, #20]
    2306:	2900      	cmp	r1, #0
    2308:	d0f8      	beq.n	22fc <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    230a:	0001      	movs	r1, r0
    230c:	4091      	lsls	r1, r2
    230e:	430f      	orrs	r7, r1
    2310:	e7f4      	b.n	22fc <tcc_init+0x230>
    2312:	46b9      	mov	r9, r7
    2314:	1d32      	adds	r2, r6, #4
    2316:	0030      	movs	r0, r6
    2318:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    231a:	2100      	movs	r1, #0
    231c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    231e:	4290      	cmp	r0, r2
    2320:	d1fc      	bne.n	231c <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    2322:	2200      	movs	r2, #0
    2324:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2326:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2328:	009b      	lsls	r3, r3, #2
    232a:	4a3e      	ldr	r2, [pc, #248]	; (2424 <tcc_init+0x358>)
    232c:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    232e:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2330:	23a0      	movs	r3, #160	; 0xa0
    2332:	5cea      	ldrb	r2, [r5, r3]
    2334:	3b64      	subs	r3, #100	; 0x64
    2336:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    2338:	a909      	add	r1, sp, #36	; 0x24
    233a:	7aab      	ldrb	r3, [r5, #10]
    233c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    233e:	2011      	movs	r0, #17
    2340:	4b39      	ldr	r3, [pc, #228]	; (2428 <tcc_init+0x35c>)
    2342:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2344:	2011      	movs	r0, #17
    2346:	4b39      	ldr	r3, [pc, #228]	; (242c <tcc_init+0x360>)
    2348:	4798      	blx	r3
    234a:	002f      	movs	r7, r5
    234c:	3798      	adds	r7, #152	; 0x98
    234e:	002e      	movs	r6, r5
    2350:	3658      	adds	r6, #88	; 0x58
    2352:	2378      	movs	r3, #120	; 0x78
    2354:	469a      	mov	sl, r3
    2356:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2358:	3b77      	subs	r3, #119	; 0x77
    235a:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    235c:	0023      	movs	r3, r4
    235e:	4654      	mov	r4, sl
    2360:	469a      	mov	sl, r3
    2362:	e003      	b.n	236c <tcc_init+0x2a0>
    2364:	3701      	adds	r7, #1
    2366:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2368:	42b4      	cmp	r4, r6
    236a:	d014      	beq.n	2396 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    236c:	783b      	ldrb	r3, [r7, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d0f8      	beq.n	2364 <tcc_init+0x298>
    2372:	ab08      	add	r3, sp, #32
    2374:	465a      	mov	r2, fp
    2376:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2378:	2300      	movs	r3, #0
    237a:	aa08      	add	r2, sp, #32
    237c:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    237e:	0013      	movs	r3, r2
    2380:	2220      	movs	r2, #32
    2382:	18b2      	adds	r2, r6, r2
    2384:	7812      	ldrb	r2, [r2, #0]
    2386:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2388:	465a      	mov	r2, fp
    238a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    238c:	7830      	ldrb	r0, [r6, #0]
    238e:	0019      	movs	r1, r3
    2390:	4b27      	ldr	r3, [pc, #156]	; (2430 <tcc_init+0x364>)
    2392:	4798      	blx	r3
    2394:	e7e6      	b.n	2364 <tcc_init+0x298>
    2396:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2398:	9b04      	ldr	r3, [sp, #16]
    239a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    239c:	9a05      	ldr	r2, [sp, #20]
    239e:	0212      	lsls	r2, r2, #8
    23a0:	4313      	orrs	r3, r2
    23a2:	9a01      	ldr	r2, [sp, #4]
    23a4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    23a6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    23a8:	2204      	movs	r2, #4
    23aa:	68a3      	ldr	r3, [r4, #8]
    23ac:	421a      	tst	r2, r3
    23ae:	d1fc      	bne.n	23aa <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    23b0:	23ff      	movs	r3, #255	; 0xff
    23b2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    23b4:	2204      	movs	r2, #4
    23b6:	68a3      	ldr	r3, [r4, #8]
    23b8:	421a      	tst	r2, r3
    23ba:	d1fc      	bne.n	23b6 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    23bc:	466b      	mov	r3, sp
    23be:	7b1b      	ldrb	r3, [r3, #12]
    23c0:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    23c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    23c4:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    23c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23c8:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    23ca:	4643      	mov	r3, r8
    23cc:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    23ce:	4a19      	ldr	r2, [pc, #100]	; (2434 <tcc_init+0x368>)
    23d0:	68a3      	ldr	r3, [r4, #8]
    23d2:	4213      	tst	r3, r2
    23d4:	d1fc      	bne.n	23d0 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    23d6:	464b      	mov	r3, r9
    23d8:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    23da:	2210      	movs	r2, #16
    23dc:	68a3      	ldr	r3, [r4, #8]
    23de:	421a      	tst	r2, r3
    23e0:	d1fc      	bne.n	23dc <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    23e2:	682b      	ldr	r3, [r5, #0]
    23e4:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    23e6:	4a14      	ldr	r2, [pc, #80]	; (2438 <tcc_init+0x36c>)
    23e8:	68a3      	ldr	r3, [r4, #8]
    23ea:	4213      	tst	r3, r2
    23ec:	d1fc      	bne.n	23e8 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    23ee:	686b      	ldr	r3, [r5, #4]
    23f0:	6423      	str	r3, [r4, #64]	; 0x40
    23f2:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    23f4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    23f6:	4811      	ldr	r0, [pc, #68]	; (243c <tcc_init+0x370>)
    23f8:	0002      	movs	r2, r0
    23fa:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    23fc:	68a3      	ldr	r3, [r4, #8]
    23fe:	421a      	tst	r2, r3
    2400:	d1fc      	bne.n	23fc <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    2402:	cd04      	ldmia	r5!, {r2}
    2404:	000b      	movs	r3, r1
    2406:	3310      	adds	r3, #16
    2408:	009b      	lsls	r3, r3, #2
    240a:	18e3      	adds	r3, r4, r3
    240c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    240e:	3101      	adds	r1, #1
    2410:	2904      	cmp	r1, #4
    2412:	d1f1      	bne.n	23f8 <tcc_init+0x32c>
	return STATUS_OK;
    2414:	2000      	movs	r0, #0
    2416:	e670      	b.n	20fa <tcc_init+0x2e>
    2418:	00001f41 	.word	0x00001f41
    241c:	40000400 	.word	0x40000400
    2420:	00ffffff 	.word	0x00ffffff
    2424:	200003a4 	.word	0x200003a4
    2428:	000032f9 	.word	0x000032f9
    242c:	0000326d 	.word	0x0000326d
    2430:	000033f1 	.word	0x000033f1
    2434:	00020040 	.word	0x00020040
    2438:	00040080 	.word	0x00040080
    243c:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    2440:	2017      	movs	r0, #23
    2442:	e65a      	b.n	20fa <tcc_init+0x2e>
    2444:	2017      	movs	r0, #23
    2446:	e658      	b.n	20fa <tcc_init+0x2e>
    2448:	2017      	movs	r0, #23
    244a:	e656      	b.n	20fa <tcc_init+0x2e>
    244c:	2017      	movs	r0, #23
    244e:	e654      	b.n	20fa <tcc_init+0x2e>
    2450:	2017      	movs	r0, #23
    2452:	e652      	b.n	20fa <tcc_init+0x2e>

00002454 <tcc_set_compare_value>:
 * \brief Sets a TCC module compare value.
 *
 * Writes a compare value to the given TCC module compare/capture channel.
 *
 * If double buffering is enabled it always write to the buffer
 * register. The value will then be updated immediately by calling
    2454:	b510      	push	{r4, lr}
 * \ref tcc_force_double_buffer_update(), or be updated when the lock update bit
 * is cleared and the UPDATE condition happen.
 *
 * \param[in]  module_inst    Pointer to the software module instance struct
    2456:	233c      	movs	r3, #60	; 0x3c
    2458:	5cc3      	ldrb	r3, [r0, r3]
    245a:	4c01      	ldr	r4, [pc, #4]	; (2460 <tcc_set_compare_value+0xc>)
    245c:	47a0      	blx	r4
 * \param[in]  channel_index  Index of the compare channel to write to
 * \param[in]  compare        New compare value to set
    245e:	bd10      	pop	{r4, pc}
    2460:	00001f45 	.word	0x00001f45

00002464 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2464:	b5f0      	push	{r4, r5, r6, r7, lr}
    2466:	46c6      	mov	lr, r8
    2468:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    246a:	0080      	lsls	r0, r0, #2
    246c:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <_tcc_interrupt_handler+0x44>)
    246e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2470:	683b      	ldr	r3, [r7, #0]
    2472:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2478:	4013      	ands	r3, r2
    247a:	401e      	ands	r6, r3
    247c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    247e:	4b0b      	ldr	r3, [pc, #44]	; (24ac <_tcc_interrupt_handler+0x48>)
    2480:	4698      	mov	r8, r3
    2482:	e002      	b.n	248a <_tcc_interrupt_handler+0x26>
    2484:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2486:	2c30      	cmp	r4, #48	; 0x30
    2488:	d00a      	beq.n	24a0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    248a:	4643      	mov	r3, r8
    248c:	58e5      	ldr	r5, [r4, r3]
    248e:	4235      	tst	r5, r6
    2490:	d0f8      	beq.n	2484 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2492:	193b      	adds	r3, r7, r4
    2494:	685b      	ldr	r3, [r3, #4]
    2496:	0038      	movs	r0, r7
    2498:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	62dd      	str	r5, [r3, #44]	; 0x2c
    249e:	e7f1      	b.n	2484 <_tcc_interrupt_handler+0x20>
		}
	}
}
    24a0:	bc04      	pop	{r2}
    24a2:	4690      	mov	r8, r2
    24a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	200003a4 	.word	0x200003a4
    24ac:	00003b94 	.word	0x00003b94

000024b0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    24b0:	b510      	push	{r4, lr}
    24b2:	2000      	movs	r0, #0
    24b4:	4b01      	ldr	r3, [pc, #4]	; (24bc <TCC0_Handler+0xc>)
    24b6:	4798      	blx	r3
    24b8:	bd10      	pop	{r4, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00002465 	.word	0x00002465

000024c0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    24c0:	4b06      	ldr	r3, [pc, #24]	; (24dc <_tc_get_inst_index+0x1c>)
    24c2:	4298      	cmp	r0, r3
    24c4:	d008      	beq.n	24d8 <_tc_get_inst_index+0x18>
    24c6:	4a06      	ldr	r2, [pc, #24]	; (24e0 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    24c8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    24ca:	4290      	cmp	r0, r2
    24cc:	d001      	beq.n	24d2 <_tc_get_inst_index+0x12>
}
    24ce:	0018      	movs	r0, r3
    24d0:	4770      	bx	lr
    24d2:	3301      	adds	r3, #1
			return i;
    24d4:	b2db      	uxtb	r3, r3
    24d6:	e7fa      	b.n	24ce <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    24d8:	2300      	movs	r3, #0
    24da:	e7fb      	b.n	24d4 <_tc_get_inst_index+0x14>
    24dc:	42001800 	.word	0x42001800
    24e0:	42001c00 	.word	0x42001c00

000024e4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    24e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24e6:	b085      	sub	sp, #20
    24e8:	0004      	movs	r4, r0
    24ea:	000d      	movs	r5, r1
    24ec:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    24ee:	0008      	movs	r0, r1
    24f0:	4b82      	ldr	r3, [pc, #520]	; (26fc <tc_init+0x218>)
    24f2:	4798      	blx	r3
    24f4:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    24f6:	ab03      	add	r3, sp, #12
    24f8:	2212      	movs	r2, #18
    24fa:	701a      	strb	r2, [r3, #0]
    24fc:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    24fe:	ab02      	add	r3, sp, #8
    2500:	322e      	adds	r2, #46	; 0x2e
    2502:	801a      	strh	r2, [r3, #0]
    2504:	3240      	adds	r2, #64	; 0x40
    2506:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2508:	2300      	movs	r3, #0
    250a:	60a3      	str	r3, [r4, #8]
    250c:	60e3      	str	r3, [r4, #12]
    250e:	6123      	str	r3, [r4, #16]
    2510:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2512:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2514:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2516:	0082      	lsls	r2, r0, #2
    2518:	4b79      	ldr	r3, [pc, #484]	; (2700 <tc_init+0x21c>)
    251a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    251c:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    251e:	78b3      	ldrb	r3, [r6, #2]
    2520:	2b08      	cmp	r3, #8
    2522:	d006      	beq.n	2532 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2524:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2526:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2528:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    252a:	07db      	lsls	r3, r3, #31
    252c:	d505      	bpl.n	253a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    252e:	b005      	add	sp, #20
    2530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2532:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2534:	07fa      	lsls	r2, r7, #31
    2536:	d4fa      	bmi.n	252e <tc_init+0x4a>
    2538:	e7f4      	b.n	2524 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    253a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    253c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    253e:	06db      	lsls	r3, r3, #27
    2540:	d4f5      	bmi.n	252e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2542:	882b      	ldrh	r3, [r5, #0]
    2544:	079b      	lsls	r3, r3, #30
    2546:	d4f2      	bmi.n	252e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    2548:	7c33      	ldrb	r3, [r6, #16]
    254a:	2b00      	cmp	r3, #0
    254c:	d000      	beq.n	2550 <tc_init+0x6c>
    254e:	e07a      	b.n	2646 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    2550:	7f33      	ldrb	r3, [r6, #28]
    2552:	2b00      	cmp	r3, #0
    2554:	d000      	beq.n	2558 <tc_init+0x74>
    2556:	e082      	b.n	265e <tc_init+0x17a>
    2558:	496a      	ldr	r1, [pc, #424]	; (2704 <tc_init+0x220>)
    255a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    255c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    255e:	ab02      	add	r3, sp, #8
    2560:	5ad3      	ldrh	r3, [r2, r3]
    2562:	4303      	orrs	r3, r0
    2564:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2566:	78b3      	ldrb	r3, [r6, #2]
    2568:	2b08      	cmp	r3, #8
    256a:	d100      	bne.n	256e <tc_init+0x8a>
    256c:	e087      	b.n	267e <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    256e:	7833      	ldrb	r3, [r6, #0]
    2570:	466a      	mov	r2, sp
    2572:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2574:	ab03      	add	r3, sp, #12
    2576:	5ddf      	ldrb	r7, [r3, r7]
    2578:	4669      	mov	r1, sp
    257a:	0038      	movs	r0, r7
    257c:	4b62      	ldr	r3, [pc, #392]	; (2708 <tc_init+0x224>)
    257e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2580:	0038      	movs	r0, r7
    2582:	4b62      	ldr	r3, [pc, #392]	; (270c <tc_init+0x228>)
    2584:	4798      	blx	r3
	ctrla_tmp =
    2586:	8931      	ldrh	r1, [r6, #8]
    2588:	88b3      	ldrh	r3, [r6, #4]
    258a:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    258c:	78b1      	ldrb	r1, [r6, #2]
    258e:	79b2      	ldrb	r2, [r6, #6]
    2590:	4311      	orrs	r1, r2
	ctrla_tmp =
    2592:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2594:	7873      	ldrb	r3, [r6, #1]
    2596:	2b00      	cmp	r3, #0
    2598:	d002      	beq.n	25a0 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    259a:	2380      	movs	r3, #128	; 0x80
    259c:	011b      	lsls	r3, r3, #4
    259e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25a0:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25a2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25a4:	b25b      	sxtb	r3, r3
    25a6:	2b00      	cmp	r3, #0
    25a8:	dbfb      	blt.n	25a2 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    25aa:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    25ac:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    25ae:	1e4b      	subs	r3, r1, #1
    25b0:	4199      	sbcs	r1, r3
    25b2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    25b4:	7bb3      	ldrb	r3, [r6, #14]
    25b6:	2b00      	cmp	r3, #0
    25b8:	d001      	beq.n	25be <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25ba:	2301      	movs	r3, #1
    25bc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25c0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25c2:	b25b      	sxtb	r3, r3
    25c4:	2b00      	cmp	r3, #0
    25c6:	dbfb      	blt.n	25c0 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25c8:	23ff      	movs	r3, #255	; 0xff
    25ca:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    25cc:	2900      	cmp	r1, #0
    25ce:	d005      	beq.n	25dc <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25d2:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    25d4:	b25b      	sxtb	r3, r3
    25d6:	2b00      	cmp	r3, #0
    25d8:	dbfb      	blt.n	25d2 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25da:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    25dc:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    25de:	7af3      	ldrb	r3, [r6, #11]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d001      	beq.n	25e8 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25e4:	2310      	movs	r3, #16
    25e6:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    25e8:	7b33      	ldrb	r3, [r6, #12]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d001      	beq.n	25f2 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25ee:	2320      	movs	r3, #32
    25f0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25f6:	b25b      	sxtb	r3, r3
    25f8:	2b00      	cmp	r3, #0
    25fa:	dbfb      	blt.n	25f4 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    25fc:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2600:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2602:	b25b      	sxtb	r3, r3
    2604:	2b00      	cmp	r3, #0
    2606:	dbfb      	blt.n	2600 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    2608:	7923      	ldrb	r3, [r4, #4]
    260a:	2b04      	cmp	r3, #4
    260c:	d03f      	beq.n	268e <tc_init+0x1aa>
    260e:	2b08      	cmp	r3, #8
    2610:	d05e      	beq.n	26d0 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    2612:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2614:	2b00      	cmp	r3, #0
    2616:	d000      	beq.n	261a <tc_init+0x136>
    2618:	e789      	b.n	252e <tc_init+0x4a>
    261a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    261c:	b25b      	sxtb	r3, r3
    261e:	2b00      	cmp	r3, #0
    2620:	dbfb      	blt.n	261a <tc_init+0x136>
				= config->counter_16_bit.value;
    2622:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2624:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2626:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2628:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    262a:	b25b      	sxtb	r3, r3
    262c:	2b00      	cmp	r3, #0
    262e:	dbfb      	blt.n	2628 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    2630:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2632:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2634:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2636:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2638:	b25b      	sxtb	r3, r3
    263a:	2b00      	cmp	r3, #0
    263c:	dbfb      	blt.n	2636 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    263e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2640:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2642:	2000      	movs	r0, #0
    2644:	e773      	b.n	252e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2646:	a901      	add	r1, sp, #4
    2648:	2301      	movs	r3, #1
    264a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    264c:	2200      	movs	r2, #0
    264e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2650:	7e32      	ldrb	r2, [r6, #24]
    2652:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2654:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2656:	7d30      	ldrb	r0, [r6, #20]
    2658:	4b2d      	ldr	r3, [pc, #180]	; (2710 <tc_init+0x22c>)
    265a:	4798      	blx	r3
    265c:	e778      	b.n	2550 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    265e:	a901      	add	r1, sp, #4
    2660:	2301      	movs	r3, #1
    2662:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2664:	2200      	movs	r2, #0
    2666:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2668:	3224      	adds	r2, #36	; 0x24
    266a:	18b2      	adds	r2, r6, r2
    266c:	7812      	ldrb	r2, [r2, #0]
    266e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2670:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2672:	331f      	adds	r3, #31
    2674:	18f3      	adds	r3, r6, r3
    2676:	7818      	ldrb	r0, [r3, #0]
    2678:	4b25      	ldr	r3, [pc, #148]	; (2710 <tc_init+0x22c>)
    267a:	4798      	blx	r3
    267c:	e76c      	b.n	2558 <tc_init+0x74>
    267e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2680:	1c7a      	adds	r2, r7, #1
    2682:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2684:	ab02      	add	r3, sp, #8
    2686:	5ad3      	ldrh	r3, [r2, r3]
    2688:	4303      	orrs	r3, r0
    268a:	620b      	str	r3, [r1, #32]
    268c:	e76f      	b.n	256e <tc_init+0x8a>
    268e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2690:	b25b      	sxtb	r3, r3
    2692:	2b00      	cmp	r3, #0
    2694:	dbfb      	blt.n	268e <tc_init+0x1aa>
					config->counter_8_bit.value;
    2696:	2328      	movs	r3, #40	; 0x28
    2698:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    269a:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    269c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    269e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26a0:	b25b      	sxtb	r3, r3
    26a2:	2b00      	cmp	r3, #0
    26a4:	dbfb      	blt.n	269e <tc_init+0x1ba>
					config->counter_8_bit.period;
    26a6:	2329      	movs	r3, #41	; 0x29
    26a8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    26aa:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ac:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26b0:	b25b      	sxtb	r3, r3
    26b2:	2b00      	cmp	r3, #0
    26b4:	dbfb      	blt.n	26ae <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    26b6:	232a      	movs	r3, #42	; 0x2a
    26b8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    26ba:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26c0:	b25b      	sxtb	r3, r3
    26c2:	2b00      	cmp	r3, #0
    26c4:	dbfb      	blt.n	26be <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    26c6:	232b      	movs	r3, #43	; 0x2b
    26c8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    26ca:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    26cc:	2000      	movs	r0, #0
    26ce:	e72e      	b.n	252e <tc_init+0x4a>
    26d0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26d2:	b25b      	sxtb	r3, r3
    26d4:	2b00      	cmp	r3, #0
    26d6:	dbfb      	blt.n	26d0 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    26d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    26da:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26de:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26e0:	b25b      	sxtb	r3, r3
    26e2:	2b00      	cmp	r3, #0
    26e4:	dbfb      	blt.n	26de <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    26e6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    26e8:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ec:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26ee:	b25b      	sxtb	r3, r3
    26f0:	2b00      	cmp	r3, #0
    26f2:	dbfb      	blt.n	26ec <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    26f4:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    26f6:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    26f8:	2000      	movs	r0, #0
    26fa:	e718      	b.n	252e <tc_init+0x4a>
    26fc:	000024c1 	.word	0x000024c1
    2700:	200003a8 	.word	0x200003a8
    2704:	40000400 	.word	0x40000400
    2708:	000032f9 	.word	0x000032f9
    270c:	0000326d 	.word	0x0000326d
    2710:	000033f1 	.word	0x000033f1

00002714 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2714:	1c93      	adds	r3, r2, #2
    2716:	009b      	lsls	r3, r3, #2
    2718:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    271a:	2a02      	cmp	r2, #2
    271c:	d009      	beq.n	2732 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    271e:	2a03      	cmp	r2, #3
    2720:	d00c      	beq.n	273c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2722:	2301      	movs	r3, #1
    2724:	4093      	lsls	r3, r2
    2726:	001a      	movs	r2, r3
    2728:	7e03      	ldrb	r3, [r0, #24]
    272a:	4313      	orrs	r3, r2
    272c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    272e:	2000      	movs	r0, #0
    2730:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2732:	7e03      	ldrb	r3, [r0, #24]
    2734:	2210      	movs	r2, #16
    2736:	4313      	orrs	r3, r2
    2738:	7603      	strb	r3, [r0, #24]
    273a:	e7f8      	b.n	272e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    273c:	7e03      	ldrb	r3, [r0, #24]
    273e:	2220      	movs	r2, #32
    2740:	4313      	orrs	r3, r2
    2742:	7603      	strb	r3, [r0, #24]
    2744:	e7f3      	b.n	272e <tc_register_callback+0x1a>
	...

00002748 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    274a:	46de      	mov	lr, fp
    274c:	4657      	mov	r7, sl
    274e:	464e      	mov	r6, r9
    2750:	4645      	mov	r5, r8
    2752:	b5e0      	push	{r5, r6, r7, lr}
 



	/* Get device instance from the look-up table */
	struct tc_module *module = (struct tc_module *)_tc_instances[instance];
    2754:	0080      	lsls	r0, r0, #2
    2756:	4ba6      	ldr	r3, [pc, #664]	; (29f0 <_tc_interrupt_handler+0x2a8>)
    2758:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg & module->register_callback_mask & module->enable_callback_mask;
    275a:	6823      	ldr	r3, [r4, #0]
    275c:	7b9b      	ldrb	r3, [r3, #14]
    275e:	7e22      	ldrb	r2, [r4, #24]
    2760:	7e61      	ldrb	r1, [r4, #25]
    2762:	4011      	ands	r1, r2
    2764:	4019      	ands	r1, r3
			
	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2766:	06cb      	lsls	r3, r1, #27
    2768:	d400      	bmi.n	276c <_tc_interrupt_handler+0x24>
    276a:	e086      	b.n	287a <_tc_interrupt_handler+0x132>
		/* Invoke registered and enabled callback function */
		//(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
		/* Clear interrupt flag */
		//module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
		
		if(first_time == false)
    276c:	4ba1      	ldr	r3, [pc, #644]	; (29f4 <_tc_interrupt_handler+0x2ac>)
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	2b00      	cmp	r3, #0
    2772:	d17c      	bne.n	286e <_tc_interrupt_handler+0x126>
		{
			if(compare_array_ID != N_valid_compares)
    2774:	4ba0      	ldr	r3, [pc, #640]	; (29f8 <_tc_interrupt_handler+0x2b0>)
    2776:	781b      	ldrb	r3, [r3, #0]
    2778:	4aa0      	ldr	r2, [pc, #640]	; (29fc <_tc_interrupt_handler+0x2b4>)
    277a:	7812      	ldrb	r2, [r2, #0]
    277c:	b2db      	uxtb	r3, r3
    277e:	4293      	cmp	r3, r2
    2780:	d011      	beq.n	27a6 <_tc_interrupt_handler+0x5e>
			{
				//port_pin_set_output_level(LED1, RGB_ON);
				//port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
				*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    2782:	489f      	ldr	r0, [pc, #636]	; (2a00 <_tc_interrupt_handler+0x2b8>)
    2784:	7803      	ldrb	r3, [r0, #0]
    2786:	b2db      	uxtb	r3, r3
    2788:	1c5a      	adds	r2, r3, #1
    278a:	b2d2      	uxtb	r2, r2
    278c:	7002      	strb	r2, [r0, #0]
    278e:	4a9d      	ldr	r2, [pc, #628]	; (2a04 <_tc_interrupt_handler+0x2bc>)
    2790:	5cd2      	ldrb	r2, [r2, r3]
    2792:	b2d2      	uxtb	r2, r2
    2794:	2301      	movs	r3, #1
    2796:	4093      	lsls	r3, r2
    2798:	4a9b      	ldr	r2, [pc, #620]	; (2a08 <_tc_interrupt_handler+0x2c0>)
    279a:	6013      	str	r3, [r2, #0]
				compare_array_ID = compare_array_ID + 1;
    279c:	4a96      	ldr	r2, [pc, #600]	; (29f8 <_tc_interrupt_handler+0x2b0>)
    279e:	7813      	ldrb	r3, [r2, #0]
    27a0:	3301      	adds	r3, #1
    27a2:	b2db      	uxtb	r3, r3
    27a4:	7013      	strb	r3, [r2, #0]
			}
			
			if(compare_array_ID < N_valid_compares )
    27a6:	4b94      	ldr	r3, [pc, #592]	; (29f8 <_tc_interrupt_handler+0x2b0>)
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	4a94      	ldr	r2, [pc, #592]	; (29fc <_tc_interrupt_handler+0x2b4>)
    27ac:	7812      	ldrb	r2, [r2, #0]
    27ae:	b2db      	uxtb	r3, r3
    27b0:	4293      	cmp	r3, r2
    27b2:	d25f      	bcs.n	2874 <_tc_interrupt_handler+0x12c>
			{
				compare_value_last    = compare_array[compare_array_ID - 1];
    27b4:	4d90      	ldr	r5, [pc, #576]	; (29f8 <_tc_interrupt_handler+0x2b0>)
    27b6:	782b      	ldrb	r3, [r5, #0]
    27b8:	3b01      	subs	r3, #1
    27ba:	4894      	ldr	r0, [pc, #592]	; (2a0c <_tc_interrupt_handler+0x2c4>)
    27bc:	5cc2      	ldrb	r2, [r0, r3]
    27be:	b2d2      	uxtb	r2, r2
    27c0:	4b93      	ldr	r3, [pc, #588]	; (2a10 <_tc_interrupt_handler+0x2c8>)
    27c2:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[compare_array_ID];
    27c4:	782b      	ldrb	r3, [r5, #0]
    27c6:	b2db      	uxtb	r3, r3
    27c8:	5cc3      	ldrb	r3, [r0, r3]
    27ca:	b2db      	uxtb	r3, r3
    27cc:	4891      	ldr	r0, [pc, #580]	; (2a14 <_tc_interrupt_handler+0x2cc>)
    27ce:	7003      	strb	r3, [r0, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    27d0:	429a      	cmp	r2, r3
    27d2:	d136      	bne.n	2842 <_tc_interrupt_handler+0xfa>
    27d4:	7828      	ldrb	r0, [r5, #0]
    27d6:	b2c0      	uxtb	r0, r0
    27d8:	4b88      	ldr	r3, [pc, #544]	; (29fc <_tc_interrupt_handler+0x2b4>)
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	3b01      	subs	r3, #1
    27de:	4298      	cmp	r0, r3
    27e0:	dc3c      	bgt.n	285c <_tc_interrupt_handler+0x114>
				{
					//Enable the LED
					//port_pin_set_output_level(LED1, RGB_OFF);
					//port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    27e2:	4e87      	ldr	r6, [pc, #540]	; (2a00 <_tc_interrupt_handler+0x2b8>)
    27e4:	4b87      	ldr	r3, [pc, #540]	; (2a04 <_tc_interrupt_handler+0x2bc>)
    27e6:	4698      	mov	r8, r3
					compare_value_last	  = compare_array[compare_array_ID];
    27e8:	0028      	movs	r0, r5
    27ea:	4d88      	ldr	r5, [pc, #544]	; (2a0c <_tc_interrupt_handler+0x2c4>)
    27ec:	4b88      	ldr	r3, [pc, #544]	; (2a10 <_tc_interrupt_handler+0x2c8>)
    27ee:	469c      	mov	ip, r3
					compare_value_current = compare_array[++compare_array_ID];
    27f0:	4f88      	ldr	r7, [pc, #544]	; (2a14 <_tc_interrupt_handler+0x2cc>)
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    27f2:	4682      	mov	sl, r0
    27f4:	4b81      	ldr	r3, [pc, #516]	; (29fc <_tc_interrupt_handler+0x2b4>)
    27f6:	4699      	mov	r9, r3
					*PORT_SET		 = (1UL << pin_array[pin_array_ID++] ) ;
    27f8:	7833      	ldrb	r3, [r6, #0]
    27fa:	b2db      	uxtb	r3, r3
    27fc:	1c5a      	adds	r2, r3, #1
    27fe:	b2d2      	uxtb	r2, r2
    2800:	7032      	strb	r2, [r6, #0]
    2802:	4642      	mov	r2, r8
    2804:	5cd2      	ldrb	r2, [r2, r3]
    2806:	b2d2      	uxtb	r2, r2
    2808:	2301      	movs	r3, #1
    280a:	4093      	lsls	r3, r2
    280c:	4a7e      	ldr	r2, [pc, #504]	; (2a08 <_tc_interrupt_handler+0x2c0>)
    280e:	6013      	str	r3, [r2, #0]
					compare_value_last	  = compare_array[compare_array_ID];
    2810:	7803      	ldrb	r3, [r0, #0]
    2812:	b2db      	uxtb	r3, r3
    2814:	5cea      	ldrb	r2, [r5, r3]
    2816:	b2d2      	uxtb	r2, r2
    2818:	4663      	mov	r3, ip
    281a:	701a      	strb	r2, [r3, #0]
					compare_value_current = compare_array[++compare_array_ID];
    281c:	7803      	ldrb	r3, [r0, #0]
    281e:	3301      	adds	r3, #1
    2820:	b2db      	uxtb	r3, r3
    2822:	7003      	strb	r3, [r0, #0]
    2824:	5ceb      	ldrb	r3, [r5, r3]
    2826:	b2db      	uxtb	r3, r3
    2828:	703b      	strb	r3, [r7, #0]
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    282a:	429a      	cmp	r2, r3
    282c:	d109      	bne.n	2842 <_tc_interrupt_handler+0xfa>
    282e:	4652      	mov	r2, sl
    2830:	7812      	ldrb	r2, [r2, #0]
    2832:	b2d2      	uxtb	r2, r2
    2834:	4693      	mov	fp, r2
    2836:	464a      	mov	r2, r9
    2838:	7812      	ldrb	r2, [r2, #0]
    283a:	3a01      	subs	r2, #1
    283c:	4593      	cmp	fp, r2
    283e:	dddb      	ble.n	27f8 <_tc_interrupt_handler+0xb0>
					compare_value_current = compare_array[++compare_array_ID];
    2840:	001a      	movs	r2, r3
				}
				if(compare_value_current != 255)
    2842:	2bff      	cmp	r3, #255	; 0xff
    2844:	d00c      	beq.n	2860 <_tc_interrupt_handler+0x118>
				{
					//check sync
					while((*STATUS_REGISTER && MASK_SYNC) == true);
    2846:	4874      	ldr	r0, [pc, #464]	; (2a18 <_tc_interrupt_handler+0x2d0>)
    2848:	7802      	ldrb	r2, [r0, #0]
    284a:	2a00      	cmp	r2, #0
    284c:	d1fc      	bne.n	2848 <_tc_interrupt_handler+0x100>
					*COMPARE_REGISTER         =	compare_value_current;
    284e:	4a73      	ldr	r2, [pc, #460]	; (2a1c <_tc_interrupt_handler+0x2d4>)
    2850:	7013      	strb	r3, [r2, #0]
					*COUNT_REGISTER           =	compare_value_last;			
    2852:	4b6f      	ldr	r3, [pc, #444]	; (2a10 <_tc_interrupt_handler+0x2c8>)
    2854:	781a      	ldrb	r2, [r3, #0]
    2856:	4b72      	ldr	r3, [pc, #456]	; (2a20 <_tc_interrupt_handler+0x2d8>)
    2858:	701a      	strb	r2, [r3, #0]
    285a:	e00b      	b.n	2874 <_tc_interrupt_handler+0x12c>
				while((compare_value_last == compare_value_current) && (compare_array_ID <= N_valid_compares - 1))
    285c:	0013      	movs	r3, r2
    285e:	e7f0      	b.n	2842 <_tc_interrupt_handler+0xfa>
					//tc_set_count_value(module_inst, compare_value_last);
					//tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
				}
				else
				{
					while((*STATUS_REGISTER && MASK_SYNC) == true);
    2860:	486d      	ldr	r0, [pc, #436]	; (2a18 <_tc_interrupt_handler+0x2d0>)
    2862:	7803      	ldrb	r3, [r0, #0]
    2864:	2b00      	cmp	r3, #0
    2866:	d1fc      	bne.n	2862 <_tc_interrupt_handler+0x11a>
					*COUNT_REGISTER         =	compare_value_last;
    2868:	4b6d      	ldr	r3, [pc, #436]	; (2a20 <_tc_interrupt_handler+0x2d8>)
    286a:	701a      	strb	r2, [r3, #0]
    286c:	e002      	b.n	2874 <_tc_interrupt_handler+0x12c>
			
			
		}
		else
		{
			first_time = false;
    286e:	2200      	movs	r2, #0
    2870:	4b60      	ldr	r3, [pc, #384]	; (29f4 <_tc_interrupt_handler+0x2ac>)
    2872:	701a      	strb	r2, [r3, #0]
			
		}
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2874:	2310      	movs	r3, #16
    2876:	6822      	ldr	r2, [r4, #0]
    2878:	7393      	strb	r3, [r2, #14]
	}
	
	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    287a:	07cb      	lsls	r3, r1, #31
    287c:	d400      	bmi.n	2880 <_tc_interrupt_handler+0x138>
    287e:	e0a6      	b.n	29ce <_tc_interrupt_handler+0x286>
		/* Invoke registered and enabled callback function */
		//(module->callback[TC_CALLBACK_OVERFLOW])(module);
		/* Clear interrupt flag */
		serial_timeout_count++;
    2880:	4a68      	ldr	r2, [pc, #416]	; (2a24 <_tc_interrupt_handler+0x2dc>)
    2882:	7813      	ldrb	r3, [r2, #0]
    2884:	3301      	adds	r3, #1
    2886:	b2db      	uxtb	r3, r3
    2888:	7013      	strb	r3, [r2, #0]
		
		if(status_battery == true)
    288a:	4b67      	ldr	r3, [pc, #412]	; (2a28 <_tc_interrupt_handler+0x2e0>)
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	2b00      	cmp	r3, #0
    2890:	d025      	beq.n	28de <_tc_interrupt_handler+0x196>
		{
			status_update_count++;
    2892:	4a66      	ldr	r2, [pc, #408]	; (2a2c <_tc_interrupt_handler+0x2e4>)
    2894:	7813      	ldrb	r3, [r2, #0]
    2896:	3301      	adds	r3, #1
    2898:	b2db      	uxtb	r3, r3
    289a:	7013      	strb	r3, [r2, #0]
			if(status_update_count > flexible_count)
    289c:	4a64      	ldr	r2, [pc, #400]	; (2a30 <_tc_interrupt_handler+0x2e8>)
    289e:	7812      	ldrb	r2, [r2, #0]
    28a0:	429a      	cmp	r2, r3
    28a2:	d21c      	bcs.n	28de <_tc_interrupt_handler+0x196>
			{
				status_update_count = 0;
    28a4:	2200      	movs	r2, #0
    28a6:	4b61      	ldr	r3, [pc, #388]	; (2a2c <_tc_interrupt_handler+0x2e4>)
    28a8:	701a      	strb	r2, [r3, #0]
				if(battery_voltage < threshold_blink)
    28aa:	4b62      	ldr	r3, [pc, #392]	; (2a34 <_tc_interrupt_handler+0x2ec>)
    28ac:	781a      	ldrb	r2, [r3, #0]
    28ae:	b2d2      	uxtb	r2, r2
    28b0:	4b61      	ldr	r3, [pc, #388]	; (2a38 <_tc_interrupt_handler+0x2f0>)
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	429a      	cmp	r2, r3
    28b6:	d234      	bcs.n	2922 <_tc_interrupt_handler+0x1da>
				{
					flexible_count       =  MAX_STATUS_BLINK - ((threshold_blink- battery_voltage)*60/(80));
    28b8:	4a5e      	ldr	r2, [pc, #376]	; (2a34 <_tc_interrupt_handler+0x2ec>)
    28ba:	7812      	ldrb	r2, [r2, #0]
    28bc:	1a9b      	subs	r3, r3, r2
    28be:	0118      	lsls	r0, r3, #4
    28c0:	1a18      	subs	r0, r3, r0
    28c2:	0080      	lsls	r0, r0, #2
    28c4:	2150      	movs	r1, #80	; 0x50
    28c6:	4b5d      	ldr	r3, [pc, #372]	; (2a3c <_tc_interrupt_handler+0x2f4>)
    28c8:	4798      	blx	r3
    28ca:	3041      	adds	r0, #65	; 0x41
    28cc:	4b58      	ldr	r3, [pc, #352]	; (2a30 <_tc_interrupt_handler+0x2e8>)
    28ce:	7018      	strb	r0, [r3, #0]
					threshold_blink      =   MIN_BLINK_START - 5;//decrease the threshold
    28d0:	2273      	movs	r2, #115	; 0x73
    28d2:	4b59      	ldr	r3, [pc, #356]	; (2a38 <_tc_interrupt_handler+0x2f0>)
    28d4:	701a      	strb	r2, [r3, #0]
					*PORT_TOGGLE          =  STATUS_LED_PIN;
    28d6:	2280      	movs	r2, #128	; 0x80
    28d8:	05d2      	lsls	r2, r2, #23
    28da:	4b59      	ldr	r3, [pc, #356]	; (2a40 <_tc_interrupt_handler+0x2f8>)
    28dc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		
		
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    28de:	4b51      	ldr	r3, [pc, #324]	; (2a24 <_tc_interrupt_handler+0x2dc>)
    28e0:	781b      	ldrb	r3, [r3, #0]
    28e2:	b2db      	uxtb	r3, r3
    28e4:	2b02      	cmp	r3, #2
    28e6:	d905      	bls.n	28f4 <_tc_interrupt_handler+0x1ac>
		{
			serial_timeout = true;
    28e8:	2201      	movs	r2, #1
    28ea:	4b56      	ldr	r3, [pc, #344]	; (2a44 <_tc_interrupt_handler+0x2fc>)
    28ec:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    28ee:	2200      	movs	r2, #0
    28f0:	4b4c      	ldr	r3, [pc, #304]	; (2a24 <_tc_interrupt_handler+0x2dc>)
    28f2:	701a      	strb	r2, [r3, #0]
		}
		
		*PORT_CLEAR_REGISTER						  = CLEAR_ORB_LEDS;
    28f4:	4a54      	ldr	r2, [pc, #336]	; (2a48 <_tc_interrupt_handler+0x300>)
    28f6:	4b55      	ldr	r3, [pc, #340]	; (2a4c <_tc_interrupt_handler+0x304>)
    28f8:	601a      	str	r2, [r3, #0]
		if(update_compare_array == true)
    28fa:	4b55      	ldr	r3, [pc, #340]	; (2a50 <_tc_interrupt_handler+0x308>)
    28fc:	781b      	ldrb	r3, [r3, #0]
    28fe:	2b00      	cmp	r3, #0
    2900:	d04b      	beq.n	299a <_tc_interrupt_handler+0x252>
		{
			//B2 on 
			//*PORT_SET = B2_RGB;
			if(int_enable == true)
    2902:	4b54      	ldr	r3, [pc, #336]	; (2a54 <_tc_interrupt_handler+0x30c>)
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	2b00      	cmp	r3, #0
    2908:	d116      	bne.n	2938 <_tc_interrupt_handler+0x1f0>
			}
			
			//transfer_temp();
			//if(lock_temp_array == false)
			//{
				N_valid_compares = 0;
    290a:	2200      	movs	r2, #0
    290c:	4b3b      	ldr	r3, [pc, #236]	; (29fc <_tc_interrupt_handler+0x2b4>)
    290e:	701a      	strb	r2, [r3, #0]
    2910:	2300      	movs	r3, #0
			
				for(i=0;i<NO_OF_LEDS;i++)
				{
					//N_valid_compares++;
				
					if(temp_compare_array[i] != 255)
    2912:	4a51      	ldr	r2, [pc, #324]	; (2a58 <_tc_interrupt_handler+0x310>)
    2914:	4690      	mov	r8, r2
					{
						N_valid_compares++;
    2916:	4839      	ldr	r0, [pc, #228]	; (29fc <_tc_interrupt_handler+0x2b4>)
						//k++;
					}
				
					compare_array[i] = temp_compare_array[i] ;
    2918:	4694      	mov	ip, r2
    291a:	4f3c      	ldr	r7, [pc, #240]	; (2a0c <_tc_interrupt_handler+0x2c4>)
					pin_array[i]	 = temp_pin_array[i];
    291c:	4e4f      	ldr	r6, [pc, #316]	; (2a5c <_tc_interrupt_handler+0x314>)
    291e:	4d39      	ldr	r5, [pc, #228]	; (2a04 <_tc_interrupt_handler+0x2bc>)
    2920:	e02d      	b.n	297e <_tc_interrupt_handler+0x236>
					threshold_blink      =  MIN_BLINK_START;
    2922:	2278      	movs	r2, #120	; 0x78
    2924:	4b44      	ldr	r3, [pc, #272]	; (2a38 <_tc_interrupt_handler+0x2f0>)
    2926:	701a      	strb	r2, [r3, #0]
					flexible_count       =  MAX_STATUS_BLINK;//
    2928:	3a37      	subs	r2, #55	; 0x37
    292a:	4b41      	ldr	r3, [pc, #260]	; (2a30 <_tc_interrupt_handler+0x2e8>)
    292c:	701a      	strb	r2, [r3, #0]
					*PORT_SET			 =  STATUS_LED_PIN;
    292e:	2280      	movs	r2, #128	; 0x80
    2930:	05d2      	lsls	r2, r2, #23
    2932:	4b35      	ldr	r3, [pc, #212]	; (2a08 <_tc_interrupt_handler+0x2c0>)
    2934:	601a      	str	r2, [r3, #0]
    2936:	e7d2      	b.n	28de <_tc_interrupt_handler+0x196>
				int_enable = false;
    2938:	2200      	movs	r2, #0
    293a:	4b46      	ldr	r3, [pc, #280]	; (2a54 <_tc_interrupt_handler+0x30c>)
    293c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    293e:	6820      	ldr	r0, [r4, #0]
    2940:	4b47      	ldr	r3, [pc, #284]	; (2a60 <_tc_interrupt_handler+0x318>)
    2942:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2944:	4b47      	ldr	r3, [pc, #284]	; (2a64 <_tc_interrupt_handler+0x31c>)
    2946:	5c1b      	ldrb	r3, [r3, r0]
    2948:	221f      	movs	r2, #31
    294a:	401a      	ands	r2, r3
    294c:	2301      	movs	r3, #1
    294e:	4093      	lsls	r3, r2
    2950:	4a45      	ldr	r2, [pc, #276]	; (2a68 <_tc_interrupt_handler+0x320>)
    2952:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2954:	7e63      	ldrb	r3, [r4, #25]
    2956:	2210      	movs	r2, #16
    2958:	4313      	orrs	r3, r2
    295a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    295c:	2310      	movs	r3, #16
    295e:	6822      	ldr	r2, [r4, #0]
    2960:	7353      	strb	r3, [r2, #13]
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    2962:	3301      	adds	r3, #1
    2964:	6822      	ldr	r2, [r4, #0]
    2966:	7393      	strb	r3, [r2, #14]
    2968:	e7cf      	b.n	290a <_tc_interrupt_handler+0x1c2>
					compare_array[i] = temp_compare_array[i] ;
    296a:	4661      	mov	r1, ip
    296c:	5c89      	ldrb	r1, [r1, r2]
    296e:	b2c9      	uxtb	r1, r1
    2970:	54b9      	strb	r1, [r7, r2]
					pin_array[i]	 = temp_pin_array[i];
    2972:	5cb1      	ldrb	r1, [r6, r2]
    2974:	b2c9      	uxtb	r1, r1
    2976:	54a9      	strb	r1, [r5, r2]
    2978:	3301      	adds	r3, #1
				for(i=0;i<NO_OF_LEDS;i++)
    297a:	2b08      	cmp	r3, #8
    297c:	d00a      	beq.n	2994 <_tc_interrupt_handler+0x24c>
					if(temp_compare_array[i] != 255)
    297e:	001a      	movs	r2, r3
    2980:	4641      	mov	r1, r8
    2982:	5cc9      	ldrb	r1, [r1, r3]
    2984:	b2c9      	uxtb	r1, r1
    2986:	29ff      	cmp	r1, #255	; 0xff
    2988:	d0ef      	beq.n	296a <_tc_interrupt_handler+0x222>
						N_valid_compares++;
    298a:	7801      	ldrb	r1, [r0, #0]
    298c:	3101      	adds	r1, #1
    298e:	b2c9      	uxtb	r1, r1
    2990:	7001      	strb	r1, [r0, #0]
    2992:	e7ea      	b.n	296a <_tc_interrupt_handler+0x222>
				}
				
			//}
			update_compare_array = false;
    2994:	2200      	movs	r2, #0
    2996:	4b2e      	ldr	r3, [pc, #184]	; (2a50 <_tc_interrupt_handler+0x308>)
    2998:	701a      	strb	r2, [r3, #0]
			//*PORT_CLEAR_REGISTER = B2_RGB;
		}
		compare_array_ID = 0;
    299a:	2300      	movs	r3, #0
    299c:	4a16      	ldr	r2, [pc, #88]	; (29f8 <_tc_interrupt_handler+0x2b0>)
    299e:	7013      	strb	r3, [r2, #0]
		pin_array_ID  = 0;
    29a0:	4a17      	ldr	r2, [pc, #92]	; (2a00 <_tc_interrupt_handler+0x2b8>)
    29a2:	7013      	strb	r3, [r2, #0]
		
		compare_value = compare_array[0];
    29a4:	4b19      	ldr	r3, [pc, #100]	; (2a0c <_tc_interrupt_handler+0x2c4>)
    29a6:	7819      	ldrb	r1, [r3, #0]
    29a8:	b2c9      	uxtb	r1, r1
		if(compare_value != 255)
    29aa:	29ff      	cmp	r1, #255	; 0xff
    29ac:	d015      	beq.n	29da <_tc_interrupt_handler+0x292>
		{
			
			led_disable_flag = true;
			//Check sync busy
			while((*STATUS_REGISTER && MASK_SYNC) == true);
    29ae:	4a1a      	ldr	r2, [pc, #104]	; (2a18 <_tc_interrupt_handler+0x2d0>)
    29b0:	7813      	ldrb	r3, [r2, #0]
    29b2:	2b00      	cmp	r3, #0
    29b4:	d1fc      	bne.n	29b0 <_tc_interrupt_handler+0x268>
			//Update the compare value
			*COMPARE_REGISTER  = compare_value;
    29b6:	4b19      	ldr	r3, [pc, #100]	; (2a1c <_tc_interrupt_handler+0x2d4>)
    29b8:	7019      	strb	r1, [r3, #0]
		else
		{
			int_enable = true;
			tc_disable_callback(module, TC_CALLBACK_CC_CHANNEL0);
		}
		while((*STATUS_REGISTER && MASK_SYNC) == true);
    29ba:	4a17      	ldr	r2, [pc, #92]	; (2a18 <_tc_interrupt_handler+0x2d0>)
    29bc:	7813      	ldrb	r3, [r2, #0]
    29be:	2b00      	cmp	r3, #0
    29c0:	d1fc      	bne.n	29bc <_tc_interrupt_handler+0x274>
		*COUNT_REGISTER           =	0;
    29c2:	2200      	movs	r2, #0
    29c4:	4b16      	ldr	r3, [pc, #88]	; (2a20 <_tc_interrupt_handler+0x2d8>)
    29c6:	701a      	strb	r2, [r3, #0]
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    29c8:	6823      	ldr	r3, [r4, #0]
    29ca:	3201      	adds	r2, #1
    29cc:	739a      	strb	r2, [r3, #14]
		//(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		//module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	//}
	
}
    29ce:	bc3c      	pop	{r2, r3, r4, r5}
    29d0:	4690      	mov	r8, r2
    29d2:	4699      	mov	r9, r3
    29d4:	46a2      	mov	sl, r4
    29d6:	46ab      	mov	fp, r5
    29d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			int_enable = true;
    29da:	2201      	movs	r2, #1
    29dc:	4b1d      	ldr	r3, [pc, #116]	; (2a54 <_tc_interrupt_handler+0x30c>)
    29de:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    29e0:	320f      	adds	r2, #15
    29e2:	6823      	ldr	r3, [r4, #0]
    29e4:	731a      	strb	r2, [r3, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    29e6:	7e63      	ldrb	r3, [r4, #25]
    29e8:	4393      	bics	r3, r2
    29ea:	7663      	strb	r3, [r4, #25]
    29ec:	e7e5      	b.n	29ba <_tc_interrupt_handler+0x272>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	200003a8 	.word	0x200003a8
    29f4:	20000009 	.word	0x20000009
    29f8:	200001a8 	.word	0x200001a8
    29fc:	20000008 	.word	0x20000008
    2a00:	200001b4 	.word	0x200001b4
    2a04:	200001ac 	.word	0x200001ac
    2a08:	41004418 	.word	0x41004418
    2a0c:	200001a0 	.word	0x200001a0
    2a10:	200001aa 	.word	0x200001aa
    2a14:	200001a9 	.word	0x200001a9
    2a18:	4200180f 	.word	0x4200180f
    2a1c:	42001818 	.word	0x42001818
    2a20:	42001810 	.word	0x42001810
    2a24:	200001ec 	.word	0x200001ec
    2a28:	2000000e 	.word	0x2000000e
    2a2c:	200001b5 	.word	0x200001b5
    2a30:	2000000a 	.word	0x2000000a
    2a34:	200001e8 	.word	0x200001e8
    2a38:	2000000b 	.word	0x2000000b
    2a3c:	000036f5 	.word	0x000036f5
    2a40:	4100441c 	.word	0x4100441c
    2a44:	200001eb 	.word	0x200001eb
    2a48:	88038300 	.word	0x88038300
    2a4c:	41004414 	.word	0x41004414
    2a50:	200001f0 	.word	0x200001f0
    2a54:	200001ab 	.word	0x200001ab
    2a58:	20000404 	.word	0x20000404
    2a5c:	20000428 	.word	0x20000428
    2a60:	000024c1 	.word	0x000024c1
    2a64:	00003bc4 	.word	0x00003bc4
    2a68:	e000e100 	.word	0xe000e100

00002a6c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2a6c:	b510      	push	{r4, lr}
    2a6e:	2000      	movs	r0, #0
    2a70:	4b01      	ldr	r3, [pc, #4]	; (2a78 <TC1_Handler+0xc>)
    2a72:	4798      	blx	r3
    2a74:	bd10      	pop	{r4, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	00002749 	.word	0x00002749

00002a7c <TC2_Handler>:
    2a7c:	b510      	push	{r4, lr}
    2a7e:	2001      	movs	r0, #1
    2a80:	4b01      	ldr	r3, [pc, #4]	; (2a88 <TC2_Handler+0xc>)
    2a82:	4798      	blx	r3
    2a84:	bd10      	pop	{r4, pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	00002749 	.word	0x00002749

00002a8c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2a8c:	4770      	bx	lr
	...

00002a90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2a90:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2a92:	4b0a      	ldr	r3, [pc, #40]	; (2abc <_sercom_set_handler+0x2c>)
    2a94:	781b      	ldrb	r3, [r3, #0]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d10c      	bne.n	2ab4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2a9a:	4c09      	ldr	r4, [pc, #36]	; (2ac0 <_sercom_set_handler+0x30>)
    2a9c:	4d09      	ldr	r5, [pc, #36]	; (2ac4 <_sercom_set_handler+0x34>)
    2a9e:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2aa0:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <_sercom_set_handler+0x38>)
    2aa2:	2200      	movs	r2, #0
    2aa4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2aa6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    2aa8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2aaa:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    2aac:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    2aae:	3201      	adds	r2, #1
    2ab0:	4b02      	ldr	r3, [pc, #8]	; (2abc <_sercom_set_handler+0x2c>)
    2ab2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2ab4:	0080      	lsls	r0, r0, #2
    2ab6:	4b02      	ldr	r3, [pc, #8]	; (2ac0 <_sercom_set_handler+0x30>)
    2ab8:	50c1      	str	r1, [r0, r3]
}
    2aba:	bd30      	pop	{r4, r5, pc}
    2abc:	200001b6 	.word	0x200001b6
    2ac0:	200001b8 	.word	0x200001b8
    2ac4:	00002a8d 	.word	0x00002a8d
    2ac8:	200003b0 	.word	0x200003b0

00002acc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2acc:	b510      	push	{r4, lr}
    2ace:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2ad0:	ac01      	add	r4, sp, #4
    2ad2:	2309      	movs	r3, #9
    2ad4:	7023      	strb	r3, [r4, #0]
    2ad6:	3301      	adds	r3, #1
    2ad8:	7063      	strb	r3, [r4, #1]
    2ada:	3301      	adds	r3, #1
    2adc:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2ade:	4b02      	ldr	r3, [pc, #8]	; (2ae8 <_sercom_get_interrupt_vector+0x1c>)
    2ae0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2ae2:	5620      	ldrsb	r0, [r4, r0]
}
    2ae4:	b002      	add	sp, #8
    2ae6:	bd10      	pop	{r4, pc}
    2ae8:	00001889 	.word	0x00001889

00002aec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2aec:	b510      	push	{r4, lr}
    2aee:	4b02      	ldr	r3, [pc, #8]	; (2af8 <SERCOM0_Handler+0xc>)
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	2000      	movs	r0, #0
    2af4:	4798      	blx	r3
    2af6:	bd10      	pop	{r4, pc}
    2af8:	200001b8 	.word	0x200001b8

00002afc <SERCOM1_Handler>:
    2afc:	b510      	push	{r4, lr}
    2afe:	4b02      	ldr	r3, [pc, #8]	; (2b08 <SERCOM1_Handler+0xc>)
    2b00:	685b      	ldr	r3, [r3, #4]
    2b02:	2001      	movs	r0, #1
    2b04:	4798      	blx	r3
    2b06:	bd10      	pop	{r4, pc}
    2b08:	200001b8 	.word	0x200001b8

00002b0c <SERCOM2_Handler>:
    2b0c:	b510      	push	{r4, lr}
    2b0e:	4b02      	ldr	r3, [pc, #8]	; (2b18 <SERCOM2_Handler+0xc>)
    2b10:	689b      	ldr	r3, [r3, #8]
    2b12:	2002      	movs	r0, #2
    2b14:	4798      	blx	r3
    2b16:	bd10      	pop	{r4, pc}
    2b18:	200001b8 	.word	0x200001b8

00002b1c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2b1c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b1e:	2200      	movs	r2, #0
    2b20:	4b10      	ldr	r3, [pc, #64]	; (2b64 <EIC_Handler+0x48>)
    2b22:	701a      	strb	r2, [r3, #0]
    2b24:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2b26:	4910      	ldr	r1, [pc, #64]	; (2b68 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2b28:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2b2a:	4e10      	ldr	r6, [pc, #64]	; (2b6c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2b2c:	4c0d      	ldr	r4, [pc, #52]	; (2b64 <EIC_Handler+0x48>)
    2b2e:	e00a      	b.n	2b46 <EIC_Handler+0x2a>
		return eics[eic_index];
    2b30:	490d      	ldr	r1, [pc, #52]	; (2b68 <EIC_Handler+0x4c>)
    2b32:	e008      	b.n	2b46 <EIC_Handler+0x2a>
    2b34:	7823      	ldrb	r3, [r4, #0]
    2b36:	3301      	adds	r3, #1
    2b38:	b2db      	uxtb	r3, r3
    2b3a:	7023      	strb	r3, [r4, #0]
    2b3c:	2b0f      	cmp	r3, #15
    2b3e:	d810      	bhi.n	2b62 <EIC_Handler+0x46>
		return NULL;
    2b40:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2b42:	2b1f      	cmp	r3, #31
    2b44:	d9f4      	bls.n	2b30 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2b46:	0028      	movs	r0, r5
    2b48:	4018      	ands	r0, r3
    2b4a:	2201      	movs	r2, #1
    2b4c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2b4e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2b50:	4210      	tst	r0, r2
    2b52:	d0ef      	beq.n	2b34 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2b54:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2b56:	009b      	lsls	r3, r3, #2
    2b58:	599b      	ldr	r3, [r3, r6]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d0ea      	beq.n	2b34 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2b5e:	4798      	blx	r3
    2b60:	e7e8      	b.n	2b34 <EIC_Handler+0x18>
			}
		}
	}
}
    2b62:	bd70      	pop	{r4, r5, r6, pc}
    2b64:	200003bc 	.word	0x200003bc
    2b68:	40001800 	.word	0x40001800
    2b6c:	20000304 	.word	0x20000304

00002b70 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2b70:	b500      	push	{lr}
    2b72:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2b74:	ab01      	add	r3, sp, #4
    2b76:	2280      	movs	r2, #128	; 0x80
    2b78:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2b7a:	780a      	ldrb	r2, [r1, #0]
    2b7c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2b7e:	784a      	ldrb	r2, [r1, #1]
    2b80:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2b82:	788a      	ldrb	r2, [r1, #2]
    2b84:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2b86:	0019      	movs	r1, r3
    2b88:	4b01      	ldr	r3, [pc, #4]	; (2b90 <port_pin_set_config+0x20>)
    2b8a:	4798      	blx	r3
}
    2b8c:	b003      	add	sp, #12
    2b8e:	bd00      	pop	{pc}
    2b90:	000033f1 	.word	0x000033f1

00002b94 <tc_callback_PWM>:



void tc_callback_PWM(struct tc_module *const module_inst)
{
}
    2b94:	4770      	bx	lr

00002b96 <tc_callback_OF>:

void tc_callback_OF(struct tc_module *const module_inst)
{
}
    2b96:	4770      	bx	lr

00002b98 <increasing_sort_tag>:
{
    2b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b9a:	46c6      	mov	lr, r8
    2b9c:	b500      	push	{lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	2300      	movs	r3, #0
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
    2ba2:	4c23      	ldr	r4, [pc, #140]	; (2c30 <increasing_sort_tag+0x98>)
    2ba4:	a802      	add	r0, sp, #8
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
    2ba6:	4923      	ldr	r1, [pc, #140]	; (2c34 <increasing_sort_tag+0x9c>)
		temp_temp_pin_array[i] = temp_pin_array_2[i] ;
    2ba8:	5ce2      	ldrb	r2, [r4, r3]
    2baa:	54c2      	strb	r2, [r0, r3]
		temp_temp_compare_array[i] = temp_compare_array_2[i] ;
    2bac:	5cca      	ldrb	r2, [r1, r3]
    2bae:	466d      	mov	r5, sp
    2bb0:	54ea      	strb	r2, [r5, r3]
    2bb2:	3301      	adds	r3, #1
	for(i=0;i<NO_OF_LEDS;i++)
    2bb4:	2b08      	cmp	r3, #8
    2bb6:	d1f7      	bne.n	2ba8 <increasing_sort_tag+0x10>
    2bb8:	3b01      	subs	r3, #1
    2bba:	469c      	mov	ip, r3
				temp = temp_temp_pin_array[j];
    2bbc:	ad02      	add	r5, sp, #8
    2bbe:	e01a      	b.n	2bf6 <increasing_sort_tag+0x5e>
		for(j=0;j< N-i-1;j++)
    2bc0:	3301      	adds	r3, #1
    2bc2:	b2db      	uxtb	r3, r3
    2bc4:	001a      	movs	r2, r3
    2bc6:	42bb      	cmp	r3, r7
    2bc8:	da0e      	bge.n	2be8 <increasing_sort_tag+0x50>
			if(temp_temp_compare_array[j]>temp_temp_compare_array[j+1])
    2bca:	4669      	mov	r1, sp
    2bcc:	5c88      	ldrb	r0, [r1, r2]
    2bce:	1c51      	adds	r1, r2, #1
    2bd0:	466c      	mov	r4, sp
    2bd2:	5c64      	ldrb	r4, [r4, r1]
    2bd4:	42a0      	cmp	r0, r4
    2bd6:	d9f3      	bls.n	2bc0 <increasing_sort_tag+0x28>
				temp_temp_compare_array[j] = temp_temp_compare_array[j+1];
    2bd8:	466e      	mov	r6, sp
    2bda:	54b4      	strb	r4, [r6, r2]
				temp_temp_compare_array[j+1]= temp;
    2bdc:	5470      	strb	r0, [r6, r1]
				temp = temp_temp_pin_array[j];
    2bde:	5ca8      	ldrb	r0, [r5, r2]
				temp_temp_pin_array[j]   = temp_temp_pin_array[j+1];
    2be0:	5c6c      	ldrb	r4, [r5, r1]
    2be2:	54ac      	strb	r4, [r5, r2]
				temp_temp_pin_array[j+1] = temp;
    2be4:	5468      	strb	r0, [r5, r1]
    2be6:	e7eb      	b.n	2bc0 <increasing_sort_tag+0x28>
    2be8:	2301      	movs	r3, #1
    2bea:	425b      	negs	r3, r3
    2bec:	4698      	mov	r8, r3
    2bee:	44c4      	add	ip, r8
	for(i=0; i< N-1 ;i++)
    2bf0:	4663      	mov	r3, ip
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d005      	beq.n	2c02 <increasing_sort_tag+0x6a>
		for(j=0;j< N-i-1;j++)
    2bf6:	4667      	mov	r7, ip
    2bf8:	2200      	movs	r2, #0
    2bfa:	2300      	movs	r3, #0
    2bfc:	2f00      	cmp	r7, #0
    2bfe:	dce4      	bgt.n	2bca <increasing_sort_tag+0x32>
    2c00:	e7f2      	b.n	2be8 <increasing_sort_tag+0x50>
	lock_temp_array = true;
    2c02:	2201      	movs	r2, #1
    2c04:	4b0c      	ldr	r3, [pc, #48]	; (2c38 <increasing_sort_tag+0xa0>)
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	2300      	movs	r3, #0
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
    2c0a:	ac02      	add	r4, sp, #8
    2c0c:	480b      	ldr	r0, [pc, #44]	; (2c3c <increasing_sort_tag+0xa4>)
		temp_compare_array[i] = temp_temp_compare_array[i];
    2c0e:	490c      	ldr	r1, [pc, #48]	; (2c40 <increasing_sort_tag+0xa8>)
		temp_pin_array[i]     = temp_temp_pin_array[i]  ;
    2c10:	5d1a      	ldrb	r2, [r3, r4]
    2c12:	54c2      	strb	r2, [r0, r3]
		temp_compare_array[i] = temp_temp_compare_array[i];
    2c14:	466a      	mov	r2, sp
    2c16:	5c9a      	ldrb	r2, [r3, r2]
    2c18:	54ca      	strb	r2, [r1, r3]
    2c1a:	3301      	adds	r3, #1
	for(i=0;i<N;i++)
    2c1c:	2b08      	cmp	r3, #8
    2c1e:	d1f7      	bne.n	2c10 <increasing_sort_tag+0x78>
	lock_temp_array = false;
    2c20:	2200      	movs	r2, #0
    2c22:	4b05      	ldr	r3, [pc, #20]	; (2c38 <increasing_sort_tag+0xa0>)
    2c24:	701a      	strb	r2, [r3, #0]
}
    2c26:	b004      	add	sp, #16
    2c28:	bc04      	pop	{r2}
    2c2a:	4690      	mov	r8, r2
    2c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	20000420 	.word	0x20000420
    2c34:	20000444 	.word	0x20000444
    2c38:	200001ea 	.word	0x200001ea
    2c3c:	20000428 	.word	0x20000428
    2c40:	20000404 	.word	0x20000404

00002c44 <ORB_timer_init>:
{
    2c44:	b510      	push	{r4, lr}
    2c46:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2c48:	aa01      	add	r2, sp, #4
    2c4a:	2300      	movs	r3, #0
    2c4c:	2100      	movs	r1, #0
    2c4e:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2c50:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2c52:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2c54:	2000      	movs	r0, #0
    2c56:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2c58:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2c5a:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2c5c:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2c5e:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2c60:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2c62:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2c64:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2c66:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2c68:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2c6a:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2c6c:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2c6e:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2c70:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2c72:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    2c74:	23c0      	movs	r3, #192	; 0xc0
    2c76:	00db      	lsls	r3, r3, #3
    2c78:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    2c7a:	2304      	movs	r3, #4
    2c7c:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    2c7e:	21ff      	movs	r1, #255	; 0xff
    2c80:	3325      	adds	r3, #37	; 0x25
    2c82:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    2c84:	4c07      	ldr	r4, [pc, #28]	; (2ca4 <ORB_timer_init+0x60>)
    2c86:	4908      	ldr	r1, [pc, #32]	; (2ca8 <ORB_timer_init+0x64>)
    2c88:	0020      	movs	r0, r4
    2c8a:	4b08      	ldr	r3, [pc, #32]	; (2cac <ORB_timer_init+0x68>)
    2c8c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2c8e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2c90:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2c92:	b25b      	sxtb	r3, r3
    2c94:	2b00      	cmp	r3, #0
    2c96:	dbfb      	blt.n	2c90 <ORB_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2c98:	8813      	ldrh	r3, [r2, #0]
    2c9a:	2102      	movs	r1, #2
    2c9c:	430b      	orrs	r3, r1
    2c9e:	8013      	strh	r3, [r2, #0]
}
    2ca0:	b00e      	add	sp, #56	; 0x38
    2ca2:	bd10      	pop	{r4, pc}
    2ca4:	200003c0 	.word	0x200003c0
    2ca8:	42001800 	.word	0x42001800
    2cac:	000024e5 	.word	0x000024e5

00002cb0 <set_drivestrength_ORB>:
{
    2cb0:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB_LEDS,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    2cb2:	2201      	movs	r2, #1
    2cb4:	4902      	ldr	r1, [pc, #8]	; (2cc0 <set_drivestrength_ORB+0x10>)
    2cb6:	4803      	ldr	r0, [pc, #12]	; (2cc4 <set_drivestrength_ORB+0x14>)
    2cb8:	4b03      	ldr	r3, [pc, #12]	; (2cc8 <set_drivestrength_ORB+0x18>)
    2cba:	4798      	blx	r3
}
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	c8038300 	.word	0xc8038300
    2cc4:	41004400 	.word	0x41004400
    2cc8:	00003421 	.word	0x00003421

00002ccc <ORB_setup_pins>:
{
    2ccc:	b530      	push	{r4, r5, lr}
    2cce:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2cd0:	ac01      	add	r4, sp, #4
    2cd2:	2301      	movs	r3, #1
    2cd4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    2cd6:	2200      	movs	r2, #0
    2cd8:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2cda:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ORB_R1, &config_port_pin);
    2cdc:	0021      	movs	r1, r4
    2cde:	200f      	movs	r0, #15
    2ce0:	4d0e      	ldr	r5, [pc, #56]	; (2d1c <ORB_setup_pins+0x50>)
    2ce2:	47a8      	blx	r5
	port_pin_set_config(ORB_G1, &config_port_pin);
    2ce4:	0021      	movs	r1, r4
    2ce6:	2010      	movs	r0, #16
    2ce8:	47a8      	blx	r5
	port_pin_set_config(ORB_B1, &config_port_pin);
    2cea:	0021      	movs	r1, r4
    2cec:	2011      	movs	r0, #17
    2cee:	47a8      	blx	r5
	port_pin_set_config(ORB_R2, &config_port_pin);
    2cf0:	0021      	movs	r1, r4
    2cf2:	2008      	movs	r0, #8
    2cf4:	47a8      	blx	r5
	port_pin_set_config(ORB_G2, &config_port_pin);
    2cf6:	0021      	movs	r1, r4
    2cf8:	2009      	movs	r0, #9
    2cfa:	47a8      	blx	r5
	port_pin_set_config(ORB_B2, &config_port_pin);
    2cfc:	0021      	movs	r1, r4
    2cfe:	201b      	movs	r0, #27
    2d00:	47a8      	blx	r5
	port_pin_set_config(LED1, &config_port_pin);
    2d02:	0021      	movs	r1, r4
    2d04:	201f      	movs	r0, #31
    2d06:	47a8      	blx	r5
	port_pin_set_config(LED4, &config_port_pin);
    2d08:	0021      	movs	r1, r4
    2d0a:	201e      	movs	r0, #30
    2d0c:	47a8      	blx	r5
	set_drivestrength_ORB();
    2d0e:	4b04      	ldr	r3, [pc, #16]	; (2d20 <ORB_setup_pins+0x54>)
    2d10:	4798      	blx	r3
	port_base->OUTCLR.reg	   = CLEAR_ORB_LEDS;
    2d12:	4a04      	ldr	r2, [pc, #16]	; (2d24 <ORB_setup_pins+0x58>)
    2d14:	4b04      	ldr	r3, [pc, #16]	; (2d28 <ORB_setup_pins+0x5c>)
    2d16:	615a      	str	r2, [r3, #20]
}
    2d18:	b003      	add	sp, #12
    2d1a:	bd30      	pop	{r4, r5, pc}
    2d1c:	00002b71 	.word	0x00002b71
    2d20:	00002cb1 	.word	0x00002cb1
    2d24:	c8038300 	.word	0xc8038300
    2d28:	41004400 	.word	0x41004400

00002d2c <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    2d2c:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    2d2e:	4d05      	ldr	r5, [pc, #20]	; (2d44 <ORB_timer_callbacks_init+0x18>)
    2d30:	2200      	movs	r2, #0
    2d32:	4905      	ldr	r1, [pc, #20]	; (2d48 <ORB_timer_callbacks_init+0x1c>)
    2d34:	0028      	movs	r0, r5
    2d36:	4c05      	ldr	r4, [pc, #20]	; (2d4c <ORB_timer_callbacks_init+0x20>)
    2d38:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    2d3a:	2202      	movs	r2, #2
    2d3c:	4904      	ldr	r1, [pc, #16]	; (2d50 <ORB_timer_callbacks_init+0x24>)
    2d3e:	0028      	movs	r0, r5
    2d40:	47a0      	blx	r4
}
    2d42:	bd70      	pop	{r4, r5, r6, pc}
    2d44:	200003c0 	.word	0x200003c0
    2d48:	00002b97 	.word	0x00002b97
    2d4c:	00002715 	.word	0x00002715
    2d50:	00002b95 	.word	0x00002b95

00002d54 <enable_ORB>:

void enable_ORB()
{
    2d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d56:	46ce      	mov	lr, r9
    2d58:	4647      	mov	r7, r8
    2d5a:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d5c:	4c13      	ldr	r4, [pc, #76]	; (2dac <enable_ORB+0x58>)
    2d5e:	6820      	ldr	r0, [r4, #0]
    2d60:	4b13      	ldr	r3, [pc, #76]	; (2db0 <enable_ORB+0x5c>)
    2d62:	4699      	mov	r9, r3
    2d64:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d66:	4b13      	ldr	r3, [pc, #76]	; (2db4 <enable_ORB+0x60>)
    2d68:	4698      	mov	r8, r3
    2d6a:	5c1b      	ldrb	r3, [r3, r0]
    2d6c:	261f      	movs	r6, #31
    2d6e:	4033      	ands	r3, r6
    2d70:	2501      	movs	r5, #1
    2d72:	002a      	movs	r2, r5
    2d74:	409a      	lsls	r2, r3
    2d76:	4f10      	ldr	r7, [pc, #64]	; (2db8 <enable_ORB+0x64>)
    2d78:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2d7a:	7e63      	ldrb	r3, [r4, #25]
    2d7c:	2201      	movs	r2, #1
    2d7e:	4313      	orrs	r3, r2
    2d80:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2d82:	6823      	ldr	r3, [r4, #0]
    2d84:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d86:	0018      	movs	r0, r3
    2d88:	47c8      	blx	r9
    2d8a:	4643      	mov	r3, r8
    2d8c:	5c1b      	ldrb	r3, [r3, r0]
    2d8e:	401e      	ands	r6, r3
    2d90:	40b5      	lsls	r5, r6
    2d92:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2d94:	7e63      	ldrb	r3, [r4, #25]
    2d96:	2210      	movs	r2, #16
    2d98:	4313      	orrs	r3, r2
    2d9a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2d9c:	6823      	ldr	r3, [r4, #0]
    2d9e:	2210      	movs	r2, #16
    2da0:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    2da2:	bc0c      	pop	{r2, r3}
    2da4:	4690      	mov	r8, r2
    2da6:	4699      	mov	r9, r3
    2da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	200003c0 	.word	0x200003c0
    2db0:	000024c1 	.word	0x000024c1
    2db4:	00003bc8 	.word	0x00003bc8
    2db8:	e000e100 	.word	0xe000e100

00002dbc <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array_2[0]  = ORB_R1;
    2dbc:	4b08      	ldr	r3, [pc, #32]	; (2de0 <initializing_pin_array+0x24>)
    2dbe:	220f      	movs	r2, #15
    2dc0:	701a      	strb	r2, [r3, #0]
	temp_pin_array_2[1]  = ORB_G1;
    2dc2:	3201      	adds	r2, #1
    2dc4:	705a      	strb	r2, [r3, #1]
	temp_pin_array_2[2]  = ORB_B1;
    2dc6:	3201      	adds	r2, #1
    2dc8:	709a      	strb	r2, [r3, #2]
	temp_pin_array_2[3]  = ORB_R2;
    2dca:	3a09      	subs	r2, #9
    2dcc:	70da      	strb	r2, [r3, #3]
	temp_pin_array_2[4]  = ORB_G2;
    2dce:	3201      	adds	r2, #1
    2dd0:	711a      	strb	r2, [r3, #4]
	temp_pin_array_2[5]  = ORB_B2;
    2dd2:	3212      	adds	r2, #18
    2dd4:	715a      	strb	r2, [r3, #5]
	temp_pin_array_2[6]  = LED1;
    2dd6:	3204      	adds	r2, #4
    2dd8:	719a      	strb	r2, [r3, #6]
	temp_pin_array_2[7]  = LED4;
    2dda:	3a01      	subs	r2, #1
    2ddc:	71da      	strb	r2, [r3, #7]
}
    2dde:	4770      	bx	lr
    2de0:	20000420 	.word	0x20000420

00002de4 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 255;//Left  -- R
    2de4:	4b05      	ldr	r3, [pc, #20]	; (2dfc <initializing_compare_array+0x18>)
    2de6:	22ff      	movs	r2, #255	; 0xff
    2de8:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    2dea:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    2dec:	709a      	strb	r2, [r3, #2]
	
	temp_compare_array_2[3] = 255;//Right -- R
    2dee:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right -- G
    2df0:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    2df2:	715a      	strb	r2, [r3, #5]
	
	temp_compare_array_2[6] =  255;//LED1
    2df4:	719a      	strb	r2, [r3, #6]
	temp_compare_array_2[7] =  255;//LED4
    2df6:	71da      	strb	r2, [r3, #7]
}
    2df8:	4770      	bx	lr
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	20000444 	.word	0x20000444

00002e00 <ORB_init_array>:


void ORB_init_array()
{
    2e00:	b510      	push	{r4, lr}
	initializing_pin_array();
    2e02:	4b03      	ldr	r3, [pc, #12]	; (2e10 <ORB_init_array+0x10>)
    2e04:	4798      	blx	r3
	initializing_compare_array();
    2e06:	4b03      	ldr	r3, [pc, #12]	; (2e14 <ORB_init_array+0x14>)
    2e08:	4798      	blx	r3
	increasing_sort_tag();
    2e0a:	4b03      	ldr	r3, [pc, #12]	; (2e18 <ORB_init_array+0x18>)
    2e0c:	4798      	blx	r3
}
    2e0e:	bd10      	pop	{r4, pc}
    2e10:	00002dbd 	.word	0x00002dbd
    2e14:	00002de5 	.word	0x00002de5
    2e18:	00002b99 	.word	0x00002b99

00002e1c <ORB_init>:

void ORB_init()
{
    2e1c:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    2e1e:	4b04      	ldr	r3, [pc, #16]	; (2e30 <ORB_init+0x14>)
    2e20:	4798      	blx	r3
	ORB_setup_pins();
    2e22:	4b04      	ldr	r3, [pc, #16]	; (2e34 <ORB_init+0x18>)
    2e24:	4798      	blx	r3
	ORB_init_array();
    2e26:	4b04      	ldr	r3, [pc, #16]	; (2e38 <ORB_init+0x1c>)
    2e28:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    2e2a:	4b04      	ldr	r3, [pc, #16]	; (2e3c <ORB_init+0x20>)
    2e2c:	4798      	blx	r3

    2e2e:	bd10      	pop	{r4, pc}
    2e30:	00002c45 	.word	0x00002c45
    2e34:	00002ccd 	.word	0x00002ccd
    2e38:	00002e01 	.word	0x00002e01
    2e3c:	00002d2d 	.word	0x00002d2d

00002e40 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2e40:	4770      	bx	lr
	...

00002e44 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e44:	4b0c      	ldr	r3, [pc, #48]	; (2e78 <cpu_irq_enter_critical+0x34>)
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d106      	bne.n	2e5a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e4c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e50:	2b00      	cmp	r3, #0
    2e52:	d007      	beq.n	2e64 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e54:	2200      	movs	r2, #0
    2e56:	4b09      	ldr	r3, [pc, #36]	; (2e7c <cpu_irq_enter_critical+0x38>)
    2e58:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e5a:	4a07      	ldr	r2, [pc, #28]	; (2e78 <cpu_irq_enter_critical+0x34>)
    2e5c:	6813      	ldr	r3, [r2, #0]
    2e5e:	3301      	adds	r3, #1
    2e60:	6013      	str	r3, [r2, #0]
}
    2e62:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2e64:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2e66:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e6a:	2200      	movs	r2, #0
    2e6c:	4b04      	ldr	r3, [pc, #16]	; (2e80 <cpu_irq_enter_critical+0x3c>)
    2e6e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e70:	3201      	adds	r2, #1
    2e72:	4b02      	ldr	r3, [pc, #8]	; (2e7c <cpu_irq_enter_critical+0x38>)
    2e74:	701a      	strb	r2, [r3, #0]
    2e76:	e7f0      	b.n	2e5a <cpu_irq_enter_critical+0x16>
    2e78:	200001c4 	.word	0x200001c4
    2e7c:	200001c8 	.word	0x200001c8
    2e80:	2000000c 	.word	0x2000000c

00002e84 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e84:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <cpu_irq_leave_critical+0x24>)
    2e86:	681a      	ldr	r2, [r3, #0]
    2e88:	3a01      	subs	r2, #1
    2e8a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d109      	bne.n	2ea6 <cpu_irq_leave_critical+0x22>
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <cpu_irq_leave_critical+0x28>)
    2e94:	781b      	ldrb	r3, [r3, #0]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d005      	beq.n	2ea6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2e9a:	2201      	movs	r2, #1
    2e9c:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <cpu_irq_leave_critical+0x2c>)
    2e9e:	701a      	strb	r2, [r3, #0]
    2ea0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ea4:	b662      	cpsie	i
	}
}
    2ea6:	4770      	bx	lr
    2ea8:	200001c4 	.word	0x200001c4
    2eac:	200001c8 	.word	0x200001c8
    2eb0:	2000000c 	.word	0x2000000c

00002eb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2eb4:	b510      	push	{r4, lr}
	switch (clock_source) {
    2eb6:	2808      	cmp	r0, #8
    2eb8:	d803      	bhi.n	2ec2 <system_clock_source_get_hz+0xe>
    2eba:	0080      	lsls	r0, r0, #2
    2ebc:	4b1b      	ldr	r3, [pc, #108]	; (2f2c <system_clock_source_get_hz+0x78>)
    2ebe:	581b      	ldr	r3, [r3, r0]
    2ec0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2ec2:	2000      	movs	r0, #0
    2ec4:	e030      	b.n	2f28 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2ec6:	4b1a      	ldr	r3, [pc, #104]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2ec8:	6918      	ldr	r0, [r3, #16]
    2eca:	e02d      	b.n	2f28 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ecc:	4b19      	ldr	r3, [pc, #100]	; (2f34 <system_clock_source_get_hz+0x80>)
    2ece:	6a1b      	ldr	r3, [r3, #32]
    2ed0:	059b      	lsls	r3, r3, #22
    2ed2:	0f9b      	lsrs	r3, r3, #30
    2ed4:	4818      	ldr	r0, [pc, #96]	; (2f38 <system_clock_source_get_hz+0x84>)
    2ed6:	40d8      	lsrs	r0, r3
    2ed8:	e026      	b.n	2f28 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2eda:	4b15      	ldr	r3, [pc, #84]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2edc:	6958      	ldr	r0, [r3, #20]
    2ede:	e023      	b.n	2f28 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ee0:	4b13      	ldr	r3, [pc, #76]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2ee2:	681b      	ldr	r3, [r3, #0]
			return 0;
    2ee4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ee6:	079b      	lsls	r3, r3, #30
    2ee8:	d51e      	bpl.n	2f28 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2eea:	4912      	ldr	r1, [pc, #72]	; (2f34 <system_clock_source_get_hz+0x80>)
    2eec:	2210      	movs	r2, #16
    2eee:	68cb      	ldr	r3, [r1, #12]
    2ef0:	421a      	tst	r2, r3
    2ef2:	d0fc      	beq.n	2eee <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2ef4:	4b0e      	ldr	r3, [pc, #56]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	075b      	lsls	r3, r3, #29
    2efa:	d401      	bmi.n	2f00 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2efc:	480f      	ldr	r0, [pc, #60]	; (2f3c <system_clock_source_get_hz+0x88>)
    2efe:	e013      	b.n	2f28 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f00:	2000      	movs	r0, #0
    2f02:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <system_clock_source_get_hz+0x8c>)
    2f04:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2f06:	4b0a      	ldr	r3, [pc, #40]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2f08:	689b      	ldr	r3, [r3, #8]
    2f0a:	041b      	lsls	r3, r3, #16
    2f0c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f0e:	4358      	muls	r0, r3
    2f10:	e00a      	b.n	2f28 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f12:	2350      	movs	r3, #80	; 0x50
    2f14:	4a07      	ldr	r2, [pc, #28]	; (2f34 <system_clock_source_get_hz+0x80>)
    2f16:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2f18:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f1a:	075b      	lsls	r3, r3, #29
    2f1c:	d504      	bpl.n	2f28 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2f1e:	4b04      	ldr	r3, [pc, #16]	; (2f30 <system_clock_source_get_hz+0x7c>)
    2f20:	68d8      	ldr	r0, [r3, #12]
    2f22:	e001      	b.n	2f28 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2f24:	2080      	movs	r0, #128	; 0x80
    2f26:	0200      	lsls	r0, r0, #8
	}
}
    2f28:	bd10      	pop	{r4, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	00003bcc 	.word	0x00003bcc
    2f30:	200001cc 	.word	0x200001cc
    2f34:	40000800 	.word	0x40000800
    2f38:	007a1200 	.word	0x007a1200
    2f3c:	02dc6c00 	.word	0x02dc6c00
    2f40:	00003315 	.word	0x00003315

00002f44 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f44:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f46:	490c      	ldr	r1, [pc, #48]	; (2f78 <system_clock_source_osc8m_set_config+0x34>)
    2f48:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f4a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f4c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f4e:	7840      	ldrb	r0, [r0, #1]
    2f50:	2201      	movs	r2, #1
    2f52:	4010      	ands	r0, r2
    2f54:	0180      	lsls	r0, r0, #6
    2f56:	2640      	movs	r6, #64	; 0x40
    2f58:	43b3      	bics	r3, r6
    2f5a:	4303      	orrs	r3, r0
    2f5c:	402a      	ands	r2, r5
    2f5e:	01d2      	lsls	r2, r2, #7
    2f60:	2080      	movs	r0, #128	; 0x80
    2f62:	4383      	bics	r3, r0
    2f64:	4313      	orrs	r3, r2
    2f66:	2203      	movs	r2, #3
    2f68:	4022      	ands	r2, r4
    2f6a:	0212      	lsls	r2, r2, #8
    2f6c:	4803      	ldr	r0, [pc, #12]	; (2f7c <system_clock_source_osc8m_set_config+0x38>)
    2f6e:	4003      	ands	r3, r0
    2f70:	4313      	orrs	r3, r2
    2f72:	620b      	str	r3, [r1, #32]
}
    2f74:	bd70      	pop	{r4, r5, r6, pc}
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	40000800 	.word	0x40000800
    2f7c:	fffffcff 	.word	0xfffffcff

00002f80 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f80:	2808      	cmp	r0, #8
    2f82:	d803      	bhi.n	2f8c <system_clock_source_enable+0xc>
    2f84:	0080      	lsls	r0, r0, #2
    2f86:	4b25      	ldr	r3, [pc, #148]	; (301c <system_clock_source_enable+0x9c>)
    2f88:	581b      	ldr	r3, [r3, r0]
    2f8a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f8c:	2017      	movs	r0, #23
    2f8e:	e044      	b.n	301a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f90:	4a23      	ldr	r2, [pc, #140]	; (3020 <system_clock_source_enable+0xa0>)
    2f92:	6a13      	ldr	r3, [r2, #32]
    2f94:	2102      	movs	r1, #2
    2f96:	430b      	orrs	r3, r1
    2f98:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f9a:	2000      	movs	r0, #0
    2f9c:	e03d      	b.n	301a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f9e:	4a20      	ldr	r2, [pc, #128]	; (3020 <system_clock_source_enable+0xa0>)
    2fa0:	6993      	ldr	r3, [r2, #24]
    2fa2:	2102      	movs	r1, #2
    2fa4:	430b      	orrs	r3, r1
    2fa6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2fa8:	2000      	movs	r0, #0
		break;
    2faa:	e036      	b.n	301a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2fac:	4a1c      	ldr	r2, [pc, #112]	; (3020 <system_clock_source_enable+0xa0>)
    2fae:	8a13      	ldrh	r3, [r2, #16]
    2fb0:	2102      	movs	r1, #2
    2fb2:	430b      	orrs	r3, r1
    2fb4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2fb6:	2000      	movs	r0, #0
		break;
    2fb8:	e02f      	b.n	301a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2fba:	4a19      	ldr	r2, [pc, #100]	; (3020 <system_clock_source_enable+0xa0>)
    2fbc:	8a93      	ldrh	r3, [r2, #20]
    2fbe:	2102      	movs	r1, #2
    2fc0:	430b      	orrs	r3, r1
    2fc2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2fc4:	2000      	movs	r0, #0
		break;
    2fc6:	e028      	b.n	301a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2fc8:	4916      	ldr	r1, [pc, #88]	; (3024 <system_clock_source_enable+0xa4>)
    2fca:	680b      	ldr	r3, [r1, #0]
    2fcc:	2202      	movs	r2, #2
    2fce:	4313      	orrs	r3, r2
    2fd0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2fd2:	4b13      	ldr	r3, [pc, #76]	; (3020 <system_clock_source_enable+0xa0>)
    2fd4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fd6:	0019      	movs	r1, r3
    2fd8:	320e      	adds	r2, #14
    2fda:	68cb      	ldr	r3, [r1, #12]
    2fdc:	421a      	tst	r2, r3
    2fde:	d0fc      	beq.n	2fda <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2fe0:	4a10      	ldr	r2, [pc, #64]	; (3024 <system_clock_source_enable+0xa4>)
    2fe2:	6891      	ldr	r1, [r2, #8]
    2fe4:	4b0e      	ldr	r3, [pc, #56]	; (3020 <system_clock_source_enable+0xa0>)
    2fe6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2fe8:	6852      	ldr	r2, [r2, #4]
    2fea:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2fec:	2200      	movs	r2, #0
    2fee:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ff0:	0019      	movs	r1, r3
    2ff2:	3210      	adds	r2, #16
    2ff4:	68cb      	ldr	r3, [r1, #12]
    2ff6:	421a      	tst	r2, r3
    2ff8:	d0fc      	beq.n	2ff4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2ffa:	4b0a      	ldr	r3, [pc, #40]	; (3024 <system_clock_source_enable+0xa4>)
    2ffc:	681b      	ldr	r3, [r3, #0]
    2ffe:	b29b      	uxth	r3, r3
    3000:	4a07      	ldr	r2, [pc, #28]	; (3020 <system_clock_source_enable+0xa0>)
    3002:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3004:	2000      	movs	r0, #0
    3006:	e008      	b.n	301a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3008:	4905      	ldr	r1, [pc, #20]	; (3020 <system_clock_source_enable+0xa0>)
    300a:	2244      	movs	r2, #68	; 0x44
    300c:	5c8b      	ldrb	r3, [r1, r2]
    300e:	2002      	movs	r0, #2
    3010:	4303      	orrs	r3, r0
    3012:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3014:	2000      	movs	r0, #0
		break;
    3016:	e000      	b.n	301a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3018:	2000      	movs	r0, #0
}
    301a:	4770      	bx	lr
    301c:	00003bf0 	.word	0x00003bf0
    3020:	40000800 	.word	0x40000800
    3024:	200001cc 	.word	0x200001cc

00003028 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3028:	b530      	push	{r4, r5, lr}
    302a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    302c:	22c2      	movs	r2, #194	; 0xc2
    302e:	00d2      	lsls	r2, r2, #3
    3030:	4b1a      	ldr	r3, [pc, #104]	; (309c <system_clock_init+0x74>)
    3032:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3034:	4a1a      	ldr	r2, [pc, #104]	; (30a0 <system_clock_init+0x78>)
    3036:	6853      	ldr	r3, [r2, #4]
    3038:	211e      	movs	r1, #30
    303a:	438b      	bics	r3, r1
    303c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    303e:	2301      	movs	r3, #1
    3040:	466a      	mov	r2, sp
    3042:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3044:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3046:	4d17      	ldr	r5, [pc, #92]	; (30a4 <system_clock_init+0x7c>)
    3048:	b2e0      	uxtb	r0, r4
    304a:	4669      	mov	r1, sp
    304c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    304e:	3401      	adds	r4, #1
    3050:	2c18      	cmp	r4, #24
    3052:	d1f9      	bne.n	3048 <system_clock_init+0x20>
	config->run_in_standby  = false;
    3054:	a803      	add	r0, sp, #12
    3056:	2400      	movs	r4, #0
    3058:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    305a:	2501      	movs	r5, #1
    305c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    305e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3060:	4b11      	ldr	r3, [pc, #68]	; (30a8 <system_clock_init+0x80>)
    3062:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3064:	2006      	movs	r0, #6
    3066:	4b11      	ldr	r3, [pc, #68]	; (30ac <system_clock_init+0x84>)
    3068:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    306a:	4b11      	ldr	r3, [pc, #68]	; (30b0 <system_clock_init+0x88>)
    306c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    306e:	4b11      	ldr	r3, [pc, #68]	; (30b4 <system_clock_init+0x8c>)
    3070:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3072:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3074:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3076:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    3078:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    307a:	466b      	mov	r3, sp
    307c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    307e:	2306      	movs	r3, #6
    3080:	466a      	mov	r2, sp
    3082:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    3084:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    3086:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3088:	4669      	mov	r1, sp
    308a:	2000      	movs	r0, #0
    308c:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <system_clock_init+0x90>)
    308e:	4798      	blx	r3
    3090:	2000      	movs	r0, #0
    3092:	4b0a      	ldr	r3, [pc, #40]	; (30bc <system_clock_init+0x94>)
    3094:	4798      	blx	r3
#endif
}
    3096:	b005      	add	sp, #20
    3098:	bd30      	pop	{r4, r5, pc}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	40000800 	.word	0x40000800
    30a0:	41004000 	.word	0x41004000
    30a4:	000032f9 	.word	0x000032f9
    30a8:	00002f45 	.word	0x00002f45
    30ac:	00002f81 	.word	0x00002f81
    30b0:	000030c1 	.word	0x000030c1
    30b4:	40000400 	.word	0x40000400
    30b8:	000030e5 	.word	0x000030e5
    30bc:	0000319d 	.word	0x0000319d

000030c0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    30c0:	4a06      	ldr	r2, [pc, #24]	; (30dc <system_gclk_init+0x1c>)
    30c2:	6993      	ldr	r3, [r2, #24]
    30c4:	2108      	movs	r1, #8
    30c6:	430b      	orrs	r3, r1
    30c8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    30ca:	2201      	movs	r2, #1
    30cc:	4b04      	ldr	r3, [pc, #16]	; (30e0 <system_gclk_init+0x20>)
    30ce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    30d0:	0019      	movs	r1, r3
    30d2:	780b      	ldrb	r3, [r1, #0]
    30d4:	4213      	tst	r3, r2
    30d6:	d1fc      	bne.n	30d2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    30d8:	4770      	bx	lr
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	40000400 	.word	0x40000400
    30e0:	40000c00 	.word	0x40000c00

000030e4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    30e8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    30ea:	780d      	ldrb	r5, [r1, #0]
    30ec:	022d      	lsls	r5, r5, #8
    30ee:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    30f0:	784b      	ldrb	r3, [r1, #1]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d002      	beq.n	30fc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    30f6:	2380      	movs	r3, #128	; 0x80
    30f8:	02db      	lsls	r3, r3, #11
    30fa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    30fc:	7a4b      	ldrb	r3, [r1, #9]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3102:	2380      	movs	r3, #128	; 0x80
    3104:	031b      	lsls	r3, r3, #12
    3106:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3108:	6848      	ldr	r0, [r1, #4]
    310a:	2801      	cmp	r0, #1
    310c:	d910      	bls.n	3130 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    310e:	1e43      	subs	r3, r0, #1
    3110:	4218      	tst	r0, r3
    3112:	d134      	bne.n	317e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3114:	2802      	cmp	r0, #2
    3116:	d930      	bls.n	317a <system_gclk_gen_set_config+0x96>
    3118:	2302      	movs	r3, #2
    311a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    311c:	3201      	adds	r2, #1
						mask <<= 1) {
    311e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3120:	4298      	cmp	r0, r3
    3122:	d8fb      	bhi.n	311c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3124:	0212      	lsls	r2, r2, #8
    3126:	4332      	orrs	r2, r6
    3128:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    312a:	2380      	movs	r3, #128	; 0x80
    312c:	035b      	lsls	r3, r3, #13
    312e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3130:	7a0b      	ldrb	r3, [r1, #8]
    3132:	2b00      	cmp	r3, #0
    3134:	d002      	beq.n	313c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3136:	2380      	movs	r3, #128	; 0x80
    3138:	039b      	lsls	r3, r3, #14
    313a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    313c:	4a13      	ldr	r2, [pc, #76]	; (318c <system_gclk_gen_set_config+0xa8>)
    313e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3140:	b25b      	sxtb	r3, r3
    3142:	2b00      	cmp	r3, #0
    3144:	dbfb      	blt.n	313e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3146:	4b12      	ldr	r3, [pc, #72]	; (3190 <system_gclk_gen_set_config+0xac>)
    3148:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    314a:	4b12      	ldr	r3, [pc, #72]	; (3194 <system_gclk_gen_set_config+0xb0>)
    314c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    314e:	4a0f      	ldr	r2, [pc, #60]	; (318c <system_gclk_gen_set_config+0xa8>)
    3150:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3152:	b25b      	sxtb	r3, r3
    3154:	2b00      	cmp	r3, #0
    3156:	dbfb      	blt.n	3150 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3158:	4b0c      	ldr	r3, [pc, #48]	; (318c <system_gclk_gen_set_config+0xa8>)
    315a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    315c:	001a      	movs	r2, r3
    315e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3160:	b25b      	sxtb	r3, r3
    3162:	2b00      	cmp	r3, #0
    3164:	dbfb      	blt.n	315e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3166:	4a09      	ldr	r2, [pc, #36]	; (318c <system_gclk_gen_set_config+0xa8>)
    3168:	6853      	ldr	r3, [r2, #4]
    316a:	2180      	movs	r1, #128	; 0x80
    316c:	0249      	lsls	r1, r1, #9
    316e:	400b      	ands	r3, r1
    3170:	431d      	orrs	r5, r3
    3172:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3174:	4b08      	ldr	r3, [pc, #32]	; (3198 <system_gclk_gen_set_config+0xb4>)
    3176:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3178:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    317a:	2200      	movs	r2, #0
    317c:	e7d2      	b.n	3124 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    317e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3180:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3182:	2380      	movs	r3, #128	; 0x80
    3184:	029b      	lsls	r3, r3, #10
    3186:	431d      	orrs	r5, r3
    3188:	e7d2      	b.n	3130 <system_gclk_gen_set_config+0x4c>
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	40000c00 	.word	0x40000c00
    3190:	00002e45 	.word	0x00002e45
    3194:	40000c08 	.word	0x40000c08
    3198:	00002e85 	.word	0x00002e85

0000319c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    319c:	b510      	push	{r4, lr}
    319e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31a0:	4a0b      	ldr	r2, [pc, #44]	; (31d0 <system_gclk_gen_enable+0x34>)
    31a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31a4:	b25b      	sxtb	r3, r3
    31a6:	2b00      	cmp	r3, #0
    31a8:	dbfb      	blt.n	31a2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    31aa:	4b0a      	ldr	r3, [pc, #40]	; (31d4 <system_gclk_gen_enable+0x38>)
    31ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31ae:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <system_gclk_gen_enable+0x3c>)
    31b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31b2:	4a07      	ldr	r2, [pc, #28]	; (31d0 <system_gclk_gen_enable+0x34>)
    31b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31b6:	b25b      	sxtb	r3, r3
    31b8:	2b00      	cmp	r3, #0
    31ba:	dbfb      	blt.n	31b4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    31bc:	4a04      	ldr	r2, [pc, #16]	; (31d0 <system_gclk_gen_enable+0x34>)
    31be:	6851      	ldr	r1, [r2, #4]
    31c0:	2380      	movs	r3, #128	; 0x80
    31c2:	025b      	lsls	r3, r3, #9
    31c4:	430b      	orrs	r3, r1
    31c6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    31c8:	4b04      	ldr	r3, [pc, #16]	; (31dc <system_gclk_gen_enable+0x40>)
    31ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31cc:	bd10      	pop	{r4, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	40000c00 	.word	0x40000c00
    31d4:	00002e45 	.word	0x00002e45
    31d8:	40000c04 	.word	0x40000c04
    31dc:	00002e85 	.word	0x00002e85

000031e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    31e0:	b570      	push	{r4, r5, r6, lr}
    31e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31e4:	4a1a      	ldr	r2, [pc, #104]	; (3250 <system_gclk_gen_get_hz+0x70>)
    31e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31e8:	b25b      	sxtb	r3, r3
    31ea:	2b00      	cmp	r3, #0
    31ec:	dbfb      	blt.n	31e6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    31ee:	4b19      	ldr	r3, [pc, #100]	; (3254 <system_gclk_gen_get_hz+0x74>)
    31f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    31f2:	4b19      	ldr	r3, [pc, #100]	; (3258 <system_gclk_gen_get_hz+0x78>)
    31f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31f6:	4a16      	ldr	r2, [pc, #88]	; (3250 <system_gclk_gen_get_hz+0x70>)
    31f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31fa:	b25b      	sxtb	r3, r3
    31fc:	2b00      	cmp	r3, #0
    31fe:	dbfb      	blt.n	31f8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3200:	4e13      	ldr	r6, [pc, #76]	; (3250 <system_gclk_gen_get_hz+0x70>)
    3202:	6870      	ldr	r0, [r6, #4]
    3204:	04c0      	lsls	r0, r0, #19
    3206:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3208:	4b14      	ldr	r3, [pc, #80]	; (325c <system_gclk_gen_get_hz+0x7c>)
    320a:	4798      	blx	r3
    320c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    320e:	4b12      	ldr	r3, [pc, #72]	; (3258 <system_gclk_gen_get_hz+0x78>)
    3210:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3212:	6876      	ldr	r6, [r6, #4]
    3214:	02f6      	lsls	r6, r6, #11
    3216:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3218:	4b11      	ldr	r3, [pc, #68]	; (3260 <system_gclk_gen_get_hz+0x80>)
    321a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    321c:	4a0c      	ldr	r2, [pc, #48]	; (3250 <system_gclk_gen_get_hz+0x70>)
    321e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3220:	b25b      	sxtb	r3, r3
    3222:	2b00      	cmp	r3, #0
    3224:	dbfb      	blt.n	321e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3226:	4b0a      	ldr	r3, [pc, #40]	; (3250 <system_gclk_gen_get_hz+0x70>)
    3228:	689c      	ldr	r4, [r3, #8]
    322a:	0224      	lsls	r4, r4, #8
    322c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    322e:	4b0d      	ldr	r3, [pc, #52]	; (3264 <system_gclk_gen_get_hz+0x84>)
    3230:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3232:	2e00      	cmp	r6, #0
    3234:	d107      	bne.n	3246 <system_gclk_gen_get_hz+0x66>
    3236:	2c01      	cmp	r4, #1
    3238:	d907      	bls.n	324a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    323a:	0021      	movs	r1, r4
    323c:	0028      	movs	r0, r5
    323e:	4b0a      	ldr	r3, [pc, #40]	; (3268 <system_gclk_gen_get_hz+0x88>)
    3240:	4798      	blx	r3
    3242:	0005      	movs	r5, r0
    3244:	e001      	b.n	324a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3246:	3401      	adds	r4, #1
    3248:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    324a:	0028      	movs	r0, r5
    324c:	bd70      	pop	{r4, r5, r6, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	40000c00 	.word	0x40000c00
    3254:	00002e45 	.word	0x00002e45
    3258:	40000c04 	.word	0x40000c04
    325c:	00002eb5 	.word	0x00002eb5
    3260:	40000c08 	.word	0x40000c08
    3264:	00002e85 	.word	0x00002e85
    3268:	000035e1 	.word	0x000035e1

0000326c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    326c:	b510      	push	{r4, lr}
    326e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3270:	4b06      	ldr	r3, [pc, #24]	; (328c <system_gclk_chan_enable+0x20>)
    3272:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <system_gclk_chan_enable+0x24>)
    3276:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3278:	4a06      	ldr	r2, [pc, #24]	; (3294 <system_gclk_chan_enable+0x28>)
    327a:	8853      	ldrh	r3, [r2, #2]
    327c:	2180      	movs	r1, #128	; 0x80
    327e:	01c9      	lsls	r1, r1, #7
    3280:	430b      	orrs	r3, r1
    3282:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3284:	4b04      	ldr	r3, [pc, #16]	; (3298 <system_gclk_chan_enable+0x2c>)
    3286:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3288:	bd10      	pop	{r4, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	00002e45 	.word	0x00002e45
    3290:	40000c02 	.word	0x40000c02
    3294:	40000c00 	.word	0x40000c00
    3298:	00002e85 	.word	0x00002e85

0000329c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    329c:	b510      	push	{r4, lr}
    329e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32a0:	4b0f      	ldr	r3, [pc, #60]	; (32e0 <system_gclk_chan_disable+0x44>)
    32a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32a4:	4b0f      	ldr	r3, [pc, #60]	; (32e4 <system_gclk_chan_disable+0x48>)
    32a6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    32a8:	4a0f      	ldr	r2, [pc, #60]	; (32e8 <system_gclk_chan_disable+0x4c>)
    32aa:	8853      	ldrh	r3, [r2, #2]
    32ac:	051b      	lsls	r3, r3, #20
    32ae:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    32b0:	8853      	ldrh	r3, [r2, #2]
    32b2:	490e      	ldr	r1, [pc, #56]	; (32ec <system_gclk_chan_disable+0x50>)
    32b4:	400b      	ands	r3, r1
    32b6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    32b8:	8853      	ldrh	r3, [r2, #2]
    32ba:	490d      	ldr	r1, [pc, #52]	; (32f0 <system_gclk_chan_disable+0x54>)
    32bc:	400b      	ands	r3, r1
    32be:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    32c0:	0011      	movs	r1, r2
    32c2:	2280      	movs	r2, #128	; 0x80
    32c4:	01d2      	lsls	r2, r2, #7
    32c6:	884b      	ldrh	r3, [r1, #2]
    32c8:	4213      	tst	r3, r2
    32ca:	d1fc      	bne.n	32c6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    32cc:	4906      	ldr	r1, [pc, #24]	; (32e8 <system_gclk_chan_disable+0x4c>)
    32ce:	884a      	ldrh	r2, [r1, #2]
    32d0:	0203      	lsls	r3, r0, #8
    32d2:	4806      	ldr	r0, [pc, #24]	; (32ec <system_gclk_chan_disable+0x50>)
    32d4:	4002      	ands	r2, r0
    32d6:	4313      	orrs	r3, r2
    32d8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    32da:	4b06      	ldr	r3, [pc, #24]	; (32f4 <system_gclk_chan_disable+0x58>)
    32dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32de:	bd10      	pop	{r4, pc}
    32e0:	00002e45 	.word	0x00002e45
    32e4:	40000c02 	.word	0x40000c02
    32e8:	40000c00 	.word	0x40000c00
    32ec:	fffff0ff 	.word	0xfffff0ff
    32f0:	ffffbfff 	.word	0xffffbfff
    32f4:	00002e85 	.word	0x00002e85

000032f8 <system_gclk_chan_set_config>:
{
    32f8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    32fa:	780c      	ldrb	r4, [r1, #0]
    32fc:	0224      	lsls	r4, r4, #8
    32fe:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3300:	4b02      	ldr	r3, [pc, #8]	; (330c <system_gclk_chan_set_config+0x14>)
    3302:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3304:	b2a4      	uxth	r4, r4
    3306:	4b02      	ldr	r3, [pc, #8]	; (3310 <system_gclk_chan_set_config+0x18>)
    3308:	805c      	strh	r4, [r3, #2]
}
    330a:	bd10      	pop	{r4, pc}
    330c:	0000329d 	.word	0x0000329d
    3310:	40000c00 	.word	0x40000c00

00003314 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3314:	b510      	push	{r4, lr}
    3316:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3318:	4b06      	ldr	r3, [pc, #24]	; (3334 <system_gclk_chan_get_hz+0x20>)
    331a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    331c:	4b06      	ldr	r3, [pc, #24]	; (3338 <system_gclk_chan_get_hz+0x24>)
    331e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3320:	4b06      	ldr	r3, [pc, #24]	; (333c <system_gclk_chan_get_hz+0x28>)
    3322:	885c      	ldrh	r4, [r3, #2]
    3324:	0524      	lsls	r4, r4, #20
    3326:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3328:	4b05      	ldr	r3, [pc, #20]	; (3340 <system_gclk_chan_get_hz+0x2c>)
    332a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    332c:	0020      	movs	r0, r4
    332e:	4b05      	ldr	r3, [pc, #20]	; (3344 <system_gclk_chan_get_hz+0x30>)
    3330:	4798      	blx	r3
}
    3332:	bd10      	pop	{r4, pc}
    3334:	00002e45 	.word	0x00002e45
    3338:	40000c02 	.word	0x40000c02
    333c:	40000c00 	.word	0x40000c00
    3340:	00002e85 	.word	0x00002e85
    3344:	000031e1 	.word	0x000031e1

00003348 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3348:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    334a:	78d3      	ldrb	r3, [r2, #3]
    334c:	2b00      	cmp	r3, #0
    334e:	d135      	bne.n	33bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3350:	7813      	ldrb	r3, [r2, #0]
    3352:	2b80      	cmp	r3, #128	; 0x80
    3354:	d029      	beq.n	33aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3356:	061b      	lsls	r3, r3, #24
    3358:	2480      	movs	r4, #128	; 0x80
    335a:	0264      	lsls	r4, r4, #9
    335c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    335e:	7854      	ldrb	r4, [r2, #1]
    3360:	2502      	movs	r5, #2
    3362:	43ac      	bics	r4, r5
    3364:	d106      	bne.n	3374 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3366:	7894      	ldrb	r4, [r2, #2]
    3368:	2c00      	cmp	r4, #0
    336a:	d120      	bne.n	33ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    336c:	2480      	movs	r4, #128	; 0x80
    336e:	02a4      	lsls	r4, r4, #10
    3370:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3372:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3374:	7854      	ldrb	r4, [r2, #1]
    3376:	3c01      	subs	r4, #1
    3378:	2c01      	cmp	r4, #1
    337a:	d91c      	bls.n	33b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    337c:	040d      	lsls	r5, r1, #16
    337e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3380:	24a0      	movs	r4, #160	; 0xa0
    3382:	05e4      	lsls	r4, r4, #23
    3384:	432c      	orrs	r4, r5
    3386:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3388:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    338a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    338c:	24d0      	movs	r4, #208	; 0xd0
    338e:	0624      	lsls	r4, r4, #24
    3390:	432c      	orrs	r4, r5
    3392:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3394:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3396:	78d4      	ldrb	r4, [r2, #3]
    3398:	2c00      	cmp	r4, #0
    339a:	d122      	bne.n	33e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    339c:	035b      	lsls	r3, r3, #13
    339e:	d51c      	bpl.n	33da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33a0:	7893      	ldrb	r3, [r2, #2]
    33a2:	2b01      	cmp	r3, #1
    33a4:	d01e      	beq.n	33e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    33a6:	6141      	str	r1, [r0, #20]
    33a8:	e017      	b.n	33da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    33aa:	2300      	movs	r3, #0
    33ac:	e7d7      	b.n	335e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    33ae:	24c0      	movs	r4, #192	; 0xc0
    33b0:	02e4      	lsls	r4, r4, #11
    33b2:	4323      	orrs	r3, r4
    33b4:	e7dd      	b.n	3372 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    33b6:	4c0d      	ldr	r4, [pc, #52]	; (33ec <_system_pinmux_config+0xa4>)
    33b8:	4023      	ands	r3, r4
    33ba:	e7df      	b.n	337c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    33bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33be:	040c      	lsls	r4, r1, #16
    33c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33c2:	23a0      	movs	r3, #160	; 0xa0
    33c4:	05db      	lsls	r3, r3, #23
    33c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33cc:	23d0      	movs	r3, #208	; 0xd0
    33ce:	061b      	lsls	r3, r3, #24
    33d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    33d4:	78d3      	ldrb	r3, [r2, #3]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d103      	bne.n	33e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33da:	7853      	ldrb	r3, [r2, #1]
    33dc:	3b01      	subs	r3, #1
    33de:	2b01      	cmp	r3, #1
    33e0:	d902      	bls.n	33e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    33e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    33e4:	6181      	str	r1, [r0, #24]
    33e6:	e7f8      	b.n	33da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    33e8:	6081      	str	r1, [r0, #8]
}
    33ea:	e7fa      	b.n	33e2 <_system_pinmux_config+0x9a>
    33ec:	fffbffff 	.word	0xfffbffff

000033f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    33f0:	b510      	push	{r4, lr}
    33f2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    33f4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    33f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    33f8:	2900      	cmp	r1, #0
    33fa:	d104      	bne.n	3406 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    33fc:	0943      	lsrs	r3, r0, #5
    33fe:	01db      	lsls	r3, r3, #7
    3400:	4905      	ldr	r1, [pc, #20]	; (3418 <system_pinmux_pin_set_config+0x28>)
    3402:	468c      	mov	ip, r1
    3404:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3406:	241f      	movs	r4, #31
    3408:	4020      	ands	r0, r4
    340a:	2101      	movs	r1, #1
    340c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    340e:	0018      	movs	r0, r3
    3410:	4b02      	ldr	r3, [pc, #8]	; (341c <system_pinmux_pin_set_config+0x2c>)
    3412:	4798      	blx	r3
}
    3414:	bd10      	pop	{r4, pc}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	41004400 	.word	0x41004400
    341c:	00003349 	.word	0x00003349

00003420 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    3420:	b5f0      	push	{r4, r5, r6, r7, lr}
    3422:	46c6      	mov	lr, r8
    3424:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    3426:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    3428:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    342a:	2440      	movs	r4, #64	; 0x40
    342c:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    342e:	46a4      	mov	ip, r4
    3430:	e009      	b.n	3446 <system_pinmux_group_set_output_strength+0x26>
    3432:	18c5      	adds	r5, r0, r3
    3434:	3540      	adds	r5, #64	; 0x40
    3436:	782c      	ldrb	r4, [r5, #0]
    3438:	4667      	mov	r7, ip
    343a:	433c      	orrs	r4, r7
    343c:	b2e4      	uxtb	r4, r4
    343e:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    3440:	3301      	adds	r3, #1
    3442:	2b20      	cmp	r3, #32
    3444:	d00c      	beq.n	3460 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    3446:	000c      	movs	r4, r1
    3448:	40dc      	lsrs	r4, r3
    344a:	4226      	tst	r6, r4
    344c:	d0f8      	beq.n	3440 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    344e:	2a01      	cmp	r2, #1
    3450:	d0ef      	beq.n	3432 <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    3452:	18c4      	adds	r4, r0, r3
    3454:	3440      	adds	r4, #64	; 0x40
    3456:	7825      	ldrb	r5, [r4, #0]
    3458:	4647      	mov	r7, r8
    345a:	43bd      	bics	r5, r7
    345c:	7025      	strb	r5, [r4, #0]
    345e:	e7ef      	b.n	3440 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    3460:	bc04      	pop	{r2}
    3462:	4690      	mov	r8, r2
    3464:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003466 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3466:	4770      	bx	lr

00003468 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3468:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    346a:	4b05      	ldr	r3, [pc, #20]	; (3480 <system_init+0x18>)
    346c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    346e:	4b05      	ldr	r3, [pc, #20]	; (3484 <system_init+0x1c>)
    3470:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3472:	4b05      	ldr	r3, [pc, #20]	; (3488 <system_init+0x20>)
    3474:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3476:	4b05      	ldr	r3, [pc, #20]	; (348c <system_init+0x24>)
    3478:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <system_init+0x28>)
    347c:	4798      	blx	r3
}
    347e:	bd10      	pop	{r4, pc}
    3480:	00003029 	.word	0x00003029
    3484:	00002e41 	.word	0x00002e41
    3488:	00003467 	.word	0x00003467
    348c:	000016e9 	.word	0x000016e9
    3490:	00003467 	.word	0x00003467

00003494 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3494:	e7fe      	b.n	3494 <Dummy_Handler>
	...

00003498 <Reset_Handler>:
void Reset_Handler(void){
    3498:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    349a:	4a26      	ldr	r2, [pc, #152]	; (3534 <Reset_Handler+0x9c>)
    349c:	4b26      	ldr	r3, [pc, #152]	; (3538 <Reset_Handler+0xa0>)
    349e:	429a      	cmp	r2, r3
    34a0:	d011      	beq.n	34c6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    34a2:	001a      	movs	r2, r3
    34a4:	4b25      	ldr	r3, [pc, #148]	; (353c <Reset_Handler+0xa4>)
    34a6:	429a      	cmp	r2, r3
    34a8:	d20d      	bcs.n	34c6 <Reset_Handler+0x2e>
    34aa:	4a25      	ldr	r2, [pc, #148]	; (3540 <Reset_Handler+0xa8>)
    34ac:	3303      	adds	r3, #3
    34ae:	1a9b      	subs	r3, r3, r2
    34b0:	089b      	lsrs	r3, r3, #2
    34b2:	3301      	adds	r3, #1
    34b4:	009b      	lsls	r3, r3, #2
    34b6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    34b8:	481f      	ldr	r0, [pc, #124]	; (3538 <Reset_Handler+0xa0>)
    34ba:	491e      	ldr	r1, [pc, #120]	; (3534 <Reset_Handler+0x9c>)
    34bc:	588c      	ldr	r4, [r1, r2]
    34be:	5084      	str	r4, [r0, r2]
    34c0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    34c2:	429a      	cmp	r2, r3
    34c4:	d1fa      	bne.n	34bc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    34c6:	4a1f      	ldr	r2, [pc, #124]	; (3544 <Reset_Handler+0xac>)
    34c8:	4b1f      	ldr	r3, [pc, #124]	; (3548 <Reset_Handler+0xb0>)
    34ca:	429a      	cmp	r2, r3
    34cc:	d20a      	bcs.n	34e4 <Reset_Handler+0x4c>
    34ce:	43d3      	mvns	r3, r2
    34d0:	491d      	ldr	r1, [pc, #116]	; (3548 <Reset_Handler+0xb0>)
    34d2:	185b      	adds	r3, r3, r1
    34d4:	2103      	movs	r1, #3
    34d6:	438b      	bics	r3, r1
    34d8:	3304      	adds	r3, #4
    34da:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    34dc:	2100      	movs	r1, #0
    34de:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    34e0:	4293      	cmp	r3, r2
    34e2:	d1fc      	bne.n	34de <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34e4:	4a19      	ldr	r2, [pc, #100]	; (354c <Reset_Handler+0xb4>)
    34e6:	21ff      	movs	r1, #255	; 0xff
    34e8:	4b19      	ldr	r3, [pc, #100]	; (3550 <Reset_Handler+0xb8>)
    34ea:	438b      	bics	r3, r1
    34ec:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    34ee:	39fd      	subs	r1, #253	; 0xfd
    34f0:	2390      	movs	r3, #144	; 0x90
    34f2:	005b      	lsls	r3, r3, #1
    34f4:	4a17      	ldr	r2, [pc, #92]	; (3554 <Reset_Handler+0xbc>)
    34f6:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    34f8:	4b17      	ldr	r3, [pc, #92]	; (3558 <Reset_Handler+0xc0>)
    34fa:	7b9a      	ldrb	r2, [r3, #14]
    34fc:	312e      	adds	r1, #46	; 0x2e
    34fe:	438a      	bics	r2, r1
    3500:	2120      	movs	r1, #32
    3502:	430a      	orrs	r2, r1
    3504:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3506:	7b9a      	ldrb	r2, [r3, #14]
    3508:	210c      	movs	r1, #12
    350a:	438a      	bics	r2, r1
    350c:	2108      	movs	r1, #8
    350e:	430a      	orrs	r2, r1
    3510:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3512:	7b9a      	ldrb	r2, [r3, #14]
    3514:	2103      	movs	r1, #3
    3516:	438a      	bics	r2, r1
    3518:	2102      	movs	r1, #2
    351a:	430a      	orrs	r2, r1
    351c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    351e:	4a0f      	ldr	r2, [pc, #60]	; (355c <Reset_Handler+0xc4>)
    3520:	6853      	ldr	r3, [r2, #4]
    3522:	2180      	movs	r1, #128	; 0x80
    3524:	430b      	orrs	r3, r1
    3526:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3528:	4b0d      	ldr	r3, [pc, #52]	; (3560 <Reset_Handler+0xc8>)
    352a:	4798      	blx	r3
        main();
    352c:	4b0d      	ldr	r3, [pc, #52]	; (3564 <Reset_Handler+0xcc>)
    352e:	4798      	blx	r3
    3530:	e7fe      	b.n	3530 <Reset_Handler+0x98>
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	00003c34 	.word	0x00003c34
    3538:	20000000 	.word	0x20000000
    353c:	20000074 	.word	0x20000074
    3540:	20000004 	.word	0x20000004
    3544:	20000074 	.word	0x20000074
    3548:	20000450 	.word	0x20000450
    354c:	e000ed00 	.word	0xe000ed00
    3550:	00000800 	.word	0x00000800
    3554:	41007000 	.word	0x41007000
    3558:	41004800 	.word	0x41004800
    355c:	41004000 	.word	0x41004000
    3560:	000038cd 	.word	0x000038cd
    3564:	0000358d 	.word	0x0000358d

00003568 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3568:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    356a:	4a06      	ldr	r2, [pc, #24]	; (3584 <_sbrk+0x1c>)
    356c:	6812      	ldr	r2, [r2, #0]
    356e:	2a00      	cmp	r2, #0
    3570:	d004      	beq.n	357c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3572:	4a04      	ldr	r2, [pc, #16]	; (3584 <_sbrk+0x1c>)
    3574:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3576:	18c3      	adds	r3, r0, r3
    3578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    357a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    357c:	4902      	ldr	r1, [pc, #8]	; (3588 <_sbrk+0x20>)
    357e:	4a01      	ldr	r2, [pc, #4]	; (3584 <_sbrk+0x1c>)
    3580:	6011      	str	r1, [r2, #0]
    3582:	e7f6      	b.n	3572 <_sbrk+0xa>
    3584:	200001e4 	.word	0x200001e4
    3588:	20000850 	.word	0x20000850

0000358c <main>:
		}
	}
}

int main (void)
{
    358c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    358e:	4b0a      	ldr	r3, [pc, #40]	; (35b8 <main+0x2c>)
    3590:	4798      	blx	r3
	delay_init();
    3592:	4b0a      	ldr	r3, [pc, #40]	; (35bc <main+0x30>)
    3594:	4798      	blx	r3
	ORB_init();
    3596:	4b0a      	ldr	r3, [pc, #40]	; (35c0 <main+0x34>)
    3598:	4798      	blx	r3
	//microbit_connection();
	sensor_init();
    359a:	4b0a      	ldr	r3, [pc, #40]	; (35c4 <main+0x38>)
    359c:	4798      	blx	r3
	super_servo_init();
    359e:	4b0a      	ldr	r3, [pc, #40]	; (35c8 <main+0x3c>)
    35a0:	4798      	blx	r3
	enable_super_servo();
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <main+0x40>)
    35a4:	4798      	blx	r3
	enable_ORB();
    35a6:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <main+0x44>)
    35a8:	4798      	blx	r3
	spi_slave_init();
    35aa:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <main+0x48>)
    35ac:	4798      	blx	r3
		read_all_sensors();
    35ae:	4d0a      	ldr	r5, [pc, #40]	; (35d8 <main+0x4c>)
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		//microbit_connection();
		sensor_check();
		spi_main_loop();
    35b0:	4c0a      	ldr	r4, [pc, #40]	; (35dc <main+0x50>)
		read_all_sensors();
    35b2:	47a8      	blx	r5
		spi_main_loop();
    35b4:	47a0      	blx	r4
    35b6:	e7fc      	b.n	35b2 <main+0x26>
    35b8:	00003469 	.word	0x00003469
    35bc:	00001161 	.word	0x00001161
    35c0:	00002e1d 	.word	0x00002e1d
    35c4:	00001cd5 	.word	0x00001cd5
    35c8:	00001d91 	.word	0x00001d91
    35cc:	00001ce1 	.word	0x00001ce1
    35d0:	00002d55 	.word	0x00002d55
    35d4:	00001051 	.word	0x00001051
    35d8:	00001a9d 	.word	0x00001a9d
    35dc:	00000da1 	.word	0x00000da1

000035e0 <__udivsi3>:
    35e0:	2200      	movs	r2, #0
    35e2:	0843      	lsrs	r3, r0, #1
    35e4:	428b      	cmp	r3, r1
    35e6:	d374      	bcc.n	36d2 <__udivsi3+0xf2>
    35e8:	0903      	lsrs	r3, r0, #4
    35ea:	428b      	cmp	r3, r1
    35ec:	d35f      	bcc.n	36ae <__udivsi3+0xce>
    35ee:	0a03      	lsrs	r3, r0, #8
    35f0:	428b      	cmp	r3, r1
    35f2:	d344      	bcc.n	367e <__udivsi3+0x9e>
    35f4:	0b03      	lsrs	r3, r0, #12
    35f6:	428b      	cmp	r3, r1
    35f8:	d328      	bcc.n	364c <__udivsi3+0x6c>
    35fa:	0c03      	lsrs	r3, r0, #16
    35fc:	428b      	cmp	r3, r1
    35fe:	d30d      	bcc.n	361c <__udivsi3+0x3c>
    3600:	22ff      	movs	r2, #255	; 0xff
    3602:	0209      	lsls	r1, r1, #8
    3604:	ba12      	rev	r2, r2
    3606:	0c03      	lsrs	r3, r0, #16
    3608:	428b      	cmp	r3, r1
    360a:	d302      	bcc.n	3612 <__udivsi3+0x32>
    360c:	1212      	asrs	r2, r2, #8
    360e:	0209      	lsls	r1, r1, #8
    3610:	d065      	beq.n	36de <__udivsi3+0xfe>
    3612:	0b03      	lsrs	r3, r0, #12
    3614:	428b      	cmp	r3, r1
    3616:	d319      	bcc.n	364c <__udivsi3+0x6c>
    3618:	e000      	b.n	361c <__udivsi3+0x3c>
    361a:	0a09      	lsrs	r1, r1, #8
    361c:	0bc3      	lsrs	r3, r0, #15
    361e:	428b      	cmp	r3, r1
    3620:	d301      	bcc.n	3626 <__udivsi3+0x46>
    3622:	03cb      	lsls	r3, r1, #15
    3624:	1ac0      	subs	r0, r0, r3
    3626:	4152      	adcs	r2, r2
    3628:	0b83      	lsrs	r3, r0, #14
    362a:	428b      	cmp	r3, r1
    362c:	d301      	bcc.n	3632 <__udivsi3+0x52>
    362e:	038b      	lsls	r3, r1, #14
    3630:	1ac0      	subs	r0, r0, r3
    3632:	4152      	adcs	r2, r2
    3634:	0b43      	lsrs	r3, r0, #13
    3636:	428b      	cmp	r3, r1
    3638:	d301      	bcc.n	363e <__udivsi3+0x5e>
    363a:	034b      	lsls	r3, r1, #13
    363c:	1ac0      	subs	r0, r0, r3
    363e:	4152      	adcs	r2, r2
    3640:	0b03      	lsrs	r3, r0, #12
    3642:	428b      	cmp	r3, r1
    3644:	d301      	bcc.n	364a <__udivsi3+0x6a>
    3646:	030b      	lsls	r3, r1, #12
    3648:	1ac0      	subs	r0, r0, r3
    364a:	4152      	adcs	r2, r2
    364c:	0ac3      	lsrs	r3, r0, #11
    364e:	428b      	cmp	r3, r1
    3650:	d301      	bcc.n	3656 <__udivsi3+0x76>
    3652:	02cb      	lsls	r3, r1, #11
    3654:	1ac0      	subs	r0, r0, r3
    3656:	4152      	adcs	r2, r2
    3658:	0a83      	lsrs	r3, r0, #10
    365a:	428b      	cmp	r3, r1
    365c:	d301      	bcc.n	3662 <__udivsi3+0x82>
    365e:	028b      	lsls	r3, r1, #10
    3660:	1ac0      	subs	r0, r0, r3
    3662:	4152      	adcs	r2, r2
    3664:	0a43      	lsrs	r3, r0, #9
    3666:	428b      	cmp	r3, r1
    3668:	d301      	bcc.n	366e <__udivsi3+0x8e>
    366a:	024b      	lsls	r3, r1, #9
    366c:	1ac0      	subs	r0, r0, r3
    366e:	4152      	adcs	r2, r2
    3670:	0a03      	lsrs	r3, r0, #8
    3672:	428b      	cmp	r3, r1
    3674:	d301      	bcc.n	367a <__udivsi3+0x9a>
    3676:	020b      	lsls	r3, r1, #8
    3678:	1ac0      	subs	r0, r0, r3
    367a:	4152      	adcs	r2, r2
    367c:	d2cd      	bcs.n	361a <__udivsi3+0x3a>
    367e:	09c3      	lsrs	r3, r0, #7
    3680:	428b      	cmp	r3, r1
    3682:	d301      	bcc.n	3688 <__udivsi3+0xa8>
    3684:	01cb      	lsls	r3, r1, #7
    3686:	1ac0      	subs	r0, r0, r3
    3688:	4152      	adcs	r2, r2
    368a:	0983      	lsrs	r3, r0, #6
    368c:	428b      	cmp	r3, r1
    368e:	d301      	bcc.n	3694 <__udivsi3+0xb4>
    3690:	018b      	lsls	r3, r1, #6
    3692:	1ac0      	subs	r0, r0, r3
    3694:	4152      	adcs	r2, r2
    3696:	0943      	lsrs	r3, r0, #5
    3698:	428b      	cmp	r3, r1
    369a:	d301      	bcc.n	36a0 <__udivsi3+0xc0>
    369c:	014b      	lsls	r3, r1, #5
    369e:	1ac0      	subs	r0, r0, r3
    36a0:	4152      	adcs	r2, r2
    36a2:	0903      	lsrs	r3, r0, #4
    36a4:	428b      	cmp	r3, r1
    36a6:	d301      	bcc.n	36ac <__udivsi3+0xcc>
    36a8:	010b      	lsls	r3, r1, #4
    36aa:	1ac0      	subs	r0, r0, r3
    36ac:	4152      	adcs	r2, r2
    36ae:	08c3      	lsrs	r3, r0, #3
    36b0:	428b      	cmp	r3, r1
    36b2:	d301      	bcc.n	36b8 <__udivsi3+0xd8>
    36b4:	00cb      	lsls	r3, r1, #3
    36b6:	1ac0      	subs	r0, r0, r3
    36b8:	4152      	adcs	r2, r2
    36ba:	0883      	lsrs	r3, r0, #2
    36bc:	428b      	cmp	r3, r1
    36be:	d301      	bcc.n	36c4 <__udivsi3+0xe4>
    36c0:	008b      	lsls	r3, r1, #2
    36c2:	1ac0      	subs	r0, r0, r3
    36c4:	4152      	adcs	r2, r2
    36c6:	0843      	lsrs	r3, r0, #1
    36c8:	428b      	cmp	r3, r1
    36ca:	d301      	bcc.n	36d0 <__udivsi3+0xf0>
    36cc:	004b      	lsls	r3, r1, #1
    36ce:	1ac0      	subs	r0, r0, r3
    36d0:	4152      	adcs	r2, r2
    36d2:	1a41      	subs	r1, r0, r1
    36d4:	d200      	bcs.n	36d8 <__udivsi3+0xf8>
    36d6:	4601      	mov	r1, r0
    36d8:	4152      	adcs	r2, r2
    36da:	4610      	mov	r0, r2
    36dc:	4770      	bx	lr
    36de:	e7ff      	b.n	36e0 <__udivsi3+0x100>
    36e0:	b501      	push	{r0, lr}
    36e2:	2000      	movs	r0, #0
    36e4:	f000 f8f0 	bl	38c8 <__aeabi_idiv0>
    36e8:	bd02      	pop	{r1, pc}
    36ea:	46c0      	nop			; (mov r8, r8)

000036ec <__aeabi_uidivmod>:
    36ec:	2900      	cmp	r1, #0
    36ee:	d0f7      	beq.n	36e0 <__udivsi3+0x100>
    36f0:	e776      	b.n	35e0 <__udivsi3>
    36f2:	4770      	bx	lr

000036f4 <__divsi3>:
    36f4:	4603      	mov	r3, r0
    36f6:	430b      	orrs	r3, r1
    36f8:	d47f      	bmi.n	37fa <__divsi3+0x106>
    36fa:	2200      	movs	r2, #0
    36fc:	0843      	lsrs	r3, r0, #1
    36fe:	428b      	cmp	r3, r1
    3700:	d374      	bcc.n	37ec <__divsi3+0xf8>
    3702:	0903      	lsrs	r3, r0, #4
    3704:	428b      	cmp	r3, r1
    3706:	d35f      	bcc.n	37c8 <__divsi3+0xd4>
    3708:	0a03      	lsrs	r3, r0, #8
    370a:	428b      	cmp	r3, r1
    370c:	d344      	bcc.n	3798 <__divsi3+0xa4>
    370e:	0b03      	lsrs	r3, r0, #12
    3710:	428b      	cmp	r3, r1
    3712:	d328      	bcc.n	3766 <__divsi3+0x72>
    3714:	0c03      	lsrs	r3, r0, #16
    3716:	428b      	cmp	r3, r1
    3718:	d30d      	bcc.n	3736 <__divsi3+0x42>
    371a:	22ff      	movs	r2, #255	; 0xff
    371c:	0209      	lsls	r1, r1, #8
    371e:	ba12      	rev	r2, r2
    3720:	0c03      	lsrs	r3, r0, #16
    3722:	428b      	cmp	r3, r1
    3724:	d302      	bcc.n	372c <__divsi3+0x38>
    3726:	1212      	asrs	r2, r2, #8
    3728:	0209      	lsls	r1, r1, #8
    372a:	d065      	beq.n	37f8 <__divsi3+0x104>
    372c:	0b03      	lsrs	r3, r0, #12
    372e:	428b      	cmp	r3, r1
    3730:	d319      	bcc.n	3766 <__divsi3+0x72>
    3732:	e000      	b.n	3736 <__divsi3+0x42>
    3734:	0a09      	lsrs	r1, r1, #8
    3736:	0bc3      	lsrs	r3, r0, #15
    3738:	428b      	cmp	r3, r1
    373a:	d301      	bcc.n	3740 <__divsi3+0x4c>
    373c:	03cb      	lsls	r3, r1, #15
    373e:	1ac0      	subs	r0, r0, r3
    3740:	4152      	adcs	r2, r2
    3742:	0b83      	lsrs	r3, r0, #14
    3744:	428b      	cmp	r3, r1
    3746:	d301      	bcc.n	374c <__divsi3+0x58>
    3748:	038b      	lsls	r3, r1, #14
    374a:	1ac0      	subs	r0, r0, r3
    374c:	4152      	adcs	r2, r2
    374e:	0b43      	lsrs	r3, r0, #13
    3750:	428b      	cmp	r3, r1
    3752:	d301      	bcc.n	3758 <__divsi3+0x64>
    3754:	034b      	lsls	r3, r1, #13
    3756:	1ac0      	subs	r0, r0, r3
    3758:	4152      	adcs	r2, r2
    375a:	0b03      	lsrs	r3, r0, #12
    375c:	428b      	cmp	r3, r1
    375e:	d301      	bcc.n	3764 <__divsi3+0x70>
    3760:	030b      	lsls	r3, r1, #12
    3762:	1ac0      	subs	r0, r0, r3
    3764:	4152      	adcs	r2, r2
    3766:	0ac3      	lsrs	r3, r0, #11
    3768:	428b      	cmp	r3, r1
    376a:	d301      	bcc.n	3770 <__divsi3+0x7c>
    376c:	02cb      	lsls	r3, r1, #11
    376e:	1ac0      	subs	r0, r0, r3
    3770:	4152      	adcs	r2, r2
    3772:	0a83      	lsrs	r3, r0, #10
    3774:	428b      	cmp	r3, r1
    3776:	d301      	bcc.n	377c <__divsi3+0x88>
    3778:	028b      	lsls	r3, r1, #10
    377a:	1ac0      	subs	r0, r0, r3
    377c:	4152      	adcs	r2, r2
    377e:	0a43      	lsrs	r3, r0, #9
    3780:	428b      	cmp	r3, r1
    3782:	d301      	bcc.n	3788 <__divsi3+0x94>
    3784:	024b      	lsls	r3, r1, #9
    3786:	1ac0      	subs	r0, r0, r3
    3788:	4152      	adcs	r2, r2
    378a:	0a03      	lsrs	r3, r0, #8
    378c:	428b      	cmp	r3, r1
    378e:	d301      	bcc.n	3794 <__divsi3+0xa0>
    3790:	020b      	lsls	r3, r1, #8
    3792:	1ac0      	subs	r0, r0, r3
    3794:	4152      	adcs	r2, r2
    3796:	d2cd      	bcs.n	3734 <__divsi3+0x40>
    3798:	09c3      	lsrs	r3, r0, #7
    379a:	428b      	cmp	r3, r1
    379c:	d301      	bcc.n	37a2 <__divsi3+0xae>
    379e:	01cb      	lsls	r3, r1, #7
    37a0:	1ac0      	subs	r0, r0, r3
    37a2:	4152      	adcs	r2, r2
    37a4:	0983      	lsrs	r3, r0, #6
    37a6:	428b      	cmp	r3, r1
    37a8:	d301      	bcc.n	37ae <__divsi3+0xba>
    37aa:	018b      	lsls	r3, r1, #6
    37ac:	1ac0      	subs	r0, r0, r3
    37ae:	4152      	adcs	r2, r2
    37b0:	0943      	lsrs	r3, r0, #5
    37b2:	428b      	cmp	r3, r1
    37b4:	d301      	bcc.n	37ba <__divsi3+0xc6>
    37b6:	014b      	lsls	r3, r1, #5
    37b8:	1ac0      	subs	r0, r0, r3
    37ba:	4152      	adcs	r2, r2
    37bc:	0903      	lsrs	r3, r0, #4
    37be:	428b      	cmp	r3, r1
    37c0:	d301      	bcc.n	37c6 <__divsi3+0xd2>
    37c2:	010b      	lsls	r3, r1, #4
    37c4:	1ac0      	subs	r0, r0, r3
    37c6:	4152      	adcs	r2, r2
    37c8:	08c3      	lsrs	r3, r0, #3
    37ca:	428b      	cmp	r3, r1
    37cc:	d301      	bcc.n	37d2 <__divsi3+0xde>
    37ce:	00cb      	lsls	r3, r1, #3
    37d0:	1ac0      	subs	r0, r0, r3
    37d2:	4152      	adcs	r2, r2
    37d4:	0883      	lsrs	r3, r0, #2
    37d6:	428b      	cmp	r3, r1
    37d8:	d301      	bcc.n	37de <__divsi3+0xea>
    37da:	008b      	lsls	r3, r1, #2
    37dc:	1ac0      	subs	r0, r0, r3
    37de:	4152      	adcs	r2, r2
    37e0:	0843      	lsrs	r3, r0, #1
    37e2:	428b      	cmp	r3, r1
    37e4:	d301      	bcc.n	37ea <__divsi3+0xf6>
    37e6:	004b      	lsls	r3, r1, #1
    37e8:	1ac0      	subs	r0, r0, r3
    37ea:	4152      	adcs	r2, r2
    37ec:	1a41      	subs	r1, r0, r1
    37ee:	d200      	bcs.n	37f2 <__divsi3+0xfe>
    37f0:	4601      	mov	r1, r0
    37f2:	4152      	adcs	r2, r2
    37f4:	4610      	mov	r0, r2
    37f6:	4770      	bx	lr
    37f8:	e05d      	b.n	38b6 <__divsi3+0x1c2>
    37fa:	0fca      	lsrs	r2, r1, #31
    37fc:	d000      	beq.n	3800 <__divsi3+0x10c>
    37fe:	4249      	negs	r1, r1
    3800:	1003      	asrs	r3, r0, #32
    3802:	d300      	bcc.n	3806 <__divsi3+0x112>
    3804:	4240      	negs	r0, r0
    3806:	4053      	eors	r3, r2
    3808:	2200      	movs	r2, #0
    380a:	469c      	mov	ip, r3
    380c:	0903      	lsrs	r3, r0, #4
    380e:	428b      	cmp	r3, r1
    3810:	d32d      	bcc.n	386e <__divsi3+0x17a>
    3812:	0a03      	lsrs	r3, r0, #8
    3814:	428b      	cmp	r3, r1
    3816:	d312      	bcc.n	383e <__divsi3+0x14a>
    3818:	22fc      	movs	r2, #252	; 0xfc
    381a:	0189      	lsls	r1, r1, #6
    381c:	ba12      	rev	r2, r2
    381e:	0a03      	lsrs	r3, r0, #8
    3820:	428b      	cmp	r3, r1
    3822:	d30c      	bcc.n	383e <__divsi3+0x14a>
    3824:	0189      	lsls	r1, r1, #6
    3826:	1192      	asrs	r2, r2, #6
    3828:	428b      	cmp	r3, r1
    382a:	d308      	bcc.n	383e <__divsi3+0x14a>
    382c:	0189      	lsls	r1, r1, #6
    382e:	1192      	asrs	r2, r2, #6
    3830:	428b      	cmp	r3, r1
    3832:	d304      	bcc.n	383e <__divsi3+0x14a>
    3834:	0189      	lsls	r1, r1, #6
    3836:	d03a      	beq.n	38ae <__divsi3+0x1ba>
    3838:	1192      	asrs	r2, r2, #6
    383a:	e000      	b.n	383e <__divsi3+0x14a>
    383c:	0989      	lsrs	r1, r1, #6
    383e:	09c3      	lsrs	r3, r0, #7
    3840:	428b      	cmp	r3, r1
    3842:	d301      	bcc.n	3848 <__divsi3+0x154>
    3844:	01cb      	lsls	r3, r1, #7
    3846:	1ac0      	subs	r0, r0, r3
    3848:	4152      	adcs	r2, r2
    384a:	0983      	lsrs	r3, r0, #6
    384c:	428b      	cmp	r3, r1
    384e:	d301      	bcc.n	3854 <__divsi3+0x160>
    3850:	018b      	lsls	r3, r1, #6
    3852:	1ac0      	subs	r0, r0, r3
    3854:	4152      	adcs	r2, r2
    3856:	0943      	lsrs	r3, r0, #5
    3858:	428b      	cmp	r3, r1
    385a:	d301      	bcc.n	3860 <__divsi3+0x16c>
    385c:	014b      	lsls	r3, r1, #5
    385e:	1ac0      	subs	r0, r0, r3
    3860:	4152      	adcs	r2, r2
    3862:	0903      	lsrs	r3, r0, #4
    3864:	428b      	cmp	r3, r1
    3866:	d301      	bcc.n	386c <__divsi3+0x178>
    3868:	010b      	lsls	r3, r1, #4
    386a:	1ac0      	subs	r0, r0, r3
    386c:	4152      	adcs	r2, r2
    386e:	08c3      	lsrs	r3, r0, #3
    3870:	428b      	cmp	r3, r1
    3872:	d301      	bcc.n	3878 <__divsi3+0x184>
    3874:	00cb      	lsls	r3, r1, #3
    3876:	1ac0      	subs	r0, r0, r3
    3878:	4152      	adcs	r2, r2
    387a:	0883      	lsrs	r3, r0, #2
    387c:	428b      	cmp	r3, r1
    387e:	d301      	bcc.n	3884 <__divsi3+0x190>
    3880:	008b      	lsls	r3, r1, #2
    3882:	1ac0      	subs	r0, r0, r3
    3884:	4152      	adcs	r2, r2
    3886:	d2d9      	bcs.n	383c <__divsi3+0x148>
    3888:	0843      	lsrs	r3, r0, #1
    388a:	428b      	cmp	r3, r1
    388c:	d301      	bcc.n	3892 <__divsi3+0x19e>
    388e:	004b      	lsls	r3, r1, #1
    3890:	1ac0      	subs	r0, r0, r3
    3892:	4152      	adcs	r2, r2
    3894:	1a41      	subs	r1, r0, r1
    3896:	d200      	bcs.n	389a <__divsi3+0x1a6>
    3898:	4601      	mov	r1, r0
    389a:	4663      	mov	r3, ip
    389c:	4152      	adcs	r2, r2
    389e:	105b      	asrs	r3, r3, #1
    38a0:	4610      	mov	r0, r2
    38a2:	d301      	bcc.n	38a8 <__divsi3+0x1b4>
    38a4:	4240      	negs	r0, r0
    38a6:	2b00      	cmp	r3, #0
    38a8:	d500      	bpl.n	38ac <__divsi3+0x1b8>
    38aa:	4249      	negs	r1, r1
    38ac:	4770      	bx	lr
    38ae:	4663      	mov	r3, ip
    38b0:	105b      	asrs	r3, r3, #1
    38b2:	d300      	bcc.n	38b6 <__divsi3+0x1c2>
    38b4:	4240      	negs	r0, r0
    38b6:	b501      	push	{r0, lr}
    38b8:	2000      	movs	r0, #0
    38ba:	f000 f805 	bl	38c8 <__aeabi_idiv0>
    38be:	bd02      	pop	{r1, pc}

000038c0 <__aeabi_idivmod>:
    38c0:	2900      	cmp	r1, #0
    38c2:	d0f8      	beq.n	38b6 <__divsi3+0x1c2>
    38c4:	e716      	b.n	36f4 <__divsi3>
    38c6:	4770      	bx	lr

000038c8 <__aeabi_idiv0>:
    38c8:	4770      	bx	lr
    38ca:	46c0      	nop			; (mov r8, r8)

000038cc <__libc_init_array>:
    38cc:	b570      	push	{r4, r5, r6, lr}
    38ce:	2600      	movs	r6, #0
    38d0:	4d0c      	ldr	r5, [pc, #48]	; (3904 <__libc_init_array+0x38>)
    38d2:	4c0d      	ldr	r4, [pc, #52]	; (3908 <__libc_init_array+0x3c>)
    38d4:	1b64      	subs	r4, r4, r5
    38d6:	10a4      	asrs	r4, r4, #2
    38d8:	42a6      	cmp	r6, r4
    38da:	d109      	bne.n	38f0 <__libc_init_array+0x24>
    38dc:	2600      	movs	r6, #0
    38de:	f000 f999 	bl	3c14 <_init>
    38e2:	4d0a      	ldr	r5, [pc, #40]	; (390c <__libc_init_array+0x40>)
    38e4:	4c0a      	ldr	r4, [pc, #40]	; (3910 <__libc_init_array+0x44>)
    38e6:	1b64      	subs	r4, r4, r5
    38e8:	10a4      	asrs	r4, r4, #2
    38ea:	42a6      	cmp	r6, r4
    38ec:	d105      	bne.n	38fa <__libc_init_array+0x2e>
    38ee:	bd70      	pop	{r4, r5, r6, pc}
    38f0:	00b3      	lsls	r3, r6, #2
    38f2:	58eb      	ldr	r3, [r5, r3]
    38f4:	4798      	blx	r3
    38f6:	3601      	adds	r6, #1
    38f8:	e7ee      	b.n	38d8 <__libc_init_array+0xc>
    38fa:	00b3      	lsls	r3, r6, #2
    38fc:	58eb      	ldr	r3, [r5, r3]
    38fe:	4798      	blx	r3
    3900:	3601      	adds	r6, #1
    3902:	e7f2      	b.n	38ea <__libc_init_array+0x1e>
    3904:	00003c20 	.word	0x00003c20
    3908:	00003c20 	.word	0x00003c20
    390c:	00003c20 	.word	0x00003c20
    3910:	00003c24 	.word	0x00003c24

00003914 <malloc>:
    3914:	b510      	push	{r4, lr}
    3916:	4b03      	ldr	r3, [pc, #12]	; (3924 <malloc+0x10>)
    3918:	0001      	movs	r1, r0
    391a:	6818      	ldr	r0, [r3, #0]
    391c:	f000 f816 	bl	394c <_malloc_r>
    3920:	bd10      	pop	{r4, pc}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	20000010 	.word	0x20000010

00003928 <memcpy>:
    3928:	2300      	movs	r3, #0
    392a:	b510      	push	{r4, lr}
    392c:	429a      	cmp	r2, r3
    392e:	d100      	bne.n	3932 <memcpy+0xa>
    3930:	bd10      	pop	{r4, pc}
    3932:	5ccc      	ldrb	r4, [r1, r3]
    3934:	54c4      	strb	r4, [r0, r3]
    3936:	3301      	adds	r3, #1
    3938:	e7f8      	b.n	392c <memcpy+0x4>

0000393a <memset>:
    393a:	0003      	movs	r3, r0
    393c:	1882      	adds	r2, r0, r2
    393e:	4293      	cmp	r3, r2
    3940:	d100      	bne.n	3944 <memset+0xa>
    3942:	4770      	bx	lr
    3944:	7019      	strb	r1, [r3, #0]
    3946:	3301      	adds	r3, #1
    3948:	e7f9      	b.n	393e <memset+0x4>
	...

0000394c <_malloc_r>:
    394c:	2303      	movs	r3, #3
    394e:	b570      	push	{r4, r5, r6, lr}
    3950:	1ccd      	adds	r5, r1, #3
    3952:	439d      	bics	r5, r3
    3954:	3508      	adds	r5, #8
    3956:	0006      	movs	r6, r0
    3958:	2d0c      	cmp	r5, #12
    395a:	d21e      	bcs.n	399a <_malloc_r+0x4e>
    395c:	250c      	movs	r5, #12
    395e:	42a9      	cmp	r1, r5
    3960:	d81d      	bhi.n	399e <_malloc_r+0x52>
    3962:	0030      	movs	r0, r6
    3964:	f000 f862 	bl	3a2c <__malloc_lock>
    3968:	4a25      	ldr	r2, [pc, #148]	; (3a00 <_malloc_r+0xb4>)
    396a:	6814      	ldr	r4, [r2, #0]
    396c:	0021      	movs	r1, r4
    396e:	2900      	cmp	r1, #0
    3970:	d119      	bne.n	39a6 <_malloc_r+0x5a>
    3972:	4c24      	ldr	r4, [pc, #144]	; (3a04 <_malloc_r+0xb8>)
    3974:	6823      	ldr	r3, [r4, #0]
    3976:	2b00      	cmp	r3, #0
    3978:	d103      	bne.n	3982 <_malloc_r+0x36>
    397a:	0030      	movs	r0, r6
    397c:	f000 f844 	bl	3a08 <_sbrk_r>
    3980:	6020      	str	r0, [r4, #0]
    3982:	0029      	movs	r1, r5
    3984:	0030      	movs	r0, r6
    3986:	f000 f83f 	bl	3a08 <_sbrk_r>
    398a:	1c43      	adds	r3, r0, #1
    398c:	d12c      	bne.n	39e8 <_malloc_r+0x9c>
    398e:	230c      	movs	r3, #12
    3990:	0030      	movs	r0, r6
    3992:	6033      	str	r3, [r6, #0]
    3994:	f000 f84b 	bl	3a2e <__malloc_unlock>
    3998:	e003      	b.n	39a2 <_malloc_r+0x56>
    399a:	2d00      	cmp	r5, #0
    399c:	dadf      	bge.n	395e <_malloc_r+0x12>
    399e:	230c      	movs	r3, #12
    39a0:	6033      	str	r3, [r6, #0]
    39a2:	2000      	movs	r0, #0
    39a4:	bd70      	pop	{r4, r5, r6, pc}
    39a6:	680b      	ldr	r3, [r1, #0]
    39a8:	1b5b      	subs	r3, r3, r5
    39aa:	d41a      	bmi.n	39e2 <_malloc_r+0x96>
    39ac:	2b0b      	cmp	r3, #11
    39ae:	d903      	bls.n	39b8 <_malloc_r+0x6c>
    39b0:	600b      	str	r3, [r1, #0]
    39b2:	18cc      	adds	r4, r1, r3
    39b4:	6025      	str	r5, [r4, #0]
    39b6:	e003      	b.n	39c0 <_malloc_r+0x74>
    39b8:	428c      	cmp	r4, r1
    39ba:	d10e      	bne.n	39da <_malloc_r+0x8e>
    39bc:	6863      	ldr	r3, [r4, #4]
    39be:	6013      	str	r3, [r2, #0]
    39c0:	0030      	movs	r0, r6
    39c2:	f000 f834 	bl	3a2e <__malloc_unlock>
    39c6:	0020      	movs	r0, r4
    39c8:	2207      	movs	r2, #7
    39ca:	300b      	adds	r0, #11
    39cc:	1d23      	adds	r3, r4, #4
    39ce:	4390      	bics	r0, r2
    39d0:	1ac3      	subs	r3, r0, r3
    39d2:	d0e7      	beq.n	39a4 <_malloc_r+0x58>
    39d4:	425a      	negs	r2, r3
    39d6:	50e2      	str	r2, [r4, r3]
    39d8:	e7e4      	b.n	39a4 <_malloc_r+0x58>
    39da:	684b      	ldr	r3, [r1, #4]
    39dc:	6063      	str	r3, [r4, #4]
    39de:	000c      	movs	r4, r1
    39e0:	e7ee      	b.n	39c0 <_malloc_r+0x74>
    39e2:	000c      	movs	r4, r1
    39e4:	6849      	ldr	r1, [r1, #4]
    39e6:	e7c2      	b.n	396e <_malloc_r+0x22>
    39e8:	2303      	movs	r3, #3
    39ea:	1cc4      	adds	r4, r0, #3
    39ec:	439c      	bics	r4, r3
    39ee:	42a0      	cmp	r0, r4
    39f0:	d0e0      	beq.n	39b4 <_malloc_r+0x68>
    39f2:	1a21      	subs	r1, r4, r0
    39f4:	0030      	movs	r0, r6
    39f6:	f000 f807 	bl	3a08 <_sbrk_r>
    39fa:	1c43      	adds	r3, r0, #1
    39fc:	d1da      	bne.n	39b4 <_malloc_r+0x68>
    39fe:	e7c6      	b.n	398e <_malloc_r+0x42>
    3a00:	200001f4 	.word	0x200001f4
    3a04:	200001f8 	.word	0x200001f8

00003a08 <_sbrk_r>:
    3a08:	2300      	movs	r3, #0
    3a0a:	b570      	push	{r4, r5, r6, lr}
    3a0c:	4c06      	ldr	r4, [pc, #24]	; (3a28 <_sbrk_r+0x20>)
    3a0e:	0005      	movs	r5, r0
    3a10:	0008      	movs	r0, r1
    3a12:	6023      	str	r3, [r4, #0]
    3a14:	f7ff fda8 	bl	3568 <_sbrk>
    3a18:	1c43      	adds	r3, r0, #1
    3a1a:	d103      	bne.n	3a24 <_sbrk_r+0x1c>
    3a1c:	6823      	ldr	r3, [r4, #0]
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d000      	beq.n	3a24 <_sbrk_r+0x1c>
    3a22:	602b      	str	r3, [r5, #0]
    3a24:	bd70      	pop	{r4, r5, r6, pc}
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	2000044c 	.word	0x2000044c

00003a2c <__malloc_lock>:
    3a2c:	4770      	bx	lr

00003a2e <__malloc_unlock>:
    3a2e:	4770      	bx	lr
    3a30:	00000dfc 	.word	0x00000dfc
    3a34:	00000dde 	.word	0x00000dde
    3a38:	00000dde 	.word	0x00000dde
    3a3c:	00000e0a 	.word	0x00000e0a
    3a40:	00000e18 	.word	0x00000e18
    3a44:	00000e2e 	.word	0x00000e2e
    3a48:	00000e44 	.word	0x00000e44
    3a4c:	00000e52 	.word	0x00000e52
    3a50:	00000e60 	.word	0x00000e60
    3a54:	00000e6e 	.word	0x00000e6e
    3a58:	00000e7c 	.word	0x00000e7c
    3a5c:	00000ebc 	.word	0x00000ebc
    3a60:	000013b2 	.word	0x000013b2
    3a64:	000015fe 	.word	0x000015fe
    3a68:	000015fe 	.word	0x000015fe
    3a6c:	000015fe 	.word	0x000015fe
    3a70:	000015fe 	.word	0x000015fe
    3a74:	000015fe 	.word	0x000015fe
    3a78:	000015fe 	.word	0x000015fe
    3a7c:	000015fe 	.word	0x000015fe
    3a80:	000015fe 	.word	0x000015fe
    3a84:	000015fe 	.word	0x000015fe
    3a88:	000015fe 	.word	0x000015fe
    3a8c:	000015fe 	.word	0x000015fe
    3a90:	000015fe 	.word	0x000015fe
    3a94:	000015fe 	.word	0x000015fe
    3a98:	000015fe 	.word	0x000015fe
    3a9c:	000015fe 	.word	0x000015fe
    3aa0:	0000139a 	.word	0x0000139a
    3aa4:	000015fe 	.word	0x000015fe
    3aa8:	000015fe 	.word	0x000015fe
    3aac:	000015fe 	.word	0x000015fe
    3ab0:	000015fe 	.word	0x000015fe
    3ab4:	000015fe 	.word	0x000015fe
    3ab8:	000015fe 	.word	0x000015fe
    3abc:	000015fe 	.word	0x000015fe
    3ac0:	000015fe 	.word	0x000015fe
    3ac4:	000015fe 	.word	0x000015fe
    3ac8:	000015fe 	.word	0x000015fe
    3acc:	000015fe 	.word	0x000015fe
    3ad0:	000015fe 	.word	0x000015fe
    3ad4:	000015fe 	.word	0x000015fe
    3ad8:	000015fe 	.word	0x000015fe
    3adc:	000015fe 	.word	0x000015fe
    3ae0:	000013aa 	.word	0x000013aa
    3ae4:	000015fe 	.word	0x000015fe
    3ae8:	000015fe 	.word	0x000015fe
    3aec:	000015fe 	.word	0x000015fe
    3af0:	000015fe 	.word	0x000015fe
    3af4:	000015fe 	.word	0x000015fe
    3af8:	000015fe 	.word	0x000015fe
    3afc:	000015fe 	.word	0x000015fe
    3b00:	000015fe 	.word	0x000015fe
    3b04:	000015fe 	.word	0x000015fe
    3b08:	000015fe 	.word	0x000015fe
    3b0c:	000015fe 	.word	0x000015fe
    3b10:	000015fe 	.word	0x000015fe
    3b14:	000015fe 	.word	0x000015fe
    3b18:	000015fe 	.word	0x000015fe
    3b1c:	000015fe 	.word	0x000015fe
    3b20:	000013a2 	.word	0x000013a2
    3b24:	000013ba 	.word	0x000013ba
    3b28:	00001382 	.word	0x00001382
    3b2c:	00001392 	.word	0x00001392
    3b30:	0000138a 	.word	0x0000138a
    3b34:	00000002 	.word	0x00000002
    3b38:	00000003 	.word	0x00000003
    3b3c:	00000004 	.word	0x00000004
    3b40:	00000005 	.word	0x00000005
    3b44:	00000006 	.word	0x00000006
    3b48:	00000007 	.word	0x00000007
    3b4c:	0000000e 	.word	0x0000000e
    3b50:	0000000f 	.word	0x0000000f
    3b54:	0000000a 	.word	0x0000000a
    3b58:	0000000b 	.word	0x0000000b
    3b5c:	0000ffff 	.word	0x0000ffff
    3b60:	0000ffff 	.word	0x0000ffff
    3b64:	0000ffff 	.word	0x0000ffff
    3b68:	0000ffff 	.word	0x0000ffff
    3b6c:	0000ffff 	.word	0x0000ffff
    3b70:	0000ffff 	.word	0x0000ffff
    3b74:	0000ffff 	.word	0x0000ffff
    3b78:	0000ffff 	.word	0x0000ffff
    3b7c:	0000ffff 	.word	0x0000ffff
    3b80:	0000ffff 	.word	0x0000ffff
    3b84:	42000800 	.word	0x42000800
    3b88:	42000c00 	.word	0x42000c00
    3b8c:	42001000 	.word	0x42001000

00003b90 <sensor_analog_inputs>:
    3b90:	00080906                                ....

00003b94 <_tcc_intflag>:
    3b94:	00000001 00000002 00000004 00000008     ................
    3ba4:	00001000 00002000 00004000 00008000     ..... ...@......
    3bb4:	00010000 00020000 00040000 00080000     ................

00003bc4 <tc_interrupt_vectors.12355>:
    3bc4:	00000e0d                                ....

00003bc8 <tc_interrupt_vectors.12355>:
    3bc8:	00000e0d 00002ec6 00002ec2 00002ec2     ................
    3bd8:	00002f24 00002f24 00002eda 00002ecc     $/..$/..........
    3be8:	00002ee0 00002f12 00002fac 00002f8c     ...../.../.../..
    3bf8:	00002f8c 00003018 00002f9e 00002fba     ./...0.../.../..
    3c08:	00002f90 00002fc8 00003008              ./.../...0..

00003c14 <_init>:
    3c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c16:	46c0      	nop			; (mov r8, r8)
    3c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c1a:	bc08      	pop	{r3}
    3c1c:	469e      	mov	lr, r3
    3c1e:	4770      	bx	lr

00003c20 <__init_array_start>:
    3c20:	000008b5 	.word	0x000008b5

00003c24 <_fini>:
    3c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c2a:	bc08      	pop	{r3}
    3c2c:	469e      	mov	lr, r3
    3c2e:	4770      	bx	lr

00003c30 <__fini_array_start>:
    3c30:	0000088d 	.word	0x0000088d
